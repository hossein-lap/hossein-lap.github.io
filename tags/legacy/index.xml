<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Legacy on Hossein Esmail</title>
    <link>https://hossein-lap.github.io/tags/legacy/</link>
    <description>Recent content in Legacy on Hossein Esmail</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hossein Esmail</copyright>
    <lastBuildDate>Wed, 11 Sep 2024 15:04:10 +0330</lastBuildDate><atom:link href="https://hossein-lap.github.io/tags/legacy/index.xml" rel="self" type="application/rss+xml" /><icon>https://hossein-lap.github.io/images/ed/bar.png</icon>
    
    
    <item>
      <title>Perl</title>
      <link>https://hossein-lap.github.io/docs/perl/</link>
      <pubDate>Wed, 11 Sep 2024 15:04:10 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/perl/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="listingblock">
<div class="title">Hello World!</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Hello world!</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>use warnings;</code> is called <em>pragma</em> in Perl. This pragma instructs Perl to turn
on additional warning reporting.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_syntax">1. Perl Syntax</h2>
<div class="sectionbody">
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>Basic <strong>Perl syntax</strong> to get started with Perl language quickly including
variables, expressions, statements, block, comments, whitespaces, and keywords.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_values_and_variables">1.1. Values and Variables</h3>
<div class="paragraph">
<p>You develop Perl programs to manipulate some kinds of data. The data can be
either <a href="doc/03-perl-numbers.html#_Perl_numbers">numbers</a>,
<a href="doc/04-perl-strings.html#_Perl_strings">strings</a>, or more complex such as a
<a href="doc/06-perl-list.html#_Perl_list">list</a>. Data is held as value.</p>
</div>
<div class="listingblock">
<div class="title">Some values</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #90a959">10</span>
<span style="color: #90a959">20.2</span>
<span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Perl Syntax</span><span style="color: #d0d0d0">&#34;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To hold a piece of data, you need <strong>variables</strong>. You use a variable to store a
value. And through the name of the variable, you can process the value.</p>
</div>
<div class="paragraph">
<p>The following illustrates some variables in Perl:</p>
</div>
<div class="listingblock">
<div class="title">Define variables</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$y</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Perl string</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We have two integer variables (<code>$x</code> and <code>$y</code>) and one string variable (<code>$s</code>).
For more information on Perl variables, check it out the
<a href="doc/02-perl-variables.html#_Perl_variables">Perl variables</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_expressions">1.2. Expressions</h3>
<div class="paragraph">
<p>In Perl, an expression is anything that returns a value.</p>
</div>
<div class="paragraph">
<p>The expression can be used in a larger expression or a statement. The expression can be a literal
<a href="doc/03-perl-numbers.html#_Perl_numbers">number</a>, complex expression with
<a href="doc/05-perl-operators.html#_Perl_operators">operators</a>, or a
<a href="doc/20-perl-subroutine.html#_Perl_subroutine">function (aka subroutine)</a>, call.</p>
</div>
<div class="paragraph">
<p>For example, 3 is an expression that returns a value of 3. The <code>$a + $b</code> is an
expression that returns the sum of two variables: <code>$a</code> and <code>$b</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_statements">1.3. Statements</h3>
<div class="paragraph">
<p>A statement is made up of expressions. A statement is executed by Perl at run-time.</p>
</div>
<div class="paragraph">
<p>Each Perl statement must end with a semicolon (<code>;</code>). The following example
shows the statements in Perl:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">+</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_blocks">1.4. Blocks</h3>
<div class="paragraph">
<p>A block is made up of statements wrapped in curly braces <code>{}</code>. You use blocks
to organize statements in the program.</p>
</div>
<div class="paragraph">
<p>The following example illustrates a block in Perl:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
    <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Any variable declared inside a block has its own scope.</p>
</div>
<div class="paragraph">
<p>It means the variables declared inside a block only last as long as the block
is executed.</p>
</div>
</div>
<div class="sect2">
<h3 id="_comments">1.5. Comments</h3>
<div class="paragraph">
<p>In Perl, a comment begins with a hash (<code>#</code>) character. Perl interpreter ignores
comments at both compile-time and runtime.</p>
</div>
<div class="paragraph">
<p>Typically, you use comments to document the logic of your code. The code tells
you what it does however comments provides information on why the code does so.</p>
</div>
<div class="paragraph">
<p>Comments are very important and useful to you as a programmer in order to
understand the code later. They’re also useful to other programmers who will
read and maintain your programs in the future.</p>
</div>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">1.05</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>What the code does is to increase the value of the variable <code>$salary</code> 5%.
However, why it does so was not documented.</p>
</div>
<div class="paragraph">
<p>Therefore the following code with comment is much clearer.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050"># increase salary %5 for employees who achieve KPI</span>
<span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">1.05</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl also allows you to place a comment on the same line as the statement. See
the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># reset the counter</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is important to use comments properly to make your code easier to
understand.</p>
</div>
</div>
<div class="sect2">
<h3 id="_whitespace">1.6. Whitespace</h3>
<div class="paragraph">
<p>Whitespaces are spaces, tabs, and newlines. Perl is very flexible in terms of
whitespaces usages. Consider the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$y</span><span style="color: #d0d0d0">=</span><span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Both lines of code work perfectly. We surrounded the assignment operator (<code>=</code>)
with whitespace in the first statement, but not in the second one.</p>
</div>
<div class="paragraph">
<p>Perl really doesn’t care about the whitespace. However, it is a good practice
to use whitespace to make the code more readable.</p>
</div>
</div>
<div class="sect2">
<h3 id="_keywords">1.7. Keywords</h3>
<div class="paragraph">
<p>Perl has a set of keywords that have special meanings to its language.</p>
</div>
<div class="paragraph">
<p>Perl keywords fall into some categories such as built-in function and control
keywords.</p>
</div>
<div class="paragraph">
<p>You should always avoid using keywords to name variables, functions,
<a href="doc/21-perl-modules.html#_Perl_modules">modules</a>, and other objects. Check it
out the <a href="http://learn.perl.org/docs/keywords.html">Perl keywords</a>.</p>
</div>
<div class="paragraph">
<p>Sometimes, it is fine to use a variable name such as <code>$print</code>, which is similar
to the built-in <code>print()</code> function. However, this may lead to confusion. In
addition, if the program has an issue, it’s more difficult to troubleshoot.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_variables">2. Perl Variables</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To manipulate data in your program, you use variables.</p>
</div>
<div class="paragraph">
<p>Perl provides three types of variables: scalars, lists, and hashes to help you
manipulate the corresponding data types including scalars, lists, and hashes.</p>
</div>
<div class="paragraph">
<p>We’ll focus on the scalar variable in this section.</p>
</div>
<div class="sect2">
<h3 id="_naming_variables">2.1. Naming variables</h3>
<div class="paragraph">
<p>You use scalar variables to manipulate scalar data such as
<a href="doc/03-perl-numbers.html#_Perl_numbers">numbers</a> and
<a href="doc/04-perl-strings.html#_Perl_strings">strings</a>,</p>
</div>
<div class="paragraph">
<p>A scalar variable starts with a dollar sign (<code>$</code>), followed by a letter or
underscore, after that, any combination of numbers, letters, and underscores.
The name of a variable can be up to 255 characters.</p>
</div>
<div class="paragraph">
<p>Perl is case-sensitive. The <code>$variable</code> and <code>$Variable</code> are different variables.</p>
</div>
<div class="paragraph">
<p>Perl uses the dollar sign (<code>$</code>) as a prefix for the scalar variables because of
the <code>$</code> looks like the character S in the scalar. You can use this tip to
remember when you want to declare a scalar variable.</p>
</div>
<div class="listingblock">
<div class="title">Valid variables:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl]">$gate = 10;
$_port = 20;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Invalid variables:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl]">$4whatever = 20; # no letter or underscore found after dollar sign ($)
$email-address = &#34;zen@example.com&#34;; # special character (-) found
$home url = &#34;http://localhost/perltutorial&#34;; # space is not allowed</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_declaring_variables">2.2. Declaring variables</h3>
<div class="paragraph">
<p>Perl doesn’t require you to declare a variable before using it.</p>
</div>
<div class="paragraph">
<p>For example, you can introduce a variable in your program and use it right away
as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">+</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In some cases, using a variable without declaring it explicitly may lead to
problems. Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Your favorite color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$colour</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The expected output was <code>Your favorite color is red</code>.</p>
</div>
<div class="paragraph">
<p>However, in this case, you got <code>Your favorite color is</code>, because the <code>$color</code>
and <code>$colour</code> are different variables. The mistake was made because of the
<em>different variable names</em>.</p>
</div>
<div class="paragraph">
<p>To prevent such cases, Perl provides a <em>pragma</em> called <code>strict</code> that requires you
to declare variable explicitly before using it.</p>
</div>
<div class="paragraph">
<p>In this case, if you use the <code>my</code> keyword to declare a variable and try to run
the script, Perl will issue an error message indicating that a compilation
error occurred due to the <code>$colour</code> variable must be declared explicitly.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Your favorite color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$colour</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A variable declared with the <code>my</code> keyword is a <em>lexically scoped</em> variable.</p>
</div>
<div class="paragraph">
<p>It means the variable is only accessible inside the enclosing block or all
blocks nested inside the enclosing block. In other words, the variable is local
to the enclosing block.</p>
</div>
<div class="paragraph">
<p>Now, you’ll learn a very important concept in programming called variable
scopes.</p>
</div>
</div>
<div class="sect2">
<h3 id="_perl_variable_scopes">2.3. Perl variable scopes</h3>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">my favorite #1 color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #505050"># another block</span>
<span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">blue</span><span style="color: #d0d0d0">&#39;;</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">my favorite #2 color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span><span style="color: #151515;background-color: #ac4142">  </span>
<span style="color: #d0d0d0">}</span>
<span style="color: #505050"># for checking</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">my favorite #1 color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">In the example above</div>
<div class="ulist">
<ul>
<li>
<p>First, declared a global variable named <code>$color</code></p>
</li>
<li>
<p>Then, displayed the favorite color by referring to the <code>$color</code> variable. As
expected, we get the red color in this case</p>
</li>
<li>
<p>Next, created a new block and declared a variable with the same name <code>$color</code>
using the <code>my</code> keyword. The <code>$color</code> variable is lexical. It is a local
variable and only visible inside the enclosing block</p>
</li>
<li>
<p>After that, inside the block, we displayed the favorite color and we got the
<code>blue</code> color. The local variable takes priority in this case</p>
</li>
<li>
<p>Finally, following the block, we referred to the <code>$color</code> variable and Perl
referred to the <code>$color</code> global variable</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If you want to declare global variables that are visible throughout your
program or from external packages, you can use <code>our</code> keyword as shown in the
following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">our</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_variable_interpolation">2.4. Perl variable interpolation</h3>
<div class="paragraph">
<p>Perl interpolates variables in double-quoted strings. It means if you place a
variable inside a double-quoted string, you’ll get the value of the variable
instead of its name.</p>
</div>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$amount</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The amount is </span><span style="color: #8f5536">$amount</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl interpolates the value of <code>$amount</code> into the string which is 20.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Perl only interpolates scalar variables and
<a href="doc/07-perl-array.html#_Perl_array">array</a>, not
<a href="doc/07-perl-hash.html#_Perl_hash">hashes</a>. In addition, the interpolation is
only applied to the double-quoted string, but not the single-quoted string</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_numbers">3. Perl Numbers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl has two kinds of numbers: integer and floating-point numbers.</p>
</div>
<div class="sect2">
<h3 id="_perl_integers">3.1. Perl integers</h3>
<div class="paragraph">
<p>Integers are whole numbers that have no digits after the decimal points i.e
<code>10</code>, <code>-20</code> or <code>100</code>.</p>
</div>
<div class="paragraph">
<p>In Perl, integers are often expressed as decimal integers, base 10. The
following illustrates some integer numbers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$y</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">100</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$z</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">-</span><span style="color: #90a959">200</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When the integer number is big, you often use a comma as a separator to make it
easier to read e.g., 123,763,213.</p>
</div>
<div class="paragraph">
<p>However, Perl already uses a comma (<code>,</code>) as a separator in the list so for
integer numbers Perl uses an underscore character (<code>_</code>) instead. In this case,
<code>123,763,213</code> is written in Perl as <code>123_763_213</code>.</p>
</div>
<div class="paragraph">
<p>Take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">123_763_213</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># 123763213</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the output of the example above, Perl uses no comma or underscore as the
separator.</p>
</div>
<div class="paragraph">
<p>Besides the decimal format, Perl also supports other formats including binary,
octal, and hexadecimal.</p>
</div>
<div class="paragraph">
<p>The following table shows you prefixes for formatting with binary, octal, and
hexadecimal integers.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Number</th>
<th class="tableblock halign-left valign-top">Format</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0b123</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Binary integer using a prefix of 0b</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0255</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Octal integer using a prefix of 0</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0xABC</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Hexadecimal integer using a prefix of 0x</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>All the following integer numbers are 12 in Perl:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>12
0b1100
014
0xC</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_floating_point_numbers">3.2. Perl floating-point numbers</h3>
<div class="paragraph">
<p>You use floating-point numbers to store real numbers. Perl represents
floating-point numbers in two forms:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Fixed point</strong>: the decimal point is fixed in the number to denote fractional
part starts e.g., <code>100.25</code></p>
</li>
<li>
<p><strong>Scientific</strong>: consists of a significand with the actual number value and an
exponent representing the power of 10 that the significand is multiplied by,
for example, <code>+1.0025e2</code> or  <code>-1.0025E2</code> is <code>100.25.</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The floating-point number holds 8 bytes, with 11 bits reserved for the exponent
and 53 bits for significand.</p>
</div>
<div class="paragraph">
<p>The range of floating-point numbers is essentially determined by the standard C
library of the underlying platform where Perl is running.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_string">4. Perl String</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl’s built-in string functions to manipulate strings.</p>
</div>
<div class="sect2">
<h3 id="_introduction_to_perl_strings">4.1. Introduction to Perl strings</h3>
<div class="paragraph">
<p>In Perl, a string is a sequence of characters surrounded by some kind of
quotation marks. A string can contain ASCII, UNICODE, and escape sequences
characters such as <code>\n</code>.</p>
</div>
<div class="paragraph">
<p>A Perl string has a length that depends on the amount of memory in your system,
which is theoretically unlimited.</p>
</div>
<div class="paragraph">
<p>The following example demonstrates single and double-quoted strings.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s1</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">string with doubled-quotes</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s2</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">string with single quote</span><span style="color: #d0d0d0">&#39;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is important to remember that the double-quoted string replaces variables
inside it by their values, while the single-quoted string treats them as text.
This is known as variable interpolation in Perl.</p>
</div>
</div>
<div class="sect2">
<h3 id="_perl_string_alternative_delimiters">4.2. Perl string alternative delimiters</h3>
<div class="paragraph">
<p>Besides the single and double quotes, Perl also allows you to use quote-like
operators such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>q//</code> acts like a single-quoted string.</p>
</li>
<li>
<p>The <code>qq//</code> acts like double-quoted string</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can choose any non-alphabetic and non-numeric characters as the delimiters,
not only just characters <code>//</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">=</span> <span style="color: #90a959">q/&#34;Are you learning Perl String today?&#34; We asked./</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$name</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Jack</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s2</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qq/&#34;Are you learning Perl String today?&#34;$name asked./</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s2</span> <span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, defined a single-quoted string variable with the quote-like operator
<code>q/</code>. The string  <code>$s</code> ends with <code>/</code></p>
</li>
<li>
<p>Second, defined a double-quoted string with the quote-like operator <code>qq/</code>. In
this case, we used the <code>$name</code> variable inside a string and it is replaced by
its value, <code>Jack</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following example demonstrates string with the <code>^</code> delimiter.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">q^A string with different delimiter ^</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_string_functions">4.3. Perl string functions</h3>
<div class="paragraph">
<p>Perl provides a set of functions that allow you to manipulate strings
effectively. We cover the most commonly used string functions in the following
section for your reference.</p>
</div>
<div class="paragraph">
<div class="title">Perl string length</div>
<p>To find the number of characters in a string, you use the <code>length()</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">This is a string</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">length</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050">#17</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Changing cases of string</div>
<p>To change the cases of a string you use a pair of functions <code>lc()</code> and <code>uc()</code>
that returns the lowercase and uppercase versions of a string.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Change cases of a string</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">To upper case:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">uc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">To lower case:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">lc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Search for a substring inside a string</div>
<p>To search for a substring inside a string, you use <code>index()</code> and <code>rindex()</code>
functions.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>index()</code> function searches for a substring inside a string from a
specified position and returns the position of the first occurrence of the
substring in the searched string. If the position is omitted, it searches
from the beginning of the string.</p>
</li>
<li>
<p>The <code>rindex()</code> function works like the <code>index()</code> function except it searches
from the end of the string instead of from the beginning.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following example demonstrates how to use the <code>index()</code> and <code>rindex()</code>
functions:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Learning Perl is easy</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$sub</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Perl</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$p</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">index</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">$sub</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># rindex($s,$sub);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">qq\The substring &#34;$sub&#34; found at position &#34;$p&#34; in string &#34;$s&#34;\</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Get or modify substring inside a string</div>
<p>To extract a substring out of a string, you use the <code>substr()</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #505050"># extract substring</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Green is my favorite color</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #151515;background-color: #ac4142"> </span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">substr</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">);</span><span style="color: #151515;background-color: #ac4142">     </span> <span style="color: #505050"># Green</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$end</span><span style="color: #151515;background-color: #ac4142">   </span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">substr</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">-</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">);</span><span style="color: #151515;background-color: #ac4142">       </span> <span style="color: #505050"># color</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$end</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #90a959">:</span><span style="color: #d0d0d0">&#34;,</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #505050"># replace substring</span>
<span style="color: #d0d0d0;background-color: #151515">substr</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Red</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050">#Red is my favorite color</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Other useful Perl string functions</div>
<p>The following table illustrates other useful Perl string functions with their
descriptions:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Function</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>chr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Return ASCII or UNICODE character of a number</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>crypt</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Encrypts passwords in one way fashion</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>hex</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Converts a hexadecimal string to the corresponding value</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>index</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Searches for a substring inside a string returns position where the first occurrence of the substring found</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>lc</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns a lowercase version of the string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>length</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the number of characters of a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>oct</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Converts a string to an octal number</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ord</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the numeric value of the first character of a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>q/string/</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates single-quoted strings</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>qq/string/</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates double-quoted strings</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reverse</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reverses a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>rindex</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Searches for a substring from right to left</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>sprintf</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Formats string to be used with print()</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>substr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Gets or modifies a substring in a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>uc</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the uppercase version of the string</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_operator">5. Perl Operator</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl operators including numeric operators, string operators, and logical operators.</p>
</div>
<div class="sect2">
<h3 id="_numeric_operators">5.1. Numeric operators</h3>
<div class="paragraph">
<p>Perl provides numeric operators to help you operate on numbers including
arithmetic, Boolean and bitwise operations. Let’s examine the different kinds
of operators in more detail.</p>
</div>
<div class="paragraph">
<div class="title">Arithmetic operators</div>
<p>Perl arithmetic operators deal with basic math such as adding, subtracting,
multiplying, diving, etc. To add (<code>+</code>) or subtract (<code>-</code>) numbers, you would do
something as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 30</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">20</span> <span style="color: #d0d0d0">-</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 10</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To multiply or divide numbers, you use divide (<code>/</code>) and multiply (<code>*</code>) operators as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 200</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">20</span> <span style="color: #d0d0d0">/</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 2</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When you combine adding, subtracting, multiplying, and dividing operators
together, Perl will perform the calculation in an order, which is known as
operator precedence.</p>
</div>
<div class="paragraph">
<p>The multiply and divide operators have higher precedence than add and subtract
operators, therefore, Perl performs multiplying and dividing before adding and
subtracting. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">/</span><span style="color: #90a959">2</span> <span style="color: #d0d0d0">-</span> <span style="color: #90a959">5</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span> <span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 10</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl performs 20/2 and 5*2 first, therefore you will get 10 + 10 – 10 = 10.</p>
</div>
<div class="paragraph">
<p>You can use brackets <code>()</code> to force Perl to perform calculations based on the
precedence you want as shown in the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #d0d0d0">(((</span><span style="color: #90a959">10</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">/</span> <span style="color: #90a959">2</span> <span style="color: #d0d0d0">-</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># 20;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To raise one number to the power of another number, you use the exponentiation
operator.</p>
</div>
<div class="listingblock">
<div class="title">Exponentiation operators:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">**</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># = 2 * 2 * 2 = 8.</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">3</span><span style="color: #d0d0d0">**</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># = 3 * 3 * 3 * 3 = 81.</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To get the remainder of the division of one number by another, you use the modulo operator (<code>%</code>).</p>
</div>
<div class="paragraph">
<p>It is handy to use the modulo operator (<code>%</code>) to check if a number is odd or even
by dividing it by 2 to get the remainder. If the remainder is zero, the number
is even, otherwise, the number is odd. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">4</span> <span style="color: #d0d0d0">%</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 0 even</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">5</span> <span style="color: #d0d0d0">%</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 1 odd</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Bitwise Operators</div>
<p>Bitwise operators allow you to operate on numbers one bit at a time. Think of a
number as a series of bits e.g., <code>125</code> can be represented in binary form as
<code>1111101</code>. Perl provides all basic bitwise operators including and (<code>&amp;</code>), or
(<code>|</code>), exclusive or (<code>^</code>) , not (<code>~</code>) operators, shift right (<code>&gt;&gt;</code>), and shift
left (<code>&lt;&lt;</code>) operators.</p>
</div>
<div class="paragraph">
<p>The bitwise operators perform from right to left. In other words, bitwise
operators perform from the rightmost bit to the leftmost bit.</p>
</div>
<div class="listingblock">
<div class="title">Bitwise operations</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0b0101</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 5</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0b0011</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 3</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&amp;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0001 or 1</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">|</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0111 or 7</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">^</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0110 or 6</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">~</span><span style="color: #d0d0d0;background-color: #151515">$a</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 11111111111111111111111111111010 (64bits computer) or 4294967290</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&gt;&gt;</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0101 shift right 1 bit, 010 or 2</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0101 shift left 1 bit, 1010 or 10</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 1. Comparison operators for numbers</caption>
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Equality</th>
<th class="tableblock halign-left valign-top">Operators</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>==</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Not Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>!=</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Comparison</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;⇒</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&gt;</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>⇐</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&gt;=</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>All the operators in the table above are obvious except the number comparison
operator <code>&lt;⇒</code> which is also known as spaceship operator.</p>
</div>
<div class="paragraph">
<p>The number comparison operator is often used in sorting numbers. See the code
below:</p>
</div>
$a &lt;=&gt; $b
<div class="ulist">
<ul>
<li>
<p><strong>1</strong> if <code>$a</code> is greater than <code>$b</code></p>
</li>
<li>
<p><strong>0</strong> if <code>$a</code> and <code>$b</code> are equal</p>
</li>
<li>
<p><strong>-1</strong> if <code>$a</code> is lower than <code>$b</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_string_operators">5.2. String operators</h3>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 2. Comparison operators</caption>
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Equality</th>
<th class="tableblock halign-left valign-top">Operators</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>eq</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Not Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ne</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Comparison</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>cmp</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>lt</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>gt</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>le</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ge</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<div class="title">Concatenation operators</div>
<p>Perl provides the concatenation (<code>.</code>) and repetition (<code>x</code>) operators that allow
you to manipulate strings</p>
</div>
<div class="listingblock">
<div class="title">Concatenation operator (<code>.</code>)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">This is</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959"> concatenation operator</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Repetition operators (<code>x</code>)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a message </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">x</span> <span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">The chomp() operator</div>
<p>The <code>chomp()</code> operator (or function) removes the last character in a string and
returns a number of characters that were removed. The <code>chomp()</code> operator is
very useful when dealing with the user’s input because it helps you remove the
new line character \n from the string that the user entered.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The <code>&lt;STDIN&gt;</code> is used to get input from users.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_logical_operators">5.3. Logical operators</h3>
<div class="paragraph">
<p>Logical operators are often used in control statements such as
<a href="doc/09-perl-if-statement.html#_Perl_if_Statement">if</a>,
<a href="doc/13-perl-while-loop.html#_Perl_while_Loop">while</a>,
<a href="doc/11-perl-given.html#_Perl_given">given</a>,
etc., to control the flow of the program. The following are logical operators in Perl:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>$a &amp;&amp; $b</code> performs the logic <code>AND</code> of two variables or expressions. The
logical <code>&amp;&amp;</code> operator checks if both variables or expressions are true.</p>
</li>
<li>
<p><code>$a || $b</code> performs the logic <code>OR</code> of two variables or expressions. The
logical <code>||</code> operator checks whether a variable or expression is true.</p>
</li>
<li>
<p><code>!$a</code> performs the logic <code>NOT</code> of the variable or expression. The logic <code>!</code>
operator inverts the value of the following variable or expression. In the
other words, it converts <code>true</code> to <code>false</code> or <code>false</code> to <code>true</code>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_list">6. Perl List</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl list and how to manipulate list elements using various techniques such as
list slicing, ranging and qw() function.</p>
</div>
<div class="paragraph">
<p>A Perl list is a sequence of
<a href="doc/02-perl-variables.html#_perl_variables">scalar</a>
values. You use parenthesis and comma operators to construct a list. Each value
is the list is called list element. List elements are indexed and ordered. You
can refer to each element by its position.</p>
</div>
<div class="sect2">
<h3 id="_simple_perl_list">6.1. Simple Perl list</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">();</span>
<span style="color: #d0d0d0">(</span><span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">30</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">this</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">is</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #90a959">list</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">In the example above:</div>
<ul>
<li>
<p>The first list <code>()</code> is an empty list.</p>
</li>
<li>
<p>The second list <code>(10,20,30)</code> is a list of integers.</p>
</li>
<li>
<p>The third list <code>(&#34;this&#34;, &#34;is&#34;, &#34;a&#34;,&#34;list&#34;)</code> is a list of strings.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Each element in the list is separated by a comma <code>(,)</code>. The print` operator is
a list operator. So let’s display our lists above with the <code>print</code> operator to
see how it works:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(());</span> <span style="color: #505050"># display nothing</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">30</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># display 102030</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">this</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">is</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #90a959">list</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># display: thisisalist</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We passed several lists to the <code>print</code> operator to display their elements. All
the lists that we have seen so far contain an element with the same data type.
These lists are called simple lists.</p>
</div>
</div>
<div class="sect2">
<h3 id="_complex_perl_list">6.2. Complex Perl list</h3>
<div class="paragraph">
<p>A Perl list may contain elements that have different data types. This kind of
list is called a complex list. Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a string</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">complex list</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_qw_function">6.3. Using qw function</h3>
<div class="paragraph">
<p>Perl provides the <code>qw()</code> function that allows you to get a list by extracting
words out of a string using the space as a delimiter. The <code>qw</code> stands for quote
word. The two lists below are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;,&#39;</span><span style="color: #90a959">green</span><span style="color: #d0d0d0">&#39;,&#39;</span><span style="color: #90a959">blue</span><span style="color: #d0d0d0">&#39;);</span> <span style="color: #505050"># redgreenblue</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">qw(red green blue)</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># redgreenblue</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Similar to the <code>q/</code> and <code>q//</code> operators, you can use any non-alphanumeric
character as a delimiter. The following lists are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #90a959">qw\this is a list\</span><span style="color: #d0d0d0">;</span>
<span style="color: #90a959">qw{this is a list}</span><span style="color: #d0d0d0">;</span>
<span style="color: #90a959">qw[this is a list]</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_flattening_list">6.4. Flattening list</h3>
<div class="paragraph">
<p>If you put a list, called an internal list, inside another list, Perl
automatically flattens the internal list. The following lists are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">(</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,(</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">))</span>
<span style="color: #d0d0d0">(</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">((</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">),</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_list_element">6.5. Accessing list element</h3>
<div class="paragraph">
<p>You can access elements of a list by using the zero-based index. To access the
n<sup>th</sup> element, you put (n – 1) index inside square brackets.</p>
</div>
<div class="listingblock">
<div class="title">Let’s take a look at the following example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span>
     <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">)[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">]</span> <span style="color: #505050"># 1 first element</span>
<span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># new line</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span>
     <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">)[</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">]</span> <span style="color: #505050"># 3 third element</span>
<span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># new line</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To get multiple elements of a list at a time, you can put a list inside square
brackets. This feature is called list slice. You can omit the parenthesis of
the list inside the square bracket.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">)[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">]</span> <span style="color: #505050"># (1,3,4)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The above code returns a list of three elements <code>(1, 3, 4)</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ranges">6.6. Ranges</h3>
<div class="paragraph">
<p>Perl allows you to build a list based on a range of numbers or characters e.g.,
a list of numbers from 1 to 100, a list of characters from a to z. The
following example defines two lists:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">100</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">a</span><span style="color: #d0d0d0">..</span><span style="color: #d0d0d0;background-color: #151515">z</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_array">7. Array</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl array and how to use arrays effectively in your program and techniques to
manipulate array’s elements.</p>
</div>
<div class="paragraph">
<p>A
<a href="doc/02-perl-variables.html#_perl_list">list</a>
is immutable so you cannot change it directly. In order to change a
list, you need to store it in an array
<a href="doc/02-perl-variables.html#_perl_variables">variable</a>.</p>
</div>
<div class="paragraph">
<p>By definition, an array is a variable that provides dynamic storage for a list.</p>
</div>
<div class="paragraph">
<p>In Perl, the terms array and
<a href="doc/02-perl-variables.html#_perl_list">list</a>
are used interchangeably, but you have to
note an important difference: a list is immutable whereas an array is mutable.
In other words, you can modify the array’s elements, grow or shrink the array,
but not a list.</p>
</div>
<div class="paragraph">
<p>A
<a href="doc/02-perl-variables.html#_perl_variables">scalar variable</a>
begins with the dollar sign (<code>$</code>), however, an array variable begins with an
at-sign (<code>@</code>).</p>
</div>
<div class="listingblock">
<div class="title">How to declare an array variable</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@days</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>$</code> sign looks like <code>S</code> in the word scalar. And <code>@</code> looks like <code>a</code> in the
word array, which is a simple trick to remember what type of variables you are
working with.</p>
</div>
<div class="sect2">
<h3 id="_accessing_perl_array_elements">7.1. Accessing Perl array elements</h3>
<div class="paragraph">
<p>Like a list, you can access array elements using square brackets <code>[]</code> and indices.</p>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$days</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">]);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If you take a look at the code carefully, you will see that we used <code>$days[0]</code>
instead of <code>@days[0]</code>.</p>
</div>
<div class="paragraph">
<p>This is because an array element is a scalar, you have to use the scalar prefix
(<code>$</code>). In Perl, the rule is that the prefix represents what you want to get,
not what you’ve got.</p>
</div>
<div class="paragraph">
<p>Perl also allows you to access array elements using negative indices. Perl
returns an element referred to by a negative index from the end of the array.
For example, <code>$days[-1]</code> returns the last element of the array <code>@days</code>.</p>
</div>
<div class="paragraph">
<p>You can access multiple array elements at a time using the same technique as
the list slice.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@weekend</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">[</span><span style="color: #d0d0d0">-</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">..-</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">];</span> <span style="color: #505050"># SatSun</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #151515;background-color: #ac4142">“</span><span style="color: #d0d0d0;background-color: #151515">@weekend</span><span style="color: #151515;background-color: #ac4142">”</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_counting_perl_array_elements">7.2. Counting Perl array elements</h3>
<div class="paragraph">
<p>If you treat an array as a scalar, you will get the number of elements in the
array.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$count</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This code causes an error in case you don’t really want to count it but
accidentally assign an array to a scalar. To be safe, use the <code>scalar()</code>
function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$count</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">scalar</span> <span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$count</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The operator <code>$#</code> returns the highest index of an array.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$last</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$#days</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$last</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050">#&#34; 6</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_modifying_perl_array_elements">7.3. Modifying Perl array elements</h3>
<div class="paragraph">
<p>To change the value of an element, you access the element using the index and
assign it a new value. Perl also allows you to change the values of multiple
elements at a time.</p>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0;background-color: #151515">$days</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Monday</span><span style="color: #d0d0d0">&#39;;</span>

<span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Tuesday Wednesday Thursday Friday Saturday Sunday)</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@days</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_array_operations">7.4. Perl array operations</h3>
<div class="paragraph">
<p>Perl provides several useful functions and operators to help you manipulate
arrays effectively. We will cover the most important ones in the following
sections.</p>
</div>
<div class="paragraph">
<div class="title">Perl array as a stack with push() and pop() functions</div>
<p>Both functions treat an array as a stack. A stack works based on the last in
first out (LIFO) philosophy. It works exactly the same as a stack of books. The
<code>push()</code> function appends one or more elements to the end of the array, while
the <code>pop()</code> function removes the last element from the end of the array.</p>
</div>
<div class="listingblock">
<div class="title">How to use <code>push()</code> and <code>pop()</code> functions</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@stack</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">();</span> <span style="color: #505050"># empty array</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">push 1 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">push 2 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">push 3 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #151515;background-color: #ac4142">“</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #151515;background-color: #ac4142">”</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Perl array as a queue with <code>unshift()</code> and <code>pop()</code> functions</div>
<p>If the <code>push()</code> and pop()` treat an array as a stack, the <code>unshift()</code> and
<code>pop()</code> functions treat an array as a queue. A queue works based on the first
in first out (FIFO) philosophy. It works like a queue of visitors. The
<code>unshift()</code> function adds one or more elements to the front of the array, while
the <code>pop()</code> function removes the last element of the array.</p>
</div>
<div class="listingblock">
<div class="title">How to use <code>unshift()</code> and <code>pop()</code> functions</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@queue</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">();</span> <span style="color: #505050"># empty queue</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">enqueue 1 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">unshift</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">enqueue 2 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">unshift</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">);</span>

<span style="color: #d0d0d0;background-color: #151515">printf</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">enqueue 3 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">unshift</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@queue</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># 3 2 1</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Sorting Perl arrays</div>
<p>Perl provides the <code>sort()</code> function that allows you to sort an array in
alphabetical or numerical order.</p>
</div>
<div class="listingblock">
<div class="title">Sorting an array of strings alphabetically</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@fruits</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(oranges apples mango cucumber)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@sorted</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">sort</span> <span style="color: #d0d0d0;background-color: #151515">@fruits</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@sorted</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># apples cucumber mango oranges</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>sort()</code> function also accepts a block of code that allows you to change
the sort algorithm. If you want to sort an array in numerical order, you need
to change the default sorting algorithm.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(3 2 1 4 7 6)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">unsorted: </span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">@a</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># unsorted: 3 2 1 4 7 6</span>
<span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">sort</span> <span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">}</span> <span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">sorted:</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">@a</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># sorted: 1 2 3 4 6 7</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">In the example above:</div>
<ul>
<li>
<p>First, we had an unsorted array <code>@a</code>, and we displayed the <code>@a</code> array to make
sure that it is unsorted.</p>
</li>
<li>
<p>Second, we used the <code>sort()</code> function to sort the <code>@a</code> array. We passed a
block of code <code>{$a &lt;⇒$b}</code> and the <code>@a</code> array to the sort function. The <code>$a</code>
and <code>$b</code> are global variables defined by the <code>sort()</code> function for sorting.
The operator <code>&lt;⇒</code> is used to compare two numbers. The code block <code>{$a &lt;⇒
$b}</code> returns -1 if <code>$a</code> &lt; <code>$b</code>, 0 if <code>$a</code> = <code>$b</code>, and 1 if <code>$a</code> &gt; <code>$b</code>.</p>
</li>
<li>
<p>Third, we displayed the elements of the sorted array @a.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For more information on the <code>sort()</code> function, check out the
Perl sort function
<a href="doc/02-perl-variables.html#_perl_sort">Perl sort function</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hash">8. Hash</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Another compound data type called Perl hash and how to manipulate hash elements
effectively.</p>
</div>
<div class="paragraph">
<p>A Perl hash is defined by key-value pairs. Perl stores elements of a hash in
such an optimal way that you can look up its values based on keys very fast.</p>
</div>
<div class="paragraph">
<p>With the array, you use indices to access its elements. However, you must use
descriptive keys to access hash element. A hash is sometimes referred to as an
associative array.</p>
</div>
<div class="paragraph">
<p>Like a scalar or an array variable, a hash variable has its own prefix. A hash
variable must begin with a percent sign (<code>%</code>). The prefix <code>%</code> looks like
key/value pair so remember this trick to name the hash variables.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">%data</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">John Paul</span><span style="color: #d0d0d0">&#39;,</span> <span style="color: #90a959">45</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Lisa</span><span style="color: #d0d0d0">&#39;,</span> <span style="color: #90a959">30</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Kumar</span><span style="color: #d0d0d0">&#39;,</span> <span style="color: #90a959">40</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl provides the <code>⇒</code> operator as an alternative to a comma (<code>,</code>). It helps
differentiate between keys and values and makes the code more elegant.</p>
</div>
<div class="paragraph">
<p>When you see the <code>⇒</code> operator, you know that you are dealing with a hash, not
a list or an array.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%countries</span> <span style="color: #d0d0d0">=</span>  <span style="color: #d0d0d0">(</span> <span style="color: #90a959">England</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">English</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">France</span>  <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">French</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">Spain</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Spanish</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">China</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Chinese</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">Germany</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">German</span><span style="color: #d0d0d0">&#39;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl requires the keys of a hash to be strings, meanwhile, the values can be
any scalars. If you use non-string values as the keys, you may get an
unexpected result.</p>
</div>
<div class="paragraph">
<p>In addition, a hash key must be unique. If you try to add a new key-value pair
with the key that already exists, <strong>the value of the existing key will be
over-written</strong>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>You can omit the quotation in the keys of the hash.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="_hash_operations">8.1. Hash Operations</h3>
<div class="paragraph">
<p>The most commonly used operation in the hash.</p>
</div>
<div class="paragraph">
<div class="title">Look up Perl hash values</div>
<p>Use a hash key inside curly brackets <code>{}</code> to look up a hash value.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #505050"># defines country =&gt; language hash</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%langs</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span> <span style="color: #90a959">England</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">English</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">France</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">French</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Spain</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Spanish</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">China</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Chinese</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Germany</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">German</span><span style="color: #d0d0d0">&#39;);</span>
<span style="color: #505050"># get language of England</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$lang</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">England</span><span style="color: #d0d0d0">&#39;};</span> <span style="color: #505050"># English</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$lang</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Add new element</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">Italy</span><span style="color: #d0d0d0">&#39;}</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Italian</span><span style="color: #d0d0d0">&#39;;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Remove a single key/value pair</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">delete</span> <span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">China</span><span style="color: #d0d0d0">&#39;};</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Modify hash elements</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050"># add new key value pair</span>
<span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">India</span><span style="color: #d0d0d0">&#39;}</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Many languages</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #505050"># modify official language of India</span>
<span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">India</span><span style="color: #d0d0d0">&#39;}</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Hindi</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #505050">#</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Loop over Perl hash elements</div>
<p>Perl provides the <code>keys()</code> function that allows you to get a list of keys in
scalars. You can use the <code>keys()</code> function in a <code>for</code> loop statement to iterate
the hash elements:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #505050"># defines country =&gt; language hash</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%langs</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span> <span style="color: #90a959">England</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">English</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">France</span>  <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">French</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Spain</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Spanish</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">China</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Chinese</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Germany</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">German</span><span style="color: #d0d0d0">&#39;);</span>

<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">keys</span> <span style="color: #d0d0d0;background-color: #151515">%langs</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Official Language of </span><span style="color: #8f5536">$_</span><span style="color: #90a959"> is </span><span style="color: #8f5536">$langs</span><span style="color: #90a959">{</span><span style="color: #8f5536">$_</span><span style="color: #90a959">}</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>keys()</code> function returns a list of hash keys. The <code>for</code> loop visits each
key and assigns it to a special variable <code>$<em></em></code><em>. Inside the loop, we access the
value of a hash element via its key as <code>$langs{$</code></em><code>}</code>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_if_statement">9. <strong><em>if</em></strong> Statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl <code>if</code> statement allows you to control the execution of your code based on
conditions. The simplest form of the <code>if</code> statement is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In this form, you can put the <code>if</code> statement after another statement. Let’s
take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Welcome to Perl if tutorial</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span> <span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The message is only displayed if the expression <code>$a == 1</code> evaluates to <code>true</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">How Perl defines <strong><em>true</em></strong> and <strong><em>false</em></strong>?</div>
<div class="ulist">
<ul>
<li>
<p>Both number 0 and string “0” are <code>false</code>.</p>
</li>
<li>
<p>The <code>undefined</code> value is <code>false</code>.</p>
</li>
<li>
<p>The empty list <code>()</code> is <code>false</code>.</p>
</li>
<li>
<p>The empty string <code>&#34;&#34;</code> is <code>false</code>.</p>
</li>
<li>
<p>Everything else is <code>true</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="title">Execute multiple statements based on a condition</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
   <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span>
   <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span>
   <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The curly braces <code>{}</code> are required even if you have a single statement to
execute</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<div class="title"><strong><em>if..else</em></strong> Statement</div>
<p>Perl provides the <code>if else</code> statement that allows you to execute a code block
if the expression evaluates to <code>true</code>, otherwise, the code block inside the
<code>else</code> branch will execute.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
   <span style="color: #75b5aa">//</span> <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
   <span style="color: #75b5aa">//</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">==</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a and b are equal</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a and b are not equal</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The code block in the else branch will execute because $a and $b are not equal.</p>
</div>
<div class="paragraph">
<div class="title"><strong><em>if..elsif</em></strong> statement</div>
<p>In some cases, you want to test more than one condition:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>If <code>$a</code> and <code>$b</code> are equal, then do this.</p>
</li>
<li>
<p>If <code>$a</code> is greater than <code>$b</code> then do that.</p>
</li>
<li>
<p>Otherwise, do something else.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>Perl provides the if elsif statement for checking multiple conditions and
executing the corresponding code block:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression2</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression3</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_a_simple_program">10. A Simple Program</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We are going to apply what we have learned so far to create a simple program
called currency converter.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>We will use a hash to store the exchange rates.</p>
</li>
<li>
<p>To get the inputs from users via the command line, we will use <code>&lt;STDIN&gt;</code>. We
use the <code>chomp()</code> function to remove the newline character (\n) from the
user’s inputs.</p>
</li>
<li>
<p>We convert the amount from local currency to foreign currency if the
currencies are supported.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$l_amount</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$f_amount</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%rates</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span>
     <span style="color: #90a959">USD</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">YPY</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">82.25</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">EUR</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">0.78</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">GBP</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">0.62</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">CNY</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">6.23</span>
<span style="color: #d0d0d0">);</span>

<span style="color: #505050"># print supported currencies</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Supported currency:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">keys</span> <span style="color: #d0d0d0;background-color: #151515">%rates</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">uc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$_</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #505050"># get inputs from users:</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Enter local currency:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$l_curr</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Enter foreign currency:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$f_curr</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Enter amount:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$l_amount</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">$l_amount</span><span style="color: #d0d0d0">);</span>

<span style="color: #505050"># check user&#39;s inputs.</span>
<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">not</span> <span style="color: #d0d0d0;background-color: #151515">exists</span> <span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">})</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Local currency is not supported</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">not</span> <span style="color: #d0d0d0;background-color: #151515">exists</span> <span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">})</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Foreign currency is not supported</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #505050"># convert from local currency to foreign currency</span>
     <span style="color: #d0d0d0;background-color: #151515">$f_amount</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">}</span> <span style="color: #d0d0d0">/</span> <span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">})</span> <span style="color: #d0d0d0">*</span> <span style="color: #d0d0d0;background-color: #151515">$l_amount</span><span style="color: #d0d0d0">;</span>

     <span style="color: #505050"># print out the result</span>
     <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$l_amount</span><span style="color: #90a959"> </span><span style="color: #8f5536">$l_curr</span><span style="color: #90a959"> = </span><span style="color: #8f5536">$f_amount</span><span style="color: #90a959"> </span><span style="color: #8f5536">$f_curr</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unless_statement">11. <strong><em>unless</em></strong> Statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before discussing the unless statement, let’s revisit Perl’s philosophy:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>There is more than one way to do it.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Perl always provides you with an alternative way to achieve what you need to do.
In programming, you often hear something like this:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If it’s not true, then do this (use <code>if</code> not statement).</p>
</li>
<li>
<p>or unless it’s true, then do this (use <code>unless</code> statement).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The effect is the same but the philosophy is different. That’s why Perl
invented the <code>unless</code> statement to increase the readability of code when you
use it properly.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>the Perl <code>unless</code> statement is equivalent to the <code>if not</code> statement</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="title"><strong><em>unless</em></strong> statement</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">statement</span> <span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl executes the statement from right to left, if the condition is <code>false</code>,
Perl executes the statement that precedes the <code>unless</code>. If the condition is
<code>true</code>, Perl skips the statement.</p>
</div>
<div class="paragraph">
<p>If you have more than one statement to execute, you can use the following form
of the Perl unless statement:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If the <code>condition</code> evaluates to <code>false</code>, Perl executes the code block,
otherwise, it skips the code block.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">unless</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">){</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is greater than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>unless..else</em></strong> statement</div>
<p>Sometimes you want to say unless the condition is <code>true</code>, then do this,
otherwise do that.</p>
</div>
<div class="paragraph">
<p>This is where the <code>unless…​else</code> statement comes into play. See the following
<code>unless else</code> statement:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">unless</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If the condition is <code>false</code>, Perl will execute the <code>unless</code> code block,
otherwise, Perl will execute the <code>else</code> code block.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&gt;=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is less than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is greater than or equal 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>a is greater than or equal 0</pre>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>unless..elsif..else</em></strong> statement</div>
<p>If you have more than one condition for checking with the <code>unless</code> statement,
you can use the <code>unless elsif else</code> statement as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition_1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">unless</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition_2</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You can have many <code>elsif</code> clauses in the <code>unless elsif</code> statement.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is less than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is greater than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title"><strong><em>unless</em></strong> statement guidelines</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>You should use the <code>unless</code> statement with a simple condition to improve the
code readability, especially when used as a postfix after another statement
like the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">unless used with a very simple condition ONLY.</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span> <span style="color: #aa759f">unless</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>You should avoid using the <code>unless</code> statement when the condition is complex and
requires <code>else</code> and/or <code>elsif</code> clauses.</p>
</div>
<div class="paragraph">
<p>If you take a look at the following code, it is difficult to interpret the
meaning of the condition.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;</span> <span style="color: #90a959">0</span> <span style="color: #d0d0d0">&amp;&amp;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">&amp;&amp;</span> <span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">unless used with a very complex condition</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_given_statement">12. <strong><em>given</em></strong> Statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl <code>given</code> statement, is similar to the switch case statement in other
languages.</p>
</div>
<div class="paragraph">
<p>The <code>given</code> statement works like a series of if statements that allow you to
match an expression or variable against different values, depending on the
matched value, Perl will execute statements in the corresponding <code>when</code> clause.</p>
</div>
<div class="paragraph">
<div class="title">Pragma for using given statement</div>
<p>Perl introduced the <code>given</code> statement since version 5.10. In order to use the
Perl <code>given</code> statement, you must use the following pragma:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">v5</span><span style="color: #90a959">.10</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Or use the following pragma:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">feature</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">switch</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Perl <strong><em>given</em></strong> Syntax</div>
<p>There are several new keywords introduced along with the <code>given</code> such as:
<code>when</code>, <code>break</code> and <code>continue</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0">}</span>
     <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0">}</span>
     <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0">}</span>
     <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title"><strong><em>given</em></strong> statement in greater detail</div>
<div class="ulist">
<ul>
<li>
<p>Both given and <code>when</code> accept arguments in a scalar context.</p>
</li>
<li>
<p>The type of argument you pass to the <code>given</code> clause determines the kind of
pattern matching that Perl will use to perform matching. If the argument
appears to be a <code>Boolean</code> expression, Perl evaluates it directly. Otherwise,
Perl will use the smart match operator to evaluate the argument, something
like <code>$_ ~~ expr</code></p>
</li>
<li>
<p>To break out a <code>when</code> block, you use the <code>break</code> statement. Perl uses <code>break</code>
statement implicitly for all <code>when</code> blocks so you don’t have to explicitly
specify it.</p>
</li>
<li>
<p>To fall through from one case to the next, you use the <code>continue</code> statement.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="ulist">
<ul>
<li>
<p>From version 5.12 you can use <code>when</code> as a statement modifier.</p>
</li>
<li>
<p>From version 5.14, the <code>given</code> statement returns the last evaluated
expression if no condition is <code>true</code> or the last evaluated expression of the
<code>default</code> clause. The <code>given</code> statement also returns an empty list when the
break statement is encountered or no condition is matched.</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<div class="title"><strong><em>given</em></strong> statement examples</div>
<p>The following program asks the user to input an RGB (red, green, blue) color and returns its color code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">v5</span><span style="color: #90a959">.10</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># at least for Perl 5.10</span>
<span style="color: #505050">#use feature &#34;switch&#34;;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$code</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Please enter a RGB color to get its code:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">uc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">);</span>

<span style="color: #d0d0d0;background-color: #151515">given</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">){</span>
    <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">RED</span><span style="color: #d0d0d0">&#39;)</span> <span style="color: #d0d0d0">{</span>  <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#FF0000</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">GREEN</span><span style="color: #d0d0d0">&#39;)</span> <span style="color: #d0d0d0">{</span>  <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#00FF00</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">BLUE</span><span style="color: #d0d0d0">&#39;)</span> <span style="color: #d0d0d0">{</span>  <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#0000FF</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;&#39;;</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span>
<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">ne</span> <span style="color: #d0d0d0">&#39;&#39;)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">code of </span><span style="color: #8f5536">$color</span><span style="color: #90a959"> is </span><span style="color: #8f5536">$code</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$color</span><span style="color: #90a959"> is not RGB color</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">How program works</div>
<div class="ulist">
<ul>
<li>
<p>First, we declared the <code>pragma use v5.10;</code> in order to use the <code>given</code>
statement.</p>
</li>
<li>
<p>Second, we asked the user for a color, we removed the newline by using the
<code>chomp()</code> function and made the input color upper case so that whatever
format of color the user entered is accepted e.g., Red, rEd or RED is the red
color.</p>
</li>
<li>
<p>Third, we used the <code>given</code> statement to check. If no color is found, then we
set the color code to blank in the default clause. Based on the user’s input,
we got the corresponding color code and display it.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>From Perl version 5.12, you can use the <code>when</code> statement as a statement
modifier like the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#FF0000</span><span style="color: #d0d0d0">&#39;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">RED</span><span style="color: #d0d0d0">&#39;;</span>
    <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#00FF00</span><span style="color: #d0d0d0">&#39;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">GREEN</span><span style="color: #d0d0d0">&#39;;</span>
    <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#0000FF</span><span style="color: #d0d0d0">&#39;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">BLUE</span><span style="color: #d0d0d0">&#39;;</span>
    <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;&#39;;</span> <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In addition, the given statement returns a value that is the result of the last
expression.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #aa759f">do</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">#FF0000</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">RED</span><span style="color: #d0d0d0">&#39;;</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">#00FF00</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">GREEN</span><span style="color: #d0d0d0">&#39;;</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">#0000FF</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">BLUE</span><span style="color: #d0d0d0">&#39;;</span>
        <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0">&#39;&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>More complex example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">v5</span><span style="color: #90a959">.12</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Enter something: </span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span> <span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$input</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;&gt;</span> <span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span> <span style="color: #aa759f">do</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$input</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The input has numbers</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span>  <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #75b5aa">/\d/</span><span style="color: #d0d0d0">;</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The input has letters</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span>  <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #75b5aa">/[a-zA-Z]/</span><span style="color: #d0d0d0">;</span>
        <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The input has neither number nor letter</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">How the program works</div>
<div class="ulist">
<ul>
<li>
<p>The program asks the user to enter anything that can be numbers, letters, or
both.</p>
</li>
<li>
<p>In the <code>when</code> clause, we used a very special expression that is known as a
regular expression. The <code>/\d/</code> matches any string that contains only numbers,
The <code>/[a-zA-Z]/</code> expression matches the string that contains only letters. In
this case, the <code>given</code> statement can do more advanced matches.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_for_loop">13. <strong><em>for</em></strong> Loop</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl for loop statement to loop over elements of a list.</p>
</div>
<div class="paragraph">
<div class="title"><strong><em>for</em></strong> and <strong><em>foreach</em></strong> statements</div>
<p>The Perl <code>for</code> loop statement allows you to loop over elements of a list. In
each iteration, you can process each element of the list separately. This is
why the <code>for</code> loop statement is sometimes referred to as <code>foreach</code> loop.</p>
</div>
<div class="paragraph">
<p>In Perl, the <code>for</code> and <code>foreach</code> loop are interchangeable, therefore, you can
use the <code>foreach</code> keyword in where you use the <code>for</code> keyword.</p>
</div>
<div class="listingblock">
<div class="title">Loop over elements of an array</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$_</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, we defined an array of 9 integers <code>@a</code></p>
</li>
<li>
<p>Second, we used <code>for</code> loop statement to loop over elements of the <code>@a</code> array.</p>
</li>
<li>
<p>Third, inside the loop, we displayed element’s value using default variable
<code>$_</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you replace the <code>for</code> keyword by the <code>foreach</code> keyword in the above example,
it works the same.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">foreach</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$_</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>for</em></strong> loop iterator</div>
<p>If we don’t supply an explicit iterator to the loop, Perl will use a special
variable called default variable with the name <code>$_</code> as the iterator. In each
iteration, Perl assigns each element of the array <code>@a</code> to the default variable
<code>$_</code>.</p>
</div>
<div class="paragraph">
<div class="title">Explicit Perl for loop iterator</div>
<p>If you want to specify an explicit iterator for the loop, you can declare it in
the <code>for</code> loop statement as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$i</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>$i</code> is the iterator of the <code>for</code> loop in this example. In each iteration, Perl
assigns the corresponding element of the array to the <code>$i</code> iterator. Notice
that the <code>$i</code> variable exists only during the execution of the loop.</p>
</div>
<div class="paragraph">
<p>If you declare an iterator before entering the loop, Perl will restore its
original value after the loop is terminated. Take a look at the following
example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">for</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$i</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">iterator $i is </span><span style="color: #d0d0d0">&#39;,&#34;</span><span style="color: #8f5536">$i</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># 20</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, we declared variable <code>$i</code> before the loop and initialized its value to
<code>20</code>.</p>
</li>
<li>
<p>Second, we used a variable <code>$i</code> as the iterator; its value changes in each
iteration of the loop.</p>
</li>
<li>
<p>Third, after the loop, we displayed the value of <code>$i</code>. Perl restored its
original value, which is <code>20</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Perl for loop iterator: value or alias</div>
<p>In each iteration of the loop, Perl creates an alias instead of a value. In
other words, if you make any changes to the iterator, the changes also reflect
in the elements of the array. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@b</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Before the loop: </span><span style="color: #8f5536">@b</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@b</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">$_</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$_</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">After the loop: </span><span style="color: #8f5536">@b</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, we declared an array <code>@b</code> with 5 elements from 1 to 5. We displayed
the array <code>@b</code> elements using <code>print</code> function</p>
</li>
<li>
<p>Second, we iterated elements of the array. We multiplied each element with
<code>2</code> through the iterator <code>$_</code></p>
</li>
<li>
<p>Third, outside of the loop, we displayed the elements of the array again</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">C-style <strong><em>for</em></strong> loop</div>
<p>Perl also supports for loop in C-style. However, it is not a good practice to
use the C-style for loop because to code will become less readable.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">initialization</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">test</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">step</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">There are three control parts:</div>
<ul>
<li>
<p>Initialization. Perl executes the initialization once when the loop is
entered. We often use initialization to initialize a loop counter variable.</p>
</li>
<li>
<p>Test. Perl evaluates the <code>test</code> expression at the beginning of each iteration
and executes the code block inside the loop body as long as the test
expression evaluates to false.</p>
</li>
<li>
<p>Step. Perl executes <code>step</code> at the end of each iteration. You often use the
step to modify the loop counter.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">C-style for loop:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">&lt;=</span> <span style="color: #d0d0d0;background-color: #151515">$#c</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">$i</span><span style="color: #d0d0d0">++</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$c</span><span style="color: #90a959">[</span><span style="color: #8f5536">$i</span><span style="color: #90a959">] </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is much more readable if you Perl’s for loop style</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@c</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$_</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_while_loop_statement">14. <strong><em>while</em></strong> loop statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl <code>while</code> loop statement executes a code block repeatedly as long as the
test condition remains <code>true</code>. The test condition is checked at the beginning
of each iteration.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">while</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #505050"># code block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If the <code>condition</code> evaluates to <code>true</code>, the code block inside <code>while</code> loop
executes.</p>
</div>
<div class="paragraph">
<p>At the beginning of each iteration, the <code>condition</code> is reevaluated. The loop is
terminated if the <code>condition</code> evaluates to <code>false</code>.</p>
</div>
<div class="paragraph">
<p>At some point in the loop, you have to change some variables that make the
condition <code>false</code> to stop the loop. Otherwise, you will have an indefinite loop
that makes your program execute until the stack overflow error occurs.</p>
</div>
<div class="paragraph">
<p>The <code>while</code> loop statement has an optional block: <code>continue</code>, which executes
after each current iteration. In practice, the <code>continue</code> block is rarely used.</p>
</div>
<div class="paragraph">
<p>If you want to execute a code block as long as the condition is <code>false</code>, you
can use <code>until</code> statement.</p>
</div>
<div class="paragraph">
<p>In case you want to check the condition at the end of each iteration, you use
the <code>do…​while</code> or <code>do…​until</code> statement instead.</p>
</div>
<div class="paragraph">
<p>To control the loop, you use the <code>next</code> and <code>last</code> statements.</p>
</div>
<div class="paragraph">
<div class="title">Example</div>
<p>Happy New Year Count Down program</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/env perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">while</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$counter</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
    <span style="color: #d0d0d0;background-color: #151515">$counter</span><span style="color: #d0d0d0">--</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># count down</span>
    <span style="color: #d0d0d0;background-color: #151515">sleep</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span>   <span style="color: #505050"># pause program for 1 second</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Happy New Year!</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Let’s examine the code above in more detail</div>
<div class="ulist">
<ul>
<li>
<p>First, declare a <code>$counter</code> variable and set its value to <code>10</code>.</p>
</li>
<li>
<p>Next, put a condition to make sure that the value of <code>$counter</code> is greater
than zero before entering into the loop.</p>
</li>
<li>
<p>Then, displayed the <code>$counter</code> and decreased its current value of one. We
used the <code>sleep()</code> function to pause the program for a second in each
iteration.</p>
</li>
<li>
<p>After that, use the <em>if statement</em> to check if <code>$counter</code> is zero to print
the “Happy New Year” message. The code block inside the loop executes 10
times before the <code>$counter</code> is set to zero.</p>
</li>
<li>
<p>Finally, after each iteration, the <code>$counter</code> decreases, and its value is set
to zero at the 10th iteration. Perl terminated the loop.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>while loop</em></strong> with diamond operator <strong><code>&lt;&gt;</code></strong></div>
<p>You often use the while loop statement with the diamond operator <code>&lt;&gt;</code> to get
the user’s input from the command line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$num</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@numbers</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">();</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Enter numbers, each per line :</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">ctrl-z (windows) or ctrl-d(Linux) to exit</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&gt;</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #aa759f">while</span><span style="color: #d0d0d0">(</span><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$input</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;&gt;</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">&gt;</span><span style="color: #d0d0d0">&#34;);</span>
    <span style="color: #d0d0d0;background-color: #151515">chomp</span> <span style="color: #d0d0d0;background-color: #151515">$input</span><span style="color: #d0d0d0">;</span>
    <span style="color: #d0d0d0;background-color: #151515">$num</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">int</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$input</span><span style="color: #d0d0d0">);</span>
    <span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@numbers</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$num</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">You entered: </span><span style="color: #8f5536">@numbers</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, assign the user’s input to the <code>$input</code> variable using the diamond
operator (<code>&lt;&gt;</code>). Because it doesn’t specify any filehandle for the diamond
operator, Perl checks the special array <code>@ARGV</code>, which is empty in this case,
hence instructs the diamond operator to read from <code>STDIN</code> i.e., from the
keyboard.</p>
</li>
<li>
<p>Second, remove the newline character from the <code>$input</code> variable using the
<code>chomp()</code> function and convert <code>$input</code> to an integer.</p>
</li>
<li>
<p>Third, add the integer into the <code>@number</code> array.</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title"><strong><em>while loop</em></strong> statement modifier</div>
<p>let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$i</span><span style="color: #d0d0d0">--</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span> <span style="color: #aa759f">while</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>while</code> loop statement is placed after another statement.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><strong>Perl evaluates the statements from right to left</strong>.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>It means that Perl evaluates the condition in the <code>while</code> statement at the
beginning of each iteration.</p>
</div>
<div class="paragraph">
<p>You use the <code>while</code> loop statement modifier only if you have one statement to
execute repeatedly based on a condition like the above example.</p>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
