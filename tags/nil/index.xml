<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
	<title>Hossein Esmail</title>
	<link>localhost/tags/nil/</link>
	<description>Recent content in nil on Hossein Esmail</description>
	<generator>Hugo -- gohugo.io</generator>
	<language>en-us</language>
	<lastBuildDate>Fri, 18 Aug 2023 05:17:00 +0330</lastBuildDate>
    
        <atom:link href="localhost/tags/nil/index.xml" rel="self" type="application/rss+xml" />
	
	
	<item>
		<title>New</title>
		<link>localhost/blog/new/</link>
		<pubDate>Mon, 04 Sep 2023 00:51:13 +0330</pubDate>
		
		<guid>localhost/blog/new/</guid>
		<description>&lt;h2 id=&#34;this-is-a-test&#34;&gt;This is a test!&lt;/h2&gt;
&lt;p&gt;we are here to see, watch and preserve.&lt;/p&gt;
&lt;h2 id=&#34;more-test&#34;&gt;More test&lt;/h2&gt;
&lt;h3 id=&#34;and-more&#34;&gt;And more&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8ec07c;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#fabd2f&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fabd2f&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello world!&lt;/span&gt;&lt;span style=&#34;color:#b8bb26&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	<item>
		<title>Lua</title>
		<link>localhost/blog/programming/script/lua/page/</link>
		<pubDate>Fri, 18 Aug 2023 05:17:00 +0330</pubDate>
		
		<guid>localhost/blog/programming/script/lua/page/</guid>
		<description>&lt;h2 id=&#34;syntax-----&#34;&gt;Syntax &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Invoking the interpreter with a Lua file name parameter begins execution of the
file and continues until the script is finished. When the script is finished,
the interpreter is no longer active.&lt;/p&gt;
&lt;p&gt;Let us write a simple Lua program. All Lua files will have extension &lt;code&gt;.lua&lt;/code&gt;.
So put the following source code in a &lt;code&gt;test.lua&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;print(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assuming, lua environment is setup correctly, letâ€™s run the program using the
following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lua test.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try another way to execute a Lua program. Below is the modified
&lt;code&gt;test.lua&lt;/code&gt; file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#!/usr/bin/env lua5.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;print(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, try to run this program as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chmod +x test.lua
$ ./test.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lua also provides a mode called interactive mode. In this mode, you can type in
instructions one after the other and get instant results. This can be invoked
in the shell by using the &lt;code&gt;lua -i&lt;/code&gt; or just the &lt;code&gt;lua&lt;/code&gt; command. Once you type in
this, press Enter and the interactive mode will be started as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can print something using the following statement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;print(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
&amp;gt; print(&amp;quot;test&amp;quot;)
test
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tokens-in-lua&#34;&gt;Tokens in Lua&lt;/h3&gt;
&lt;p&gt;A Lua program consists of various tokens and a token is either a keyword, an
identifier, a constant, a string literal, or a symbol. For example, the
following Lua statement consists of three tokens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;io.write(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello world, from &amp;#34;&lt;/span&gt;, _VERSION, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;!&lt;/span&gt;&lt;span style=&#34;color:#b8bb26&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello world, from Lua 5.4!
file (0x7fb1521ef5a0)
&lt;/code&gt;&lt;/pre&gt;
&lt;!--}}}--&gt;
</description>
	</item>
	
	<item>
		<title>Go</title>
		<link>localhost/blog/programming/compile/go/page/</link>
		<pubDate>Fri, 18 Aug 2023 05:16:45 +0330</pubDate>
		
		<guid>localhost/blog/programming/compile/go/page/</guid>
		<description>&lt;h1 id=&#34;go&#34;&gt;Go&lt;/h1&gt;
&lt;h2 id=&#34;syntax-----&#34;&gt;Syntax &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;A Go file consists of the following parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Package declaration&lt;/li&gt;
&lt;li&gt;Import packages&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Statements and expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;  fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;comments-----&#34;&gt;Comments &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Go supports single-line or multi-line comments.&lt;/p&gt;
&lt;h3 id=&#34;single-line-comments&#34;&gt;Single-line Comments&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// This is a comment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;multi-line-comments&#34;&gt;Multi-line Comments&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt; * This is a Multi-line comment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;variables-----&#34;&gt;Variables &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; - stores integers (whole numbers), such as 123 or -123&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float32&lt;/code&gt; - stores floating point numbers, with decimals, such as 19.99 or -19.99&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; - stores text, such as &amp;ldquo;Hello World&amp;rdquo;. String values are surrounded
by double quotes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; - stores values with two states: true or false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;declaring-variables&#34;&gt;Declaring variables&lt;/h3&gt;
&lt;p&gt;In Go, there are two ways to declare a variable:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;With the &lt;code&gt;var&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; variablename &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt; = value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You always have to specify either &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt; (or both).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the &lt;code&gt;:=&lt;/code&gt; sign:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;variablename &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In this case, the type of the variable is &lt;strong&gt;inferred&lt;/strong&gt; from the
value (means that the compiler decides the type of the variable, based on
the value).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It is not possible to declare a variable using &lt;code&gt;:=&lt;/code&gt; without
assigning a value to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;variable-declaration-with-initial-value&#34;&gt;Variable Declaration With Initial Value&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; student1 &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;//type is string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; student2 = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Jane&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;//type is inferred
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;x &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;//type is inferred
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The variable types of &lt;code&gt;student2&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; is &lt;strong&gt;inferred&lt;/strong&gt; from their
values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;variable-declaration-without-initial-value&#34;&gt;Variable Declaration Without Initial Value&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; b &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; c &lt;span style=&#34;color:#fabd2f&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(c)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By running the code, we can see that they already have the default values of
their respective types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; is &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;value-assignment-after-declaration&#34;&gt;Value Assignment After Declaration&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; student1 &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	student1 = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(student1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;difference-between-var-and-&#34;&gt;Difference Between var and :=&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;code&gt;:=&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Can be used &lt;strong&gt;inside&lt;/strong&gt; and &lt;strong&gt;outside&lt;/strong&gt; of functions&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Can only be used &lt;strong&gt;inside&lt;/strong&gt; functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Variable declaration and value assignment &lt;strong&gt;can be done separately&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Variable declaration and value assignment &lt;strong&gt;cannot be done separately&lt;/strong&gt; (must be done in the same line)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;multiple-variable-declaration&#34;&gt;Multiple Variable Declaration&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a, b, c, d &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you use the &lt;code&gt;type&lt;/code&gt; keyword, it is only possible to declare
&lt;strong&gt;one type&lt;/strong&gt; of variable per line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the &lt;code&gt;type&lt;/code&gt; keyword is not specified, you can declare different types of
variables in the same line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a, b = &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;c, d &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;World!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;variable-declaration-in-a-block&#34;&gt;Variable Declaration in a Block&lt;/h4&gt;
&lt;p&gt;Multiple variable declarations can also be grouped together into a block for
greater readability:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	a &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	b &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	c &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;variable-naming-rules&#34;&gt;Variable Naming Rules&lt;/h3&gt;
&lt;p&gt;Go variable naming rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A variable name must start with a letter or an underscore character (&lt;code&gt;_&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;A variable name cannot start with a digit&lt;/li&gt;
&lt;li&gt;A variable name can only contain alpha-numeric characters and underscores
(&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, and &lt;code&gt;_&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Variable names are case-sensitive (age, Age and AGE are three different variables)&lt;/li&gt;
&lt;li&gt;There is no limit on the length of the variable name&lt;/li&gt;
&lt;li&gt;A variable name cannot contain spaces&lt;/li&gt;
&lt;li&gt;The variable name cannot be any Go keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;!--}}}--&gt;
&lt;h2 id=&#34;constants-----&#34;&gt;Constants &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;If a variable should have a fixed value that cannot be changed, you can use the
&lt;code&gt;const&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;const&lt;/span&gt; CONSTNAME &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt; = value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The value of a constant must be assigned when you declare it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;const&lt;/span&gt; PI = &lt;span style=&#34;color:#d3869b&#34;&gt;3.14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;constant-rules&#34;&gt;Constant Rules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Constant names follow the same naming rules as variables&lt;/li&gt;
&lt;li&gt;Constant names are usually written in uppercase letters (for easy
identification and differentiation from variables)&lt;/li&gt;
&lt;li&gt;Constants can be declared both inside and outside of a function&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constant-types&#34;&gt;Constant Types&lt;/h3&gt;
&lt;p&gt;There are two types of constants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typed constants&lt;/li&gt;
&lt;li&gt;Untyped constants&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multiple-constants-declaration&#34;&gt;Multiple Constants Declaration&lt;/h3&gt;
&lt;p&gt;Multiple constants can be grouped together into a block for readability:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;const&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	A &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	B = &lt;span style=&#34;color:#d3869b&#34;&gt;3.14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	C = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hi!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;output-----&#34;&gt;Output &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;h3 id=&#34;output-functions-----&#34;&gt;Output Functions &lt;!--{{{--&gt;&lt;/h3&gt;
&lt;p&gt;Go has three functions to output text:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Print()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Println()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Printf()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-print-function&#34;&gt;The Print() Function&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Print()&lt;/code&gt; function prints its arguments with their default format.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If we want to print the arguments in new lines, we need to use &lt;code&gt;\n&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; i,j &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Print&lt;/span&gt;(i, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Print&lt;/span&gt;(j, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Print()&lt;/code&gt; inserts a space between the arguments if &lt;strong&gt;neither&lt;/strong&gt; are strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-println-function&#34;&gt;The Println() Function&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Println()&lt;/code&gt; function is similar to &lt;code&gt;Print()&lt;/code&gt; with the difference that a
whitespace is added between the arguments, and a newline is added at the end:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; i,j &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(i, j)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;the-printf-function&#34;&gt;The Printf() Function&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;Printf()&lt;/code&gt; function first formats its argument based on the given
formatting verb and then prints them.&lt;/p&gt;
&lt;p&gt;Here we will use two formatting verbs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%v&lt;/code&gt; is used to print the &lt;strong&gt;value&lt;/strong&gt; of the arguments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%T&lt;/code&gt; is used to print the &lt;strong&gt;type&lt;/strong&gt; of the arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; j &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;15&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;i has value: %v and type: %T\n&amp;#34;&lt;/span&gt;, i, i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;j has value: %v and type: %T&amp;#34;&lt;/span&gt;, j, j)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h3 id=&#34;formatting-verbs-----&#34;&gt;Formatting Verbs &lt;!--{{{--&gt;&lt;/h3&gt;
&lt;p&gt;Go offers several formatting verbs that can be used with the &lt;code&gt;Printf()&lt;/code&gt; function.&lt;/p&gt;
&lt;h4 id=&#34;general-formatting-verbs&#34;&gt;General Formatting Verbs&lt;/h4&gt;
&lt;p&gt;The following verbs can be used with all data types:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Verb&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%v&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value in the default format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%#v&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value in Go-syntax format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the type of the value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%%&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the % sign&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;integer-formatting-verbs&#34;&gt;Integer Formatting Verbs&lt;/h4&gt;
&lt;p&gt;The following verbs can be used with the integer data type:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Verb&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%b&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%+d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 10 and always show sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%o&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%O&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 8, with leading 0o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%x&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 16, lowercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%X&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 16, uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%#x&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Base 16, with leading 0x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%4d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pad with spaces (width 4, right justified)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%-4d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pad with spaces (width 4, left justified)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%04d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pad with zeroes (width 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;string-formatting-verbs&#34;&gt;String Formatting Verbs&lt;/h4&gt;
&lt;p&gt;The following verbs can be used with the string data type:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Verb&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value as plain string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%q&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value as a double-quoted string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%8s&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value as plain string (width 8, right justified)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%-8s&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value as plain string (width 8, left justified)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%x&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value as hex dump of byte values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;% x&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints the value as hex dump with spaces&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;boolean-formatting-verbs&#34;&gt;Boolean Formatting Verbs&lt;/h4&gt;
&lt;p&gt;The following verb can be used with the boolean data type:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Verb&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Value of the boolean operator in true or false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;format (same as using &lt;code&gt;%v&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;float-formatting-verbs&#34;&gt;Float Formatting Verbs&lt;/h4&gt;
&lt;p&gt;The following verbs can be used with the float data type:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Verb&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Scientific notation with &amp;rsquo;e&amp;rsquo; as exponent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Decimal point, no exponent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%.2f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Default width, precision 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%6.2f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Width 6, precision 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%g&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Exponent as needed, only necessary digits&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--}}}--&gt;
&lt;!--}}}--&gt;
&lt;h2 id=&#34;data-types-----&#34;&gt;Data Types &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Data type is an important concept in programming. Data type specifies the size
and type of variable values.&lt;/p&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;p&gt;Go is statically typed, meaning that once a variable type is defined, it can
only store data of that type. It has three basic data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bool&lt;/strong&gt;: represents a boolean value and is either true or false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Numeric&lt;/strong&gt;: represents integer types, floating point values, and complex types&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;string&lt;/strong&gt;: represents a string value&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#fabd2f&#34;&gt;bool&lt;/span&gt; = &lt;span style=&#34;color:#fe8019&#34;&gt;true&lt;/span&gt;	 &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Boolean
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; b &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;		 &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Integer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; c &lt;span style=&#34;color:#fabd2f&#34;&gt;float32&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;3.14&lt;/span&gt;  &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Floating point number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; d &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hi!&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// String
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;boolean&#34;&gt;Boolean&lt;/h3&gt;
&lt;p&gt;A boolean data type is declared with the &lt;code&gt;bool&lt;/code&gt; keyword and can only take the
values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The default value of a boolean data type is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; b1 &lt;span style=&#34;color:#fabd2f&#34;&gt;bool&lt;/span&gt; = &lt;span style=&#34;color:#fe8019&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// typed declaration with initial value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; b2 = &lt;span style=&#34;color:#fe8019&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// untyped declaration with initial value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; b3 &lt;span style=&#34;color:#fabd2f&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// typed declaration without initial value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;b4 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// untyped declaration with initial value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Boolean values are mostly used for conditional testing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;integer&#34;&gt;Integer&lt;/h3&gt;
&lt;p&gt;Integer data types are used to store a whole number without decimals, like 35,
-50, or 1345000.&lt;/p&gt;
&lt;p&gt;The integer data type has two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Signed integers&lt;/strong&gt; - can store both positive and negative values&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unsigned integers&lt;/strong&gt; - can only store non-negative values&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: The default type for integer is &lt;strong&gt;int&lt;/strong&gt;. If you do not specify a type,
the type will be &lt;strong&gt;int&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;signed-integers&#34;&gt;Signed Integers&lt;/h4&gt;
&lt;p&gt;Signed integers, declared with one of the &lt;code&gt;int&lt;/code&gt; keywords, can store both
positive and negative values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; y &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; = &lt;span style=&#34;color:#fe8019&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;4500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go has five keywords/types of signed integers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Depends on platform: 32 bits in 32 bit systems and 64 bit in 64 bit systems&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-2147483648 to 2147483647 in 32 bit systems and -9223372036854775808 to 9223372036854775807 in 64 bit systems&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;int8&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8 bits/1 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-128 to 127&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;int16&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16 bits/2 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-32768 to 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;32 bits/4 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-2147483648 to 2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64 bits/8 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-9223372036854775808 to 9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;unsigned-integers&#34;&gt;Unsigned Integers&lt;/h4&gt;
&lt;p&gt;Unsigned integers, declared with one of the &lt;code&gt;uint&lt;/code&gt; keywords, can only store
non-negative values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; x &lt;span style=&#34;color:#fabd2f&#34;&gt;uint&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; y &lt;span style=&#34;color:#fabd2f&#34;&gt;uint&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;4500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go has five keywords/types of signed integers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;uint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Depends on platform: 32 bits in 32 bit systems and 64 bit in 64 bit systems&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 4294967295 in 32 bit systems and 0 to 18446744073709551615 in 64 bit systems&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;uint8&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8 bits/1 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;uint16&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16 bits/2 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 65535&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;uint32&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;32 bits/4 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 4294967295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;uint64&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64 bits/8 byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 18446744073709551615&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;float&#34;&gt;Float&lt;/h3&gt;
&lt;p&gt;The float data types are used to store positive and negative numbers with a
decimal point, like 35.3, -2.34, or 3597.34987.&lt;/p&gt;
&lt;p&gt;The float data type has two keywords:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;float32&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;32 bits&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-3.4e+38 to 3.4e+38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;float64&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64 bits&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1.7e+308 to +1.7e+308&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: The default type for float is &lt;code&gt;float64&lt;/code&gt;. If you do not specify a type,
the type will be &lt;code&gt;float64&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;the-float32-keyword&#34;&gt;The float32 Keyword&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; x &lt;span style=&#34;color:#fabd2f&#34;&gt;float32&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;123.78&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; y &lt;span style=&#34;color:#fabd2f&#34;&gt;float32&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;3.4e+38&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;the-float64-keyword&#34;&gt;The float64 Keyword&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;float64&lt;/code&gt; data type can store a larger set of numbers than &lt;code&gt;float32&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; x &lt;span style=&#34;color:#fabd2f&#34;&gt;float64&lt;/span&gt; = &lt;span style=&#34;color:#d3869b&#34;&gt;1.7e+308&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;string&lt;/code&gt; data type is used to store a sequence of characters (text). String
values must be surrounded by double quotes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; txt1 &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; txt2 &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;txt3 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;World 1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;arrays-----&#34;&gt;Arrays &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Arrays are used to store multiple values of the same type in a single variable,
instead of declaring separate variables for each value.&lt;/p&gt;
&lt;h3 id=&#34;declare-an-array&#34;&gt;Declare an Array&lt;/h3&gt;
&lt;p&gt;In Go, there are two ways to declare an array:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;With the &lt;code&gt;var&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; array_name = [length]datatype{values} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// length is defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; array_name = [&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;]datatype{values} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// length is inferred
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the &lt;code&gt;:=&lt;/code&gt; sign:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;array_name &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [length]datatype{values} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// length is defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;array_name &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;]datatype{values} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// length is inferred
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The length specifies the number of elements to store in the array.
In Go, arrays have a fixed length. The length of the array is either defined
by a number or is inferred (means that the compiler decides the length of the
array, based on the number of values).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; arr1 = [&lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; arr1 = [&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;arr2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;8&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;arr2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;8&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;access-elements-of-an-array&#34;&gt;Access Elements of an Array&lt;/h3&gt;
&lt;p&gt;You can access a specific array element by referring to the index number.&lt;/p&gt;
&lt;p&gt;In Go, array indexes start at 0. That means that [0] is the first element, [1]
is the second element, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;prices &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;30&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(prices[&lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(prices[&lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;change-elements-of-an-array&#34;&gt;Change Elements of an Array&lt;/h3&gt;
&lt;p&gt;You can also change the value of a specific array element by referring to the
index number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;prices &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;30&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;prices[&lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#d3869b&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;array-initialization&#34;&gt;Array Initialization&lt;/h3&gt;
&lt;p&gt;If an array or one of its elements has not been initialized in the code, it is
assigned the default value of its type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: The default value for int is &lt;code&gt;0&lt;/code&gt; and the default value for string is
&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;arr1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// not initialized
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;arr2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// partially initialized
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;arr3 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// fully initialized
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;initialize-only-specific-elements&#34;&gt;Initialize Only Specific Elements&lt;/h3&gt;
&lt;p&gt;It is possible to initialize only specific elements in an array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;arr1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#d3869b&#34;&gt;40&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The array above has 5 elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1:10&lt;/code&gt; means: assign &lt;code&gt;10&lt;/code&gt; to array index &lt;code&gt;1&lt;/code&gt; (second element).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2:40&lt;/code&gt; means: assign &lt;code&gt;40&lt;/code&gt; to array index &lt;code&gt;2&lt;/code&gt; (third element).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;find-the-length-of-an-array&#34;&gt;Find the Length of an Array&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;len()&lt;/code&gt; function is used to find the length of an array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;arr1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Volvo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;BMW&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mazda&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;arr2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(arr1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(arr2))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;slices-----&#34;&gt;Slices &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Slices are similar to arrays, but are more powerful and flexible.&lt;/p&gt;
&lt;p&gt;Like arrays, slices are also used to store multiple values of the same type in
a single variable.&lt;/p&gt;
&lt;p&gt;However, unlike arrays, the length of a slice can grow and shrink as you see
fit.&lt;/p&gt;
&lt;h3 id=&#34;create-a-slice&#34;&gt;Create a Slice&lt;/h3&gt;
&lt;p&gt;In Go, there are several ways to create a slice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the &lt;code&gt;[]datatype{values}&lt;/code&gt; format&lt;/li&gt;
&lt;li&gt;Create a slice from an array&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;make()&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;datatypevalues&#34;&gt;[]datatype{values}&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;slice_name &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []datatype{values}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A common way of declaring a slice is like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;myslice &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code above declares an empty slice of 0 length and 0 capacity.&lt;/p&gt;
&lt;p&gt;To initialize the slice during declaration, use this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;myslice &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code above declares a slice of integers of length 3 and also the capacity
of 3.&lt;/p&gt;
&lt;p&gt;In Go, there are two functions that can be used to return the length and
capacity of a slice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;len()&lt;/code&gt; function&lt;/strong&gt; - returns the length of the slice (the number of
elements in the slice)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;cap()&lt;/code&gt; function&lt;/strong&gt; - returns the capacity of the slice (the number of
elements the slice can grow or shrink to)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	myslice1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(myslice1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	myslice2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Slices&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Are&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Powerful&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(myslice2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0
0
[]
4
4
[Go Slices Are Powerful]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, we see that in the first slice (myslice1), the actual
elements are not specified, so both the length and capacity of the slice will
be zero. In the second slice (myslice2), the elements are specified, and both
length and capacity is equal to the number of actual elements specified.&lt;/p&gt;
&lt;h4 id=&#34;create-a-slice-from-an-array&#34;&gt;Create a Slice From an Array&lt;/h4&gt;
&lt;p&gt;You can create a slice by slicing an array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; myarray = [length]datatype{values} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// An array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;myslice &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; myarray[start:end] &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// A slice made from the array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;arr1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#d3869b&#34;&gt;15&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;myslice &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; arr1[&lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice = %v\n&amp;#34;&lt;/span&gt;, myslice)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myslice = [12 13]
length = 2
capacity = 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above &lt;code&gt;myslice&lt;/code&gt; is a slice with length 2. It is made from &lt;code&gt;arr1&lt;/code&gt;
which is an array with length 6.&lt;/p&gt;
&lt;p&gt;The slice starts from the second element of the array which has value 12. The
slice can grow to the end of the array. This means that the capacity of the
slice is 4.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;myslice&lt;/code&gt; started from element 0, the slice capacity would be 6.&lt;/p&gt;
&lt;h4 id=&#34;create-a-slice-with-the-make-function&#34;&gt;Create a Slice With The make() Function&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;make()&lt;/code&gt; function can also be used to create a slice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;slice_name &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt;, length, capacity)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the capacity parameter is not defined, it will be equal to &lt;em&gt;length&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	myslice1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice1 = %v\n&amp;#34;&lt;/span&gt;, myslice1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// with omitted capacity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;	myslice2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice2 = %v\n&amp;#34;&lt;/span&gt;, myslice2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myslice1 = [0 0 0 0 0]
length = 5
capacity = 10
myslice2 = [0 0 0 0 0]
length = 5
capacity = 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;access-change-append-and-copy-slices&#34;&gt;Access, Change, Append and Copy Slices&lt;/h3&gt;
&lt;h4 id=&#34;access-elements-of-a-slice&#34;&gt;Access Elements of a Slice&lt;/h4&gt;
&lt;p&gt;You can access a specific slice element by referring to the index number.&lt;/p&gt;
&lt;p&gt;In Go, indexes start at 0. That means that [0] is the first element, [1] is the
second element, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;prices &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;30&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(prices[&lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(prices[&lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;change-elements-of-a-slice&#34;&gt;Change Elements of a Slice&lt;/h4&gt;
&lt;p&gt;You can also change a specific slice element by referring to the index number.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;prices &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;30&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;prices[&lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#d3869b&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;append-elements-to-a-slice&#34;&gt;Append Elements To a Slice&lt;/h4&gt;
&lt;p&gt;You can append elements to the end of a slice using the &lt;code&gt;append()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;slice_name = &lt;span style=&#34;color:#fabd2f&#34;&gt;append&lt;/span&gt;(slice_name, element1, element2, &lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;myslice1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice1 = %v\n&amp;#34;&lt;/span&gt;, myslice1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;myslice1 = &lt;span style=&#34;color:#fabd2f&#34;&gt;append&lt;/span&gt;(myslice1, &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;21&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice1 = %v\n&amp;#34;&lt;/span&gt;, myslice1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;append-one-slice-to-another-slice&#34;&gt;Append One Slice To Another Slice&lt;/h4&gt;
&lt;p&gt;To append all the elements of one slice to another slice, use the &lt;code&gt;append()&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;slice3 = &lt;span style=&#34;color:#fabd2f&#34;&gt;append&lt;/span&gt;(slice1, slice2&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &amp;lsquo;&lt;code&gt;...&lt;/code&gt;&amp;rsquo; after &lt;em&gt;slice2&lt;/em&gt; is &lt;strong&gt;necessary&lt;/strong&gt; when appending the
elements of one slice to another.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;myslice1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;myslice2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;myslice3 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;append&lt;/span&gt;(myslice1, myslice2&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;change-the-length-of-a-slice&#34;&gt;Change The Length of a Slice&lt;/h4&gt;
&lt;p&gt;Unlike arrays, it is possible to change the length of a slice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;arr1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;14&lt;/span&gt;} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// An array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;myslice1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; arr1[&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Slice array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice1 = %v\n&amp;#34;&lt;/span&gt;, myslice1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Change length by re-slicing the array */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;myslice1 = arr1[&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice1 = %v\n&amp;#34;&lt;/span&gt;, myslice1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Change length by appending items */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;myslice1 = &lt;span style=&#34;color:#fabd2f&#34;&gt;append&lt;/span&gt;(myslice1, &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;23&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;myslice1 = %v\n&amp;#34;&lt;/span&gt;, myslice1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;16&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;17&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(myslice1))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;memory-efficiency&#34;&gt;Memory Efficiency&lt;/h4&gt;
&lt;p&gt;When using slices, Go loads all the underlying elements into the memory.&lt;/p&gt;
&lt;p&gt;If the array is large and you need only a few elements, it is better to copy
those elements using the &lt;code&gt;copy()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;copy()&lt;/code&gt; function creates a new underlying array with only the required
elements for the slice. This will reduce the memory used for the program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;copy&lt;/span&gt;(dest, src)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;copy()&lt;/code&gt; function takes in two slices dest and src, and copies data from
&lt;em&gt;src&lt;/em&gt; to &lt;em&gt;dest&lt;/em&gt;. It returns the number of elements copied.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;numbers &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;15&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Original slice
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;numbers = %v\n&amp;#34;&lt;/span&gt;, numbers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(numbers))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(numbers))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Create copy with only needed numbers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;neededNumbers &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; numbers[:&lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(numbers)&lt;span style=&#34;color:#fe8019&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;numbersCopy &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(neededNumbers))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;copy&lt;/span&gt;(numbersCopy, neededNumbers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;numbersCopy = %v\n&amp;#34;&lt;/span&gt;, numbersCopy)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;length = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;len&lt;/span&gt;(numbersCopy))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;capacity = %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fabd2f&#34;&gt;cap&lt;/span&gt;(numbersCopy))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;numbers = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
length = 15
capacity = 15
numbersCopy = [1 2 3 4 5]
length = 5
capacity = 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The capacity of the new slice is now less than the capacity of the original
slice because the new underlying array is smaller.&lt;/p&gt;
&lt;!--}}}--&gt;
&lt;h2 id=&#34;operators-----&#34;&gt;Operators &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Operators are used to perform operations on variables and values.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; &lt;strong&gt;operator&lt;/strong&gt; adds together two values, like in the example below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#d3869b&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although the &lt;code&gt;+&lt;/code&gt; operator is often used to add together two values, it can also
be used to add together a variable and a value, or a variable and another
variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	sum1 = &lt;span style=&#34;color:#d3869b&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// 150 (100 + 50)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;	sum2 = sum1 &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;250&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// 400 (150 + 250)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;	sum3 = sum2 &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; sum2 &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// 800 (400 + 400)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go divides the operators into the following groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic operators&lt;/li&gt;
&lt;li&gt;Assignment operators&lt;/li&gt;
&lt;li&gt;Comparison operators&lt;/li&gt;
&lt;li&gt;Logical operators&lt;/li&gt;
&lt;li&gt;Bitwise operators&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arithmetic-operators&#34;&gt;Arithmetic Operators&lt;/h3&gt;
&lt;p&gt;Arithmetic operators are used to perform common mathematical operations.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Addition&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adds together two values&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;x + y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Subtraction&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Subtracts one value from another&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;x - y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Multiplication&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Multiplies two values&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;x * y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Division&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Divides one value by another&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;x / y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Modulus&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns the division remainder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;x % y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;++&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Increment&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Increases the value of a variable by 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;x++&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Decrement&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Decreases the value of a variable by 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;x--&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;assignment-operators&#34;&gt;Assignment Operators&lt;/h3&gt;
&lt;p&gt;Assignment operators are used to assign values to variables.&lt;/p&gt;
&lt;p&gt;In the example below, we use the &lt;strong&gt;assignment&lt;/strong&gt; operator (&lt;code&gt;=&lt;/code&gt;) to assign the
value &lt;strong&gt;10&lt;/strong&gt; to a variable called &lt;strong&gt;x&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; x = &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;addition assignment&lt;/strong&gt; operator (&lt;code&gt;+=&lt;/code&gt;) adds a value to a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; x = &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;x &lt;span style=&#34;color:#fe8019&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A list of all assignment operators:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Same As&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = 5&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;+=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x += 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x + 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x -= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x - 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x *= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x * 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x /= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x / 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x %= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x % 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;amp;= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x &amp;amp; 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;`&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;=`&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;`x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;^=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x ^= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x ^ 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;gt;&amp;gt;= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x &amp;gt;&amp;gt; 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;lt;&amp;lt;= 3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x = x &amp;lt;&amp;lt; 3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;comparison-operators&#34;&gt;Comparison Operators&lt;/h3&gt;
&lt;p&gt;Comparison operators are used to compare two values.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The return value of a comparison is either true (&lt;code&gt;1&lt;/code&gt;) or false
(&lt;code&gt;0&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the following example, we use the &lt;strong&gt;greater than&lt;/strong&gt; operator (&lt;code&gt;&amp;gt;&lt;/code&gt;) to find
out if 5 is greater than 3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; x = &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; y = &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(x &amp;gt; y) &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// returns 1 (true) because 5 is greater than 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A list of all comparison operators:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Equal to&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x == y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Not equal&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x != y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Greater than&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;gt; y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Less than&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;lt; y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Greater than or equal to&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;gt;= y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Less than or equal to&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;lt;= y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;logical-operators&#34;&gt;Logical Operators&lt;/h3&gt;
&lt;p&gt;Logical operators are used to determine the logic between variables or values:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;amp;&amp;amp; &lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Logical &lt;code&gt;and&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if both statements are true&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;lt; 5 &amp;amp;&amp;amp;  x &amp;lt; 10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;`&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;`&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Logical &lt;code&gt;or&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Logical &lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Reverse the result, returns false if the result is true&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;!(x &amp;lt; 5 &amp;amp;&amp;amp; x &amp;lt; 10)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;bitwise-operators&#34;&gt;Bitwise Operators&lt;/h3&gt;
&lt;p&gt;Bitwise operators are used on (binary) numbers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;amp; &lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AND&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets each bit to 1 if both bits are 1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;amp; y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;`&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;`&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OR&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets each bit to 1 if one of two bits is 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt; ^&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;XOR&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets each bit to 1 if only one of two bits is 1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x ^ b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Zero fill left shift&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Shift left by pushing zeros in from the right&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;lt;&amp;lt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Signed right shift&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;gt;&amp;gt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--}}}--&gt;
&lt;h2 id=&#34;conditions-----&#34;&gt;Conditions &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Conditional statements are used to perform different actions based on different
conditions.&lt;/p&gt;
&lt;p&gt;A condition can be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go supports the usual comparison operators from mathematics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Less than &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Less than or equal &lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Greater than &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Greater than or equal &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Equal to &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Not equal to &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, Go supports the usual logical operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logical AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Logical OR  &lt;code&gt;||&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Logical NOT &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use these operators or their combinations to create conditions for
different decisions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x &amp;gt; y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;x != y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;(x &amp;gt; y) &amp;amp;&amp;amp; (y &amp;gt; z)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;`(x == y)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Go has the following conditional statements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; - specify a block of code to be executed, if a specified condition is true&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;else&lt;/code&gt;&lt;/strong&gt; - specify a block of code to be executed, if the same condition is false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;else if&lt;/code&gt;&lt;/strong&gt; - specify a new condition to test, if the first condition is false&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/strong&gt; - specify many alternative blocks of code to be executed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;if-statement&#34;&gt;if Statement&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;if&lt;/code&gt; statement to specify a block of Go code to be executed if a
condition is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; condition {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 * code to be executed if condition is true 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;if&lt;/code&gt; is in lowercase letters. Uppercase letters (If or IF) will
generate an error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#d3869b&#34;&gt;18&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;20 is greater than 18&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;x&lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;y&lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; x &amp;gt; y {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;x is greater than y&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;if-else-statement&#34;&gt;if else Statement&lt;/h3&gt;
&lt;h4 id=&#34;else-statement&#34;&gt;else Statement&lt;/h4&gt;
&lt;p&gt;Use the &lt;code&gt;else&lt;/code&gt; statement to specify a block of code to be executed if the
condition is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; condition {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed if condition is true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed if condition is false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;time &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; (time &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Good day.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Good evening.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The brackets in the &lt;code&gt;else&lt;/code&gt; statement should be like &lt;code&gt;} else {&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; (temperature &amp;gt; &lt;span style=&#34;color:#d3869b&#34;&gt;15&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;It is warm out there.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;} &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* this raises an error */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;It is cold out there.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;else-if-statement&#34;&gt;else if Statement&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;else if&lt;/code&gt; statement to specify a new condition if the first condition
is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; condition1 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 * code to be executed if condition1 is true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; condition2 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 * code to be executed if condition1 is false and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 * condition2 is true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 * code to be executed if condition1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 * and condition2 are both false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;	 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;time &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; time &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Good morning.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; time &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Good day.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Good evening.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If condition1 and condition2 are BOTH true, only the code for
condition1 are executed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;nested-if-statement&#34;&gt;Nested if Statement&lt;/h3&gt;
&lt;p&gt;You can have &lt;code&gt;if&lt;/code&gt; statements inside &lt;code&gt;if&lt;/code&gt; statements, this is called a nested if.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; condition1 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed if condition1 is true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; condition2 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;		 &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;		  * code to be executed if both condition1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;		  * and condition2 are true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;		  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;num &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#fe8019&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;10&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Num is more than 10.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;		&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; num &amp;gt; &lt;span style=&#34;color:#d3869b&#34;&gt;15&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;			fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Num is also more than 15.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;	} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;		fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Num is less than 10.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;switch-statement-----&#34;&gt;switch Statement &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Use the &lt;code&gt;switch&lt;/code&gt; statement to select one of many code blocks to be executed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;switch&lt;/code&gt; statement in Go is similar to the ones in C. The difference is
that it only runs the matched case so it does not need a &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;
&lt;h3 id=&#34;single-case-switch-syntax&#34;&gt;Single-Case switch Syntax&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;switch&lt;/span&gt; expression {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; x:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code block
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; y:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code block
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is how it works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The expression is evaluated once&lt;/li&gt;
&lt;li&gt;The value of the &lt;code&gt;switch&lt;/code&gt; expression is compared with the values of each &lt;code&gt;case&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If there is a match, the associated block of code is executed&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;default&lt;/code&gt; keyword is optional. It specifies some code to run if there is no &lt;code&gt;case&lt;/code&gt; match&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;day &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;switch&lt;/span&gt; day {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;One&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Two&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Three&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;default-keyword&#34;&gt;default Keyword&lt;/h4&gt;
&lt;p&gt;The default keyword specifies some code to run if there is no case match:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;day &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;switch&lt;/span&gt; day {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;One&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Two&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Three&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Not in the [1-3] range&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All the &lt;code&gt;case&lt;/code&gt; values should have the same type as the &lt;code&gt;switch&lt;/code&gt;
expression. Otherwise, the compiler will raise an error&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;multi-case-switch-statement&#34;&gt;Multi-case switch Statement&lt;/h3&gt;
&lt;p&gt;It is possible to have multiple values for each case in the switch statement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;switch&lt;/span&gt; expression {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; x,y:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code block if expression is evaluated to x or y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; v,w:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code block if expression is evaluated to v or w
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; z:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code block if expression is not found in any cases
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;day &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;switch&lt;/span&gt; day {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Odd weekday&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Even weekday&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;7&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Weekend&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Invalid day of day number&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;loops-----&#34;&gt;Loops &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;h3 id=&#34;for-loop&#34;&gt;For Loop&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop loops through a block of code a specified number of times.
And &lt;code&gt;for&lt;/code&gt; loop is the only loop available in Go.&lt;/p&gt;
&lt;p&gt;Loops are handy if you want to run the same code over and over again, each time
with a different value.&lt;/p&gt;
&lt;p&gt;Each execution of a loop is called an &lt;strong&gt;iteration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop can take up to three statements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; statement1; statement2; statement3 {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed for each iteration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;statement1&lt;/strong&gt; - Initializes the loop counter value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;statement2&lt;/strong&gt; - Evaluated for each loop iteration. If it evaluates to TRUE,
the loop continues. If it evaluates to FALSE, the loop ends.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;statement3&lt;/strong&gt; - Increases the loop counter value.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These statements don&amp;rsquo;t need to be present as loops arguments.
However, they need to be present in the code in some form.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;, i &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, i&lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;continue-statement&#34;&gt;continue Statement&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;continue&lt;/code&gt; statement is used to skip one or more iterations in the loop. It
then continues with the next iteration in the loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#fe8019&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;		&lt;span style=&#34;color:#fe8019&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;break-statement&#34;&gt;break Statement&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;break&lt;/code&gt; statement is used to break/terminate the loop execution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;; i&lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#fe8019&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;		&lt;span style=&#34;color:#fe8019&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; are usually used with conditions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;nested-loops&#34;&gt;Nested Loops&lt;/h3&gt;
&lt;p&gt;It is possible to place a loop inside another loop.&lt;/p&gt;
&lt;p&gt;Here, the &amp;ldquo;inner loop&amp;rdquo; will be executed one time for each iteration of the
&amp;ldquo;outer loop&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;, i &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, i&lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; j&lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;, j &amp;lt; &lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, j&lt;span style=&#34;color:#fe8019&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;		fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;%d\t&amp;#34;&lt;/span&gt;,i &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt; j)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;range-keyword&#34;&gt;Range Keyword&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; keyword is used to more easily iterate over an array, slice or map.
It returns both the index and the value.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;range&lt;/code&gt; keyword is used like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; index, value &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; array|slice|&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed for each iteration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;This example uses &lt;code&gt;range&lt;/code&gt; to iterate over an array and print both the indexes
and the values at each (&lt;code&gt;idx&lt;/code&gt; stores the index, &lt;code&gt;val&lt;/code&gt; stores the value):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;fruits &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; idx, val &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;range&lt;/span&gt; fruits {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;%v\t%v\n&amp;#34;&lt;/span&gt;, idx, val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: To only show the value or the index, you can omit the other output
using an underscore (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--}}}--&gt;
&lt;h2 id=&#34;functions-----&#34;&gt;Functions &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;A function is a block of statements that can be used repeatedly in a program.
A function will not execute automatically when a page loads.
A function will be executed by a call to the function.&lt;/p&gt;
&lt;h3 id=&#34;create-a-function&#34;&gt;Create a Function&lt;/h3&gt;
&lt;p&gt;To create (often referred to as declare) a function, do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;func&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;Specify a name for the function, followed by parentheses ().&lt;/li&gt;
&lt;li&gt;Finally, add code that defines what the function should do, inside curly braces {}.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;FunctionName&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;call-a-function&#34;&gt;Call a Function&lt;/h3&gt;
&lt;p&gt;Functions are not executed immediately. They are &amp;ldquo;saved for later use&amp;rdquo;, and
will be executed when they are called.&lt;/p&gt;
&lt;p&gt;In the example below, we create a function named &amp;ldquo;myMessage()&amp;rdquo;. The opening
curly brace ( { ) indicates the beginning of the function code, and the closing
curly brace ( } ) indicates the end of the function. The function outputs &amp;ldquo;I
just got executed!&amp;rdquo;. To call the function, just write its name followed by two
parentheses ():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myMessage&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;I just got executed!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fabd2f&#34;&gt;myMessage&lt;/span&gt;() &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// call the function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;A function can be called multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;naming-rules-for-go-functions&#34;&gt;Naming Rules for Go Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A function name must start with a letter&lt;/li&gt;
&lt;li&gt;A function name can only contain alpha-numeric characters and underscores (&lt;code&gt;A-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, and &lt;code&gt;_&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;Function names are case-sensitive&lt;/li&gt;
&lt;li&gt;A function name cannot contain spaces&lt;/li&gt;
&lt;li&gt;If the function name consists of multiple words, techniques introduced for multi-word variable naming can be used&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Give the function a name that reflects what the function does!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;parameters-and-arguments&#34;&gt;Parameters and Arguments&lt;/h3&gt;
&lt;p&gt;Information can be passed to functions as a parameter. Parameters act as
variables inside the function.&lt;/p&gt;
&lt;p&gt;Parameters and their types are specified after the function name, inside the
parentheses. You can add as many parameters as you want, just separate them
with a comma:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;FunctionName&lt;/span&gt;(param1 &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt;, param2 &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt;, param3 &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;function-with-parameter-example&#34;&gt;Function With Parameter Example&lt;/h4&gt;
&lt;p&gt;The following example has a function with one parameter (&lt;code&gt;fname&lt;/code&gt;) of type
&lt;code&gt;string&lt;/code&gt;. When the familyName() function is called, we also pass along a name
(e.g. Liam), and the name is used inside the function, which outputs several
different first names, but an equal last name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;familyName&lt;/span&gt;(fname &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;, fname, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Refsnes&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fabd2f&#34;&gt;familyName&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Liam&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fabd2f&#34;&gt;familyName&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Jenny&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fabd2f&#34;&gt;familyName&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Anja&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello Liam Refsnes
Hello Jenny Refsnes
Hello Anja Refsnes
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When a &lt;strong&gt;parameter&lt;/strong&gt; is passed to the function, it is called an
&lt;strong&gt;argument&lt;/strong&gt;. So, from the example above: &lt;code&gt;fname&lt;/code&gt; is a &lt;strong&gt;parameter&lt;/strong&gt;, while
&lt;code&gt;Liam&lt;/code&gt;, &lt;code&gt;Jenny&lt;/code&gt; and &lt;code&gt;Anja&lt;/code&gt; are &lt;strong&gt;arguments&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;multiple-parameters&#34;&gt;Multiple Parameters&lt;/h4&gt;
&lt;p&gt;Inside the function, you can add as many parameters as you want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;familyName&lt;/span&gt;(fname &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;, age &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;, age, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year old&amp;#34;&lt;/span&gt;, fname, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Refsnes&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When you are working with multiple parameters, the function call
must have the same number of arguments as there are parameters, and the
arguments must be passed in the same order.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;function-returns&#34;&gt;Function Returns&lt;/h3&gt;
&lt;h4 id=&#34;values&#34;&gt;Values&lt;/h4&gt;
&lt;p&gt;If you want the function to return a value, you need to define the data type of
the return value (such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc), and also use the &lt;code&gt;return&lt;/code&gt;
keyword inside the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;FunctionName&lt;/span&gt;(param1 &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt;, param2 &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt;) &lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// code to be executed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Go, you can name the return values of a function.&lt;/p&gt;
&lt;p&gt;Here, we name the return value as &lt;code&gt;result&lt;/code&gt; (of type &lt;code&gt;int&lt;/code&gt;), and return the
value with a naked return (means that we use the &lt;code&gt;return&lt;/code&gt; statement without
specifying the variable name):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) (result &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	result = x &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example above can also be written like this. Here, the return statement
specifies the variable name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) (result &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	result = x &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;store-the-return-value-in-a-variable&#34;&gt;Store the Return Value in a Variable&lt;/h4&gt;
&lt;p&gt;You can also store the return value in a variable, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) (result &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	result = x &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;	total &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(total)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;multiple-return-values&#34;&gt;Multiple Return Values&lt;/h4&gt;
&lt;p&gt;Go functions can also return multiple values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;) (result &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, txt1 &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	result = x &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	txt1 = y &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34; World!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;9&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we (for some reason) do not want to use some of the returned values, we can
add an underscore (&lt;code&gt;_&lt;/code&gt;) to omit this value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, y &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;) (result &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;, txt1 &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;	result = x &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;	txt1 = y &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34; World!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	 _, b &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;myFunction&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;recursion-functions&#34;&gt;Recursion Functions&lt;/h3&gt;
&lt;p&gt;Go accepts recursion functions. A function is recursive if it calls itself and
reaches a stop condition.&lt;/p&gt;
&lt;p&gt;In the following example, &lt;code&gt;testcount()&lt;/code&gt; is a function that calls itself. We use
the &lt;code&gt;x&lt;/code&gt; variable as the data, which increments with 1 (&lt;code&gt;x + 1&lt;/code&gt;) every time we
recurse. The recursion ends when the &lt;code&gt;x&lt;/code&gt; variable equals to 11 (&lt;code&gt;x == 11&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;testcount&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#fe8019&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;11&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;		&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;testcount&lt;/span&gt;(x &lt;span style=&#34;color:#fe8019&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fabd2f&#34;&gt;testcount&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recursion is a common mathematical and programming concept. This has the
benefit of meaning that you can loop through data to reach a result.&lt;/p&gt;
&lt;p&gt;The developer should be careful with recursion functions as it can be quite
easy to slip into writing a function which never terminates, or one that uses
excess amounts of memory or processor power. However, when written correctly
recursion can be a very efficient and mathematically-elegant approach to
programming.&lt;/p&gt;
&lt;p&gt;In the following example, &lt;code&gt;factorial_recursion()&lt;/code&gt; is a function that calls
itself. We use the &lt;code&gt;x&lt;/code&gt; variable as the data, which decrements (-1) every time
we recurse. The recursion ends when the condition is not greater than 0 (i.e.
when it is 0).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;factorial_recursion&lt;/span&gt;(x &lt;span style=&#34;color:#fabd2f&#34;&gt;float64&lt;/span&gt;) (y &lt;span style=&#34;color:#fabd2f&#34;&gt;float64&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;if&lt;/span&gt; x &amp;gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;		 y = x &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;factorial_recursion&lt;/span&gt;(x&lt;span style=&#34;color:#fe8019&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;	} &lt;span style=&#34;color:#fe8019&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;		 y = &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;factorial_recursion&lt;/span&gt;(&lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To a new developer it can take some time to work out how exactly this works,
best way to find out is by testing and modifying it.&lt;/p&gt;
&lt;!--}}}--&gt;
&lt;h2 id=&#34;struct-----&#34;&gt;Struct &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;A struct (short for structure) is used to create a collection of members of
different data types, into a single variable.&lt;/p&gt;
&lt;p&gt;While arrays are used to store multiple values of the same data type into a
single variable, structs are used to store multiple values of different data
types into a single variable.&lt;/p&gt;
&lt;p&gt;A struct can be useful for grouping data together to create records.&lt;/p&gt;
&lt;h2 id=&#34;declare-a-struct&#34;&gt;Declare a Struct&lt;/h2&gt;
&lt;p&gt;To declare a structure in Go, use the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;struct&lt;/code&gt; keywords:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt; struct_name &lt;span style=&#34;color:#fe8019&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	member1 datatype;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	member2 datatype;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	member3 datatype;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we declare a struct type &lt;code&gt;Person&lt;/code&gt; with the following members: &lt;code&gt;name&lt;/code&gt;,
&lt;code&gt;age&lt;/code&gt;, &lt;code&gt;job&lt;/code&gt; and &lt;code&gt;salary&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt; Person &lt;span style=&#34;color:#fe8019&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	name &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	age &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;	job &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	salary &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Notice that the struct members above have different data types.
&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;job&lt;/code&gt; is of type string, while &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;salary&lt;/code&gt; is of type int.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;access-struct-members&#34;&gt;Access Struct Members&lt;/h3&gt;
&lt;p&gt;To access any member of a structure, use the dot operator (.) between the
structure variable name and the structure member:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt; Person &lt;span style=&#34;color:#fe8019&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;	name &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;	age &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;	job &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	salary &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; pers1 Person
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; pers2 Person
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Pers1 specification */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;	pers1.name = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hege&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;	pers1.age = &lt;span style=&#34;color:#d3869b&#34;&gt;45&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;	pers1.job = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Teacher&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;	pers1.salary = &lt;span style=&#34;color:#d3869b&#34;&gt;6000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;16&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Pers2 specification */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;17&lt;/span&gt;&lt;span&gt;	pers2.name = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Cecilie&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;18&lt;/span&gt;&lt;span&gt;	pers2.age = &lt;span style=&#34;color:#d3869b&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;19&lt;/span&gt;&lt;span&gt;	pers2.job = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Marketing&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;20&lt;/span&gt;&lt;span&gt;	pers2.salary = &lt;span style=&#34;color:#d3869b&#34;&gt;4500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;21&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pass-struct-as-function-arguments&#34;&gt;Pass Struct as Function Arguments&lt;/h3&gt;
&lt;p&gt;You can also pass a structure as a function argument, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;type&lt;/span&gt; Person &lt;span style=&#34;color:#fe8019&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;	name &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;	age &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;	job &lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	salary &lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; pers1 Person
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Pers1 specification */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;	pers1.name = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hege&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;	pers1.age = &lt;span style=&#34;color:#d3869b&#34;&gt;45&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;	pers1.job = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Teacher&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;	pers1.salary = &lt;span style=&#34;color:#d3869b&#34;&gt;6000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Print Pers1 info by calling a function */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;16&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fabd2f&#34;&gt;printPerson&lt;/span&gt;(pers1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;17&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;18&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;19&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;printPerson&lt;/span&gt;(pers Person) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;20&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Name: &amp;#34;&lt;/span&gt;, pers.name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;21&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Age: &amp;#34;&lt;/span&gt;, pers.age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;22&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Job: &amp;#34;&lt;/span&gt;, pers.job)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;23&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Salary: &amp;#34;&lt;/span&gt;, pers.salary)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;24&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;maps-----&#34;&gt;Maps &lt;!--{{{--&gt;&lt;/h2&gt;
&lt;p&gt;Maps are used to store data values in &lt;code&gt;key:value&lt;/code&gt; pairs.
Each element in a map is a &lt;code&gt;key:value&lt;/code&gt; pair.
A map is an unordered and changeable collection that does not allow duplicates.&lt;/p&gt;
&lt;p&gt;The length of a map is the number of its elements. You can find it using the &lt;code&gt;len()&lt;/code&gt; function.
The default value of a map is nil.
Maps hold references to an underlying hash table.&lt;/p&gt;
&lt;p&gt;Go has multiple ways for creating maps.&lt;/p&gt;
&lt;h3 id=&#34;creating-maps-using-var-and-&#34;&gt;Creating Maps Using &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;:=&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[KeyType]ValueType{key1:value1, key2:value2,&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;b &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[KeyType]ValueType{key1:value1, key2:value2,&lt;span style=&#34;color:#fe8019&#34;&gt;...&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;This example shows how to create maps in Go. Notice the order in the code and in the output&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mustang&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;	b &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Oslo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Bergen&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Trondheim&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;a\t%v\n&amp;#34;&lt;/span&gt;, a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;b\t%v\n&amp;#34;&lt;/span&gt;, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a       map[brand:Ford model:Mustang]
b       map[Bergen:2 Oslo:1 Trondheim:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The order of the map elements defined in the code is different from
the way that they are stored. The data are stored in a way to have efficient
data retrieval from the map.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;creating-maps-using-using-make-function&#34;&gt;Creating Maps Using Using &lt;code&gt;make()&lt;/code&gt; Function&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[KeyType]ValueType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;b &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[KeyType]ValueType)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// The map is empty now
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;	a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;	a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mustang&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;	a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1964&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;	b &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;	b[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Oslo&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;	b[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Bergen&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;	b[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Trondheim&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;	b[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Stavanger&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;creating-an-empty-map&#34;&gt;Creating an Empty Map&lt;/h3&gt;
&lt;p&gt;There are two ways to create an empty map. One is by using the &lt;code&gt;make()&lt;/code&gt;
function and the other is by using the following syntax.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[KeyType]ValueType
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;make()&lt;/code&gt; function is the right way to create an empty map. If
you make an empty map in a different way and write to it, it will causes a
runtime panic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;	&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; b &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a &lt;span style=&#34;color:#fe8019&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(b &lt;span style=&#34;color:#fe8019&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;7&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;false
true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;allowed-key-types&#34;&gt;Allowed Key Types&lt;/h3&gt;
&lt;p&gt;The map key can be of any data type for which the equality operator (&lt;code&gt;==&lt;/code&gt;) is defined. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Booleans&lt;/li&gt;
&lt;li&gt;Numbers&lt;/li&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;li&gt;Interfaces (as long as the dynamic type supports equality)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Invalid key types are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slices&lt;/li&gt;
&lt;li&gt;Maps&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These types are invalid because the equality operator (&lt;code&gt;==&lt;/code&gt;) is not defined for them.&lt;/p&gt;
&lt;h3 id=&#34;allowed-value-types&#34;&gt;Allowed Value Types&lt;/h3&gt;
&lt;p&gt;The map values can be &lt;strong&gt;any&lt;/strong&gt; type.&lt;/p&gt;
&lt;h3 id=&#34;accessing-map-elements&#34;&gt;Accessing Map Elements&lt;/h3&gt;
&lt;p&gt;You can access map elements by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;value = map_name[key]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mustang&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1964&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;6&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;updating-and-adding-map-elements&#34;&gt;Updating and Adding Map Elements&lt;/h3&gt;
&lt;p&gt;Updating or adding an elements are done by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;map_name[key] = value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mustang&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1964&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1970&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Updating an element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// Adding an element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;remove-element-from-map&#34;&gt;Remove Element from Map&lt;/h3&gt;
&lt;p&gt;Removing elements is done using the &lt;code&gt;delete()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;delete&lt;/span&gt;(map_name, key)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fabd2f&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mustang&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1964&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;delete&lt;/span&gt;(a,&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;check-for-specific-elements-in-a-map&#34;&gt;Check For Specific Elements in a Map&lt;/h3&gt;
&lt;p&gt;You can check if a certain key exists in a map using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;val, ok &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt;map_name[key]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you only want to check the existence of a certain key, you can use the blank
identifier (&lt;code&gt;_&lt;/code&gt;) in place of val.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;        &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mustang&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;        &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1964&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;day&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Checking for existing key and its value */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;    val1, ok1 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Checking for non-existing key and its value */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;    val2, ok2 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Checking for existing key and its value */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;    val3, ok3 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;day&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;/* Only checking for existing key and not its value */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;    _, ok4 &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; a[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;16&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(val1, ok1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;17&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(val2, ok2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;18&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(val3, ok3)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;19&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(ok4)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;20&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ford true
 false
 true
true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;maps-are-references&#34;&gt;Maps Are References&lt;/h3&gt;
&lt;p&gt;Maps are references to hash tables.&lt;/p&gt;
&lt;p&gt;If two map variables refer to the same hash table, changing the content of one
variable affect the content of the other.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;        &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Ford&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Mustang&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;        &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1964&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;    b &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;12&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;13&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;14&lt;/span&gt;&lt;span&gt;    b[&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;year&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;1970&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;15&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;After change to b:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;16&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;17&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;18&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;(b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;19&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map[brand:Ford model:Mustang year:1964]
map[brand:Ford model:Mustang year:1964]
After change to b:
map[brand:Ford model:Mustang year:1970]
map[brand:Ford model:Mustang year:1970]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;iterating-over-maps&#34;&gt;Iterating Over Maps&lt;/h3&gt;
&lt;p&gt;You can use &lt;code&gt;range&lt;/code&gt; to iterate over maps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the order of the elements in the output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;import&lt;/span&gt; (&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;    a &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;range&lt;/span&gt; a {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;        fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;%v : %v, &amp;#34;&lt;/span&gt;, k, v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;one : 1, two : 2, three : 3, four : 4, 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;iterate-over-maps-in-a-specific-order&#34;&gt;Iterate Over Maps in a Specific Order&lt;/h3&gt;
&lt;p&gt;Maps are unordered data structures. If you need to iterate over a map in a
specific order, you must have a separate data structure that specifies that
order.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 1&lt;/span&gt;&lt;span&gt;a &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d3869b&#34;&gt;4&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;var&lt;/span&gt; b []&lt;span style=&#34;color:#fabd2f&#34;&gt;string&lt;/span&gt;                &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// defining the order
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;b = &lt;span style=&#34;color:#fabd2f&#34;&gt;append&lt;/span&gt;(b, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;four&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 4&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;range&lt;/span&gt; a {        &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// loop with no order
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;%v : %v, &amp;#34;&lt;/span&gt;, k, v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 7&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 8&lt;/span&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt; 9&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#fe8019&#34;&gt;for&lt;/span&gt; _, element &lt;span style=&#34;color:#fe8019&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;range&lt;/span&gt; b {  &lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;// loop with the defined order
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;10&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#928374;font-style:italic&#34;&gt;&lt;/span&gt;    fmt.&lt;span style=&#34;color:#fabd2f&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;%v : %v, &amp;#34;&lt;/span&gt;, element, a[element])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;11&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--}}}--&gt;
&lt;h2 id=&#34;source&#34;&gt;Source&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/go&#34;&gt;w3schools.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Pandoc</title>
		<link>localhost/blog/tools/pandoc/page/</link>
		<pubDate>Fri, 18 Aug 2023 03:24:55 +0330</pubDate>
		
		<guid>localhost/blog/tools/pandoc/page/</guid>
		<description>&lt;h1 id=&#34;use-case&#34;&gt;Use case&lt;/h1&gt;
&lt;p&gt;Markdown is a &lt;strong&gt;universal document converter&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#ebdbb2;background-color:#282828;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8ec07c;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8ec07c&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#fabd2f&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#fabd2f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#fabd2f&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#fe8019&#34;&gt;*&lt;/span&gt;argv[]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;3&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#fabd2f&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#b8bb26&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;4&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#fe8019&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d3869b&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59&#34;&gt;5&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p style=&#34;background: blue;&#34;&gt;
&lt;p&gt;This is a FUCKING test&lt;/p&gt;
&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>YEAH!</title>
		<link>localhost/about/test/</link>
		<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
		
		<guid>localhost/about/test/</guid>
		<description>&lt;h1 id=&#34;what-now&#34;&gt;What now?&lt;/h1&gt;
&lt;h2 id=&#34;this-is-a-very-simple-test&#34;&gt;This is a very simple test!&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ut purus elit,
vestibulum ut, placerat ac, adipiscing vitae, felis. Curabitur dictum gravida
mauris.
Nam arcu libero, nonummy eget, consectetuer id, vulputate a, magna. Donec
vehicula augue eu neque. Pellentesque habitant morbi tristique senectus et
netus et malesuada fames ac turpis egestas. Mauris ut leo. Cras viverra metus
rhoncus sem. Nulla et lectus vestibulum urna fringilla ultrices. Phasellus eu
tellus sit amet tortor gravida placerat. Integer sapien est, iaculis in,
pretium quis, viverra ac, nunc. Praesent eget sem vel leo ultrices bibendum.
Aenean faucibus. Morbi dolor nulla, malesuada eu, pulvinar at, mollis ac,
nulla. Curabitur auctor semper nulla. Donec varius orci eget risus. Duis nibh
mi, congue eu, accumsan eleifend, sagittis quis, diam. Duis eget orci sit amet
orci dignissim rutrum.&lt;/p&gt;
</description>
	</item>
	
	</channel>
</rss>
