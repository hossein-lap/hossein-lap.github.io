<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>RESTFul on Hossein Esmail</title>
    <link>https://hossein-lap.github.io/tags/restful/</link>
    <description>Recent content in RESTFul on Hossein Esmail</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hos Es</copyright>
    <lastBuildDate>Fri, 31 May 2024 16:47:17 +0330</lastBuildDate><atom:link href="https://hossein-lap.github.io/tags/restful/index.xml" rel="self" type="application/rss+xml" /><icon>https://hossein-lap.github.io/images/ed/foo.png</icon>
    
    
    <item>
      <title>Golang stdlib - Webserver</title>
      <link>https://hossein-lap.github.io/notes/webserver/</link>
      <pubDate>Fri, 31 May 2024 16:47:17 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/webserver/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>We need <code>&#34;net/http&#34;</code> module to create webserver and listen to the specified port.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">import (
    &#34;net/http&#34;
)</code></pre>
</div>
</div>
<div class="paragraph">
<p>we also might need these modules as well:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&#34;encoding/json&#34;</code> too for parsing JSON data</p>
</li>
<li>
<p><code>&#34;database/sql&#34;</code> and <code>&#34;github.com/go-sql-driver/mysql&#34;</code> to handle (my)sql/mariadb part</p>
</li>
<li>
<p><code>&#34;github.com/redi/go-redis/v9&#34;</code> to handle redis-cache</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We need a request handler struct for the http server to be able to work.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type RequestHandler struct {}</code></pre>
</div>
</div>
<div class="paragraph">
<p>And now we define the http server. it needs a <code>ServeHTTP()</code> function and paths
that needs to be handled (HTTP requests goes to the specified paths)</p>
</div>
<div class="listingblock">
<div class="title">main funcion</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    mux := http.NewServeMx()
    mux.Handle(&#34;/path1&#34;, &amp;RequestHandler{})
    mux.Handle(&#34;/path1/&#34;, &amp;RequestHandler{})
    mux.Handle(&#34;/path2&#34;, &amp;RequestHandler{})
    mux.Handle(&#34;/path2/&#34;, &amp;RequestHandler{})
    /* continue */
    http.ListenAndServe(&#34;:8080&#34;, mux)
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">serve function</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func (h *RequestHandler) ServeHTTP(w http.ResponseWriter, r *http.Requset) {
    request_type := r.Method
    tmp := strings.SplitN(r.URL.String(), &#34;/&#34;, 3)
    section := tmp[1] // path
    key := tmp[2] // add data after the path
    params := r.URL.Query()
    value := params.Get(key)
    body, err := io.ReadAll(r.Body) // values from curl&#39;s `--data` flag (spected to be JSON)
    /* continue */
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_redis_handler">1. Redis Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func cache_handler() {
    client := redis.NewClient(&amp;redis.Options{
        Addr: &#34;localhost:6349&#34;
        Password: &#34;&#34; // No password, to get it from env variables use: `os.Getenv(&#34;ENV&#34;)`
        DB: 0 // default db
    })
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mysql_handler">2. MySQL Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func database_handler() {
    sql_url := &#34;root@localhost:3360&#34;
    db, err := sql.Open(&#34;mysql&#34;, sql_url)
    if err != nil {
        pandic(err.Error())
    }
    defer db.Close()
    /* continue */
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_unmarshal">3. JSON Parser - Unmarshal</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type Movie struct {
    Name string `json:&#34;name&#34;`
    Publisher string `json:&#34;publisher&#34;`
    Year int `json:&#34;year&#34;`
}

func HandleMovie() {
    // var target map[string]any /* not optimal */
    var movie Movie

    input := `{
        &#34;name&#34;: &#34;Jocker&#34;,
        &#34;publisher&#34;: &#34;WB&#34;,
        &#34;year&#34;: 2019
    }`

    // err := json.Unmarshal([]byte(input), &amp;target) /* not optimal */
    err := json.Unmarshal([]byte(input), &amp;movie) /* not optimal */
    if err != nil {
        log.Fatalf(&#34;Unable to marshal JSON due to %s&#34;, err)
    }

    /* not optimal */
    // for k, v := range target {
    //    fmt.Printf(&#34;k: %s, v: %v\n&#34;, k, v)
    // }
    fmt.Printf(
        &#34;Name: %s, Publisher: %s, Year: %d\n&#34;,
        movie.Name, movie.Publisher, movie.Year,
    )
}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_complex_json">3.1. Complex JSON</h3>
<div class="listingblock">
<div class="title"><code>assets/complex.json</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="json">{
  &#34;name&#34;: &#34;James Peterson&#34;,
  &#34;age&#34;: 37,
  &#34;address&#34;: {
    &#34;line1&#34;: &#34;Block 78 Woodgrove Avenue 5&#34;,
    &#34;line2&#34;: &#34;Unit #05-111&#34;,
    &#34;postal&#34;: &#34;654378&#34;
  },
  &#34;pets&#34;: [
    {
      &#34;name&#34;: &#34;Lex&#34;,
      &#34;kind&#34;: &#34;Dog&#34;,
      &#34;age&#34;: 4,
      &#34;color&#34;: &#34;Gray&#34;
    },
    {
      &#34;name&#34;: &#34;Faye&#34;,
      &#34;kind&#34;: &#34;Cat&#34;,
      &#34;age&#34;: 6,
      &#34;color&#34;: &#34;Orange&#34;
    }
  ]
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><code>examples/complex_json/main.go</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type (
    FullPerson struct {
        Address Address
        Name    string
        Pets    []Pet
        Age     int
    }

    Pet struct {
        Name  string
        Kind  string
        Color string
        Age   int
    }

    Address struct {
        Line1  string
        Line2  string
        Postal string
    }
)


func main() {
    b, err := os.ReadFile(&#34;assets/complex.json&#34;)
    if err != nil {
        log.Fatalf(&#34;Unable to read file due to %s\n&#34;, err)
    }

    var person FullPerson

    err = json.Unmarshal(b, &amp;person)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal JSON due to %s&#34;, err)
    }

    litter.Dump(person)
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_common_pitfalls_with_json_unmarshalling_in_go">3.2. Common pitfalls with JSON unmarshalling in Go</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Extra fields are omitted in the target struct</p>
</li>
<li>
<p>Missing fields fallback to zero values</p>
</li>
<li>
<p>Unmarshalling is case insensitive</p>
</li>
<li>
<p>Field names must match JSON keys exactly</p>
</li>
<li>
<p>Type aliases are preserved</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_marshal">4. JSON Parser - Marshal</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>json.Marshal()</code> method does the opposite of <code>Unmarshal()</code> by converting
a given data structure into a JSON.</p>
</div>
<div class="listingblock">
<div class="title">examples/basic_marshal/main.go</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func marshal(in any) []byte {
    out, err := json.Marshal(in)

    if err != nil {
        log.Fatalf(&#34;Unable to marshal due to %s\n&#34;, err)
    }

    return out
}

func main() {
    first := marshal(14)
    second := marshal(&#34;Hello world&#34;)
    third := marshal([]float32{1.66, 6.86, 10.1})
    fourth := marshal(map[string]int{&#34;num&#34;: 15, &#34;other&#34;: 17})
    fmt.Printf(
        &#34;first: %s\nsecond: %s\nthird: %s\nfourth: %s\n&#34;,
        first,
        second,
        third,
        fourth,
    )
}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_structs">4.1. structs</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    p := Person{
        Name:  &#34;John Jones&#34;,
        Age:   26,
        Email: &#34;johnjones@email.com&#34;,
        Phone: &#34;89910119&#34;,
        Hobbies: []string{
            &#34;Swimming&#34;,
            &#34;Badminton&#34;,
        },
    }

    b, err := json.Marshal(p)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal due to %s\n&#34;, err)
    }

    fmt.Println(string(b))
}</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
If you wish to format the JSON object, you can use the <code>MarshalIndent()</code> method
which performs the same function as <code>Marshal()</code> but applies some indentation to
format the output.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_customizing_json_field_names_with_struct_tags">4.2. Customizing JSON field names with struct tags</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type Dog struct {
    Breed         string
    Name          string
    FavoriteTreat string
    Age           int
}

var dog = Dog{
  Breed: &#34;Golden Retriever&#34;,
  Age: 8,
  Name: &#34;Paws&#34;,
  FavoriteTreat: &#34;Kibble&#34;,
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type Dog struct {
    Breed         string `json:&#34;breed&#34;`
    Name          string `json:&#34;name&#34;`
    FavoriteTreat string `json:&#34;favorite_treat&#34;`
    Age           int    `json:&#34;age&#34;`
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    input := `{
      &#34;name&#34;: &#34;Coffee&#34;,
      &#34;breed&#34;: &#34;Toy Poodle&#34;,
      &#34;age&#34;: 5,
      &#34;favorite_treat&#34;: &#34;Kibble&#34;
    }`

    var coffee Dog

    err := json.Unmarshal([]byte(input), &amp;coffee)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal JSON due to %s&#34;, err)
    }

    litter.Dump(coffee)
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_uses_of_struct_tags">4.3. Other uses of struct tags</h3>
<div class="listingblock">
<div class="title">Omit an empty field (one with its zero value in Go)</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type User struct {
    Username string   `json:&#34;username&#34;`
    Password string   `json:&#34;-&#34;`

    Email    string   `json:&#34;email&#34;`
    Hobbies  []string `json:&#34;hobbies,omitempty&#34;`
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_validating_json_data">5. Validating JSON data</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    good := `{&#34;name&#34;: &#34;John Doe&#34;}`
    bad := `{name: &#34;John Doe&#34;}`

    fmt.Println(json.Valid([]byte(good)))
    fmt.Println(json.Valid([]byte(bad)))
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_defining_custom_behavior_marshal_unmarshal_data">6. Defining custom behavior - Marshal / Unmarshal data</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Go, you can define custom behavior for marshalling data by implementing the
<code>json.Marshaler</code> interface. This interface defines a single method,
<code>MarshalJSON()</code> which takes no arguments and returns a byte slice and an
error.</p>
</div>
<div class="paragraph">
<p>To implement the <code>json.Marshaler</code> interface, you need to define a new type that
wraps the original type you want to marshal. This new type should have a method
named <code>MarshalJSON()</code> that returns a byte slice and an error.</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type (
    CustomTime struct {
        time.Time
    }

    Baby struct {
        BirthDate CustomTime `json:&#34;birth_date&#34;`
        Name      string    `json:&#34;name&#34;`
        Gender    string    `json:&#34;gender&#34;`
    }
)</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above snippet, we defined a new <code>CustomTime</code> type that wraps a
<code>time.Time</code> value. In is subsequently used in the <code>Baby</code> struct as the type of
the <code>BirthDate</code> value.</p>
</div>
<div class="paragraph">
<p>Here’s an example that marshals a value of type <code>Baby</code> below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    baby := Baby{
        Name:   &#34;johnny&#34;,
        Gender: &#34;male&#34;,
        BirthDate: CustomTime{
            time.Date(2023, 1, 1, 12, 0, 0, 0, time.Now().Location()),
        },
    }

    b, err := json.Marshal(baby)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal due to %s\n&#34;, err)
    }

    fmt.Println(string(b))
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice how the <code>birth_date</code> presented in the RFC 3339 format. You can now
define the custom marshalling behavior that will return a different format for
<code>CustomTime</code> values (such as <code>DD-MM-YYYY</code>) instead of the default RFC 3339
timestamp format.</p>
</div>
<div class="paragraph">
<p>You only need to define a <code>MarshalJSON()</code> method for the type as shown below:</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func (ct CustomTime) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf(`%q`, ct.Time.Format(&#34;02-01-2006&#34;))), nil
}</code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
