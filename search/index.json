
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/blog/sample/","summary":"more modern approach\n","tags":["cool-tag"],"text":" insert lead paragraph here.\n1. new stuff ","title":"Sample"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/blog/test/","summary":"just a simple test!\n","tags":["cool-tag"],"text":" insert lead paragraph here.\n1. new stuff ","title":"Test"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/lua/lua/","summary":"Lua is a very small, fast, embeddable programming language.\n","tags":["Embedded","Game","Lua"],"text":" insert lead paragraph here.\n1. new stuff ","title":"Lua Progamming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/go/golang/","summary":"go is a very simple programming language with a strong standard library and\nuseful features.\n","tags":["backend","cli","go","tools"],"text":" insert lead paragraph here.\n1. new stuff very versile\n2. more stuff package main import ( \u0026#34;fmt\u0026#34; ) func main() { fmt.printf(\u0026#34;this is a simple test!\\n\u0026#34;) } ","title":"Go Programming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/posts/asciidoc/asciidoc/","summary":"AsciiDoc is a markup language similar to markdown but vay more standardized\nand with more features/elements.\n","tags":["writing"],"text":" 1. intro okay, let’s do it.\ntest // include::{home}/.cache/wal/colors-wal-st.h[] 2. lists 2.1. unordered lists * level 1 ** level 2 *** level 3 **** level 4 ***** level 5 * level 1 example 1. output level 1\nlevel 2\nlevel 3\nlevel 4\nlevel 5\nlevel 1\n2.2. ordered lists . level 1 .. level 2 ... level 3 .... level 4 ..... level 5 . level 1 example 2. output level 1\nlevel 2\nlevel 3\nlevel 4\nlevel 5\nlevel 1\n2.3. todo lists - [*] checked - [x] also checked - [ ] not checked - normal list item example 3. output ✓ checked\n✓ also checked\n❏ not checked\nnormal list item\n2.4. separating lists . apples . oranges //- . walnuts . almonds example 4. output apples\noranges\nwalnuts\nalmonds\n3. definitions 3.1. normal definition list first term:: definition of first term section term:: definition of second term example 5. output first term definition of first term\nsection term definition of second term\n3.2. horizontal definition list [horizontal] first term:: definition of first term section term:: definition of second term example 6. output first term definition of first term\nsection term definition of second term\n3.3. multi-line definition list first term:: definition of first term section term:: definition of second term example 7. output first term definition of first term\nsection term definition of second term\n3.4. q\u0026amp;a [qanda] what is asciidoctor?:: an implementation of the asciidoc processor in ruby. what is the answer to the ultimate question?:: 42 example 8. output what is asciidoctor?\nan implementation of the asciidoc processor in ruby.\nwhat is the answer to the ultimate question?\n42\n3.5. mixed operating systems:: linux::: . fedora * desktop . ubuntu * desktop * server bsd::: . freebsd . netbsd cloud providers:: paas::: . openshift . cloudbees iaas::: . amazon ec2 . rackspace example 9. output operating systems linux fedora\ndesktop\nubuntu\ndesktop\nserver\nbsd freebsd\nnetbsd\ncloud providers paas openshift\ncloudbees\niaas amazon ec2\nrackspace\nnote note that the indentation is optional 3.6. complex content in outline lists * every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent. + additional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks. + list continuation:: a plus sign (`{plus}`) on a line by itself * a literal paragraph does not require a list continuation. $ gem install asciidoctor * asciidoc lists may contain any complex content. + [cols=\u0026#34;2\u0026#34;, options=\u0026#34;header\u0026#34;] |=== |application |language |asciidoc |python |asciidoctor |ruby |=== example 10. output every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent.\nadditional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks.\nlist continuation a plus sign (+) on a line by itself\na literal paragraph does not require a list continuation.\n$ gem install asciidoctor asciidoc lists may contain any complex content.\napplication language asciidoc\npython\nasciidoctor\nruby\n4. links 4.1. external http://asciidoctor.org - automatic! http://asciidoctor.org[asciidoctor] https://github.com/asciidoctor[asciidoctor @ *github*] example 11. output http://asciidoctor.org - automatic!\nasciidoctor\nasciidoctor @ github\n4.2. relative link:test.adoc[docs] example 12. output docs\n4.3. email and irc devel@discuss.arquillian.org mailto:devel@discuss.arquillian.org[discuss arquillian] mailto:devel-join@discuss.arquillian.org[subscribe, subscribe me, i want to join!] irc://irc.freenode.org/#asciidoctor example 13. output devel@discuss.arquillian.org\ndiscuss arquillian\nsubscribe\nirc://irc.freenode.org/#asciidoctor\n4.4. inline anchors [[bookmark-a]]inline anchors make arbitrary content referenceable. anchor:bookmark-b[]use a cross reference to link to this location. example 14. output inline anchors make arbitrary content referenceable.\nuse a cross reference to link to this location.\n4.5. internal cross references see \u0026lt;\u0026lt;paragraphs\u0026gt;\u0026gt; to learn how to write paragraphs. learn how to organize the document into \u0026lt;\u0026lt;section-titles,sections\u0026gt;\u0026gt;. example 15. output see [paragraphs] to learn how to write paragraphs.\nlearn how to organize the document into sections.\n4.6. images image::/images/asciidoc/rose.png[] image::/images/asciidoc/rose.png[rose] [[img-sunset]] image::/images/asciidoc/rose.png[caption=\u0026#34;figure 1: \u0026#34;, title=\u0026#34;a rose\u0026#34;, alt=\u0026#34;rose\u0026#34;, width=\u0026#34;300\u0026#34;, height=\u0026#34;200\u0026#34;, link=\u0026#34;http://www.flickr.com/photos/javh/5448336655\u0026#34;] image::http://asciidoctor.org/images/octocat.jpg[github mascot] example 16. output figure 1: a rose 5. admonition paragraph 5.1. note note: this is a note! example 17. output note this is a note! 5.2. tip tip: this is a tip! example 18. output tip this is a tip! 5.3. warning warning: this is a warning! example 19. output warning this is a warning! 5.4. caution caution: this is a caution! example 20. output caution this is a caution! 5.5. important important: this is a important! example 21. output important this is a important! 5.6. admonition blocks [note] ==== this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels: * note * tip * warning * caution * important ==== example 22. output note this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels:\nnote\ntip\nwarning\ncaution\nimportant\n6. blocks 6.1. listing block ----- this is a **_listing block_** ----- example 23. output this is a **_listing block_** 6.2. example block ===== this is a **_example block_** ===== example 24. output this is a example block\n6.3. comment block //// this is a **_comment block_** //// example 25. output 6.4. literal block .... this is a **_literal block_** .... example 26. output this is a **_literal block_** 6.5. pass block ++++ == this is raw text ++++ example 27. output == this is raw text 6.6. quote/verse block ____ this is a very very simple quote ____ example 28. output this is a very very simple quote\n6.6.1. blockqoutes .after landing the cloaked klingon bird of prey in golden gate park: [quote,captain james t. kirk,star trek iv: the voyage home] everybody remember where we parked. example 29. output after landing the cloaked klingon bird of prey in golden gate park: everybody remember where we parked. — captain james t. kirk star trek iv: the voyage home 6.7. sidebar block .some title **** this is a sidebar block -- i have no idea why it\u0026#39;s called `sidebar` **** example 30. output some title this is a sidebar block — i have no idea why it’s called sidebar\n6.8. block metadata .gettysburg address [[gettysburg]] [quote, abraham lincoln, soldiers\u0026#39; national cemetery dedication] ---- four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ... ---- example 31. output gettysburg address four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ... 7. customization (wip) 8. render (wip) ","title":"AsciiDoc(tor): Yo Dawg!"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/elixir/elixir/","summary":"Elixir is a function programming language which uses Erlang's VM (BEAM)\nand has a very similar approach to Erlang\n","tags":["programming"],"text":" elixir is a dynamically-typed functional programming language.\n1. intractive elixir environment $ iex 2. hello world! intro.exs #!/bin/elixir io.puts(\u0026#34;hello\u0026#34; \u0026lt;\u0026gt; \u0026#34; elixir!!\u0026#34;) 3. build tool mix help mix new mix compile mix test mix run create mix new example ","title":"Elixir Programming Language"},{"date":"2023-03-29","image":"","imageAlt":"","link":"https://hossein-lap.github.io/about/","summary":"For a very long time I've wanted to create a weblog to write and\nshare some stuffs in it. There we go :D\n","tags":[],"text":" hi i’m hossein\n#include \u0026lt;stdio.h\u0026gt; int main(int argc, char *argv[]) { printf(\u0026#34;hello world!\\n\u0026#34;); return 0; } lua programmer, (xe)latex writer, sysadmin and linux user. yet another minimalist person with a passion about open source software.\ni was a computer guy from my early days back in my 1st and 2nd grade. but all i did was playing video games. until my dad came to me and said:\ndon’t just play video games kiddo, it can do much more than that. try to learn it.\nand that was it. it became the goal of my life :)\nwhat i know? i have happen to gain some knowledge in programming languages such as:\ni happened to learn programming languages such as:\nc\nlua\npython\nbash\nby using tools that required a little programming knowledge to modify/configure or extend.\ntools these tools mostly were suckless tools:\ndwm\nst\ndmenu\nsent\n","title":"About"}]
}

