
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-05-31","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/kubernetes/k8s-ingress-loadbalancer/","summary":"Configure kubernetes infrastructre with NodePort, ClusterIP, Ingress, nginx load-balancer\n","tags":["ingress","K8S","LoadBalancer","nginx","NodePort"],"text":"  warning  this is some note, nothing serious.       exposing services to external clients few ways to make a service accessible externally:\n   nodeport service type\n  loadbalancer service type\n  create ingress resource, radically different mechanism\n     ","title":"K8s Ingress LoadBalancer"},{"date":"2024-05-31","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/golang/webserver/","summary":"Create a web-server using just golang's stdlib `\"net/http\"`\n","tags":["Go","HTTP","JSON","Redis","RESTFul","SQL"],"text":"  warning  this is just some notes, nothing serious.     we need \u0026#34;net/http\u0026#34; module to create webserver and listen to the specified port.\n import ( \u0026#34;net/http\u0026#34; )   we also might need these modules as well:\n   \u0026#34;encoding/json\u0026#34; too for parsing json data\n  \u0026#34;database/sql\u0026#34; and \u0026#34;github.com/go-sql-driver/mysql\u0026#34; to handle (my)sql/mariadb part\n  \u0026#34;github.com/redi/go-redis/v9\u0026#34; to handle redis-cache\n   we need a request handler struct for the http server to be able to work.\n type requesthandler struct {}   and now we define the http server. it needs a servehttp() function and paths that needs to be handled (http requests goes to the specified paths)\n main funcion func main() { mux := http.newservemx() mux.handle(\u0026#34;/path1\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path1/\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path2\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path2/\u0026#34;, \u0026amp;requesthandler{}) /* continue */ http.listenandserve(\u0026#34;:8080\u0026#34;, mux) }   serve function func (h *requesthandler) servehttp(w http.responsewriter, r *http.requset) { request_type := r.method tmp := strings.splitn(r.url.string(), \u0026#34;/\u0026#34;, 3) section := tmp[1] // path key := tmp[2] // add data after the path params := r.url.query() value := params.get(key) body, err := io.readall(r.body) // values from curl\u0026#39;s `--data` flag (spected to be json) /* continue */ }     redis handler func cache_handler() { client := redis.newclient(\u0026amp;redis.options{ addr: \u0026#34;localhost:6349\u0026#34; password: \u0026#34;\u0026#34; // no password, to get it from env variables use: `os.getenv(\u0026#34;env\u0026#34;)` db: 0 // default db }) }     mysql handler func database_handler() { sql_url := \u0026#34;root@localhost:3360\u0026#34; db, err := sql.open(\u0026#34;mysql\u0026#34;, sql_url) if err != nil { pandic(err.error()) } defer db.close() /* continue */ }     json parser - unmarshal type movie struct { name string `json:\u0026#34;name\u0026#34;` publisher string `json:\u0026#34;publisher\u0026#34;` year int `json:\u0026#34;year\u0026#34;` } func handlemovie() { // var target map[string]any /* not optimal */ var movie movie input := `{ \u0026#34;name\u0026#34;: \u0026#34;jocker\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;wb\u0026#34;, \u0026#34;year\u0026#34;: 2019 }` // err := json.unmarshal([]byte(input), \u0026amp;target) /* not optimal */ err := json.unmarshal([]byte(input), \u0026amp;movie) /* not optimal */ if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } /* not optimal */ // for k, v := range target { // fmt.printf(\u0026#34;k: %s, v: %v\\n\u0026#34;, k, v) // } fmt.printf( \u0026#34;name: %s, publisher: %s, year: %d\\n\u0026#34;, movie.name, movie.publisher, movie.year, ) }   complex json assets/complex.json {\u0026#34;name\u0026#34;:\u0026#34;james peterson\u0026#34;,\u0026#34;age\u0026#34;:37,\u0026#34;address\u0026#34;:{\u0026#34;line1\u0026#34;:\u0026#34;block 78 woodgrove avenue 5\u0026#34;,\u0026#34;line2\u0026#34;:\u0026#34;unit #05-111\u0026#34;,\u0026#34;postal\u0026#34;:\u0026#34;654378\u0026#34;},\u0026#34;pets\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;lex\u0026#34;,\u0026#34;kind\u0026#34;:\u0026#34;dog\u0026#34;,\u0026#34;age\u0026#34;:4,\u0026#34;color\u0026#34;:\u0026#34;gray\u0026#34;},{\u0026#34;name\u0026#34;:\u0026#34;faye\u0026#34;,\u0026#34;kind\u0026#34;:\u0026#34;cat\u0026#34;,\u0026#34;age\u0026#34;:6,\u0026#34;color\u0026#34;:\u0026#34;orange\u0026#34;}]}   examples/complex_json/main.go type ( fullperson struct { address address name string pets []pet age int } pet struct { name string kind string color string age int } address struct { line1 string line2 string postal string } ) func main() { b, err := os.readfile(\u0026#34;assets/complex.json\u0026#34;) if err != nil { log.fatalf(\u0026#34;unable to read file due to %s\\n\u0026#34;, err) } var person fullperson err = json.unmarshal(b, \u0026amp;person) if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } litter.dump(person) }    common pitfalls with json unmarshalling in go  extra fields are omitted in the target struct\n  missing fields fallback to zero values\n  unmarshalling is case insensitive\n  field names must match json keys exactly\n  type aliases are preserved\n      json parser - marshal the json.marshal() method does the opposite of unmarshal() by converting a given data structure into a json.\n examples/basic_marshal/main.go func marshal(in any) []byte { out, err := json.marshal(in) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } return out } func main() { first := marshal(14) second := marshal(\u0026#34;hello world\u0026#34;) third := marshal([]float32{1.66, 6.86, 10.1}) fourth := marshal(map[string]int{\u0026#34;num\u0026#34;: 15, \u0026#34;other\u0026#34;: 17}) fmt.printf( \u0026#34;first: %s\\nsecond: %s\\nthird: %s\\nfourth: %s\\n\u0026#34;, first, second, third, fourth, ) }   structs func main() { p := person{ name: \u0026#34;john jones\u0026#34;, age: 26, email: \u0026#34;johnjones@email.com\u0026#34;, phone: \u0026#34;89910119\u0026#34;, hobbies: []string{ \u0026#34;swimming\u0026#34;, \u0026#34;badminton\u0026#34;, }, } b, err := json.marshal(p) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } fmt.println(string(b)) }     note  if you wish to format the json object, you can use the marshalindent() method which performs the same function as marshal() but applies some indentation to format the output.      customizing json field names with struct tags type dog struct { breed string name string favoritetreat string age int } var dog = dog{ breed: \u0026#34;golden retriever\u0026#34;, age: 8, name: \u0026#34;paws\u0026#34;, favoritetreat: \u0026#34;kibble\u0026#34;, }   type dog struct { breed string `json:\u0026#34;breed\u0026#34;` name string `json:\u0026#34;name\u0026#34;` favoritetreat string `json:\u0026#34;favorite_treat\u0026#34;` age int `json:\u0026#34;age\u0026#34;` }   func main() { input := `{ \u0026#34;name\u0026#34;: \u0026#34;coffee\u0026#34;, \u0026#34;breed\u0026#34;: \u0026#34;toy poodle\u0026#34;, \u0026#34;age\u0026#34;: 5, \u0026#34;favorite_treat\u0026#34;: \u0026#34;kibble\u0026#34; }` var coffee dog err := json.unmarshal([]byte(input), \u0026amp;coffee) if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } litter.dump(coffee) }    other uses of struct tags omit an empty field (one with its zero value in go) type user struct { username string `json:\u0026#34;username\u0026#34;` password string `json:\u0026#34;-\u0026#34;` email string `json:\u0026#34;email\u0026#34;` hobbies []string `json:\u0026#34;hobbies,omitempty\u0026#34;` }      validating json data func main() { good := `{\u0026#34;name\u0026#34;: \u0026#34;john doe\u0026#34;}` bad := `{name: \u0026#34;john doe\u0026#34;}` fmt.println(json.valid([]byte(good))) fmt.println(json.valid([]byte(bad))) }     defining custom behavior - marshal / unmarshal data in go, you can define custom behavior for marshalling data by implementing the json.marshaler interface. this interface defines a single method, marshaljson() which takes no arguments and returns a byte slice and an error.\n to implement the json.marshaler interface, you need to define a new type that wraps the original type you want to marshal. this new type should have a method named marshaljson() that returns a byte slice and an error.\n examples/custom_timestamp/main.go type ( customtime struct { time.time } baby struct { birthdate customtime `json:\u0026#34;birth_date\u0026#34;` name string `json:\u0026#34;name\u0026#34;` gender string `json:\u0026#34;gender\u0026#34;` } )   in the above snippet, we defined a new customtime type that wraps a time.time value. in is subsequently used in the baby struct as the type of the birthdate value.\n here’s an example that marshals a value of type baby below:\n func main() { baby := baby{ name: \u0026#34;johnny\u0026#34;, gender: \u0026#34;male\u0026#34;, birthdate: customtime{ time.date(2023, 1, 1, 12, 0, 0, 0, time.now().location()), }, } b, err := json.marshal(baby) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } fmt.println(string(b)) }   notice how the birth_date presented in the rfc 3339 format. you can now define the custom marshalling behavior that will return a different format for customtime values (such as dd-mm-yyyy) instead of the default rfc 3339 timestamp format.\n you only need to define a marshaljson() method for the type as shown below:\n examples/custom_timestamp/main.go func (ct customtime) marshaljson() ([]byte, error) { return []byte(fmt.sprintf(`%q`, ct.time.format(\u0026#34;02-01-2006\u0026#34;))), nil }     ","title":"Golang stdlib - Webserver"},{"date":"2024-05-26","image":"","imageAlt":"","link":"https://hossein-lap.github.io/welcome/","summary":"Welcome to my blog. I’ll be posting myown notes, ideas, programs. I am Hossein, a programmer / DevOps engineer with passions about open-source software and trees.\nAlso, I use vim btw :)\n \n              Hobbies\n Coding, Biking, Volleyball, Fishing\n   Programming Languages\n Lua, Go, C, Bash","tags":[],"text":"        welcome to my blog. i’ll be posting myown notes, ideas, programs. i am hossein, a programmer / devops engineer with passions about open-source software and trees.\nalso, i use vim btw :)\n \n              hobbies\n coding, biking, volleyball, fishing\n   programming languages\n lua, go, c, bash\n   tools\n linux, git, kvm, docker, k8s, ansible\n   markup / typesetting languages\n latex, groff, asciidoc(tor), markdown\n        ","title":"WIP"},{"date":"2024-05-17","image":"","imageAlt":"","link":"https://hossein-lap.github.io/blog/time/time/","summary":" Insert Lead paragraph here.\n   1. New stuff We are new here ;)   Unresolved directive in \u0026lt;stdin\u0026gt; - include::nah.txt[]\n   ","tags":["cool-tag"],"text":" insert lead paragraph here.\n   1. new stuff we are new here ;)   unresolved directive in \u0026lt;stdin\u0026gt; - include::nah.txt[]\n   ","title":"Time"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/blog/sample/","summary":"more modern approach\n","tags":["cool-tag"],"text":" insert lead paragraph here.\n   1. new stuff   ","title":"Sample"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/blog/test/","summary":"just a simple test!\n","tags":["cool-tag"],"text":" insert lead paragraph here.\n   1. new stuff   ","title":"Test"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/lua/lua/","summary":"Lua is a very small, fast, embeddable programming language.\n","tags":["Embedded","Game","Lua","Plugin"],"text":" insert lead paragraph here.\n   new stuff   ","title":"Lua Progamming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/go/go/","summary":"go is a very simple programming language with a strong standard library and\nuseful features.\n","tags":["Backend","CLI","Go","Programming","Tools"],"text":" insert lead paragraph here.\n   new stuff very versile\n   more stuff package main import ( \u0026#34;fmt\u0026#34; ) func main() { fmt.printf(\u0026#34;this is a simple test!\\n\u0026#34;) }     ","title":"Go Programming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/asciidoc/asciidoc/","summary":"AsciiDoc is a markup language similar to markdown but vay more standardized\nand with more features/elements.\n","tags":["AsciiDoc","Documentation","Writing"],"text":" intro okay, let’s do it.\n test // include::{home}/.cache/wal/colors-wal-st.h[]     lists unordered lists * level 1 ** level 2 *** level 3 **** level 4 ***** level 5 * level 1   example 1. output   level 1\n  level 2\n  level 3\n  level 4\n  level 5\n              level 1\n        ordered lists . level 1 .. level 2 ... level 3 .... level 4 ..... level 5 . level 1   example 2. output  level 1\n level 2\n level 3\n level 4\n level 5\n              level 1\n        todo lists - [*] checked - [x] also checked - [ ] not checked - normal list item   example 3. output  ✓ checked\n  ✓ also checked\n  ❏ not checked\n  normal list item\n        separating lists . apples . oranges //- . walnuts . almonds   example 4. output  apples\n  oranges\n    walnuts\n  almonds\n          definitions normal definition list first term:: definition of first term section term:: definition of second term   example 5. output  first term  definition of first term\n section term  definition of second term\n        horizontal definition list [horizontal] first term:: definition of first term section term:: definition of second term   example 6. output   first term  definition of first term\n   section term  definition of second term\n         multi-line definition list first term:: definition of first term section term:: definition of second term   example 7. output  first term  definition of first term\n section term  definition of second term\n        q\u0026amp;a [qanda] what is asciidoctor?:: an implementation of the asciidoc processor in ruby. what is the answer to the ultimate question?:: 42   example 8. output   what is asciidoctor?\nan implementation of the asciidoc processor in ruby.\n  what is the answer to the ultimate question?\n42\n        mixed operating systems:: linux::: . fedora * desktop . ubuntu * desktop * server bsd::: . freebsd . netbsd cloud providers:: paas::: . openshift . cloudbees iaas::: . amazon ec2 . rackspace   example 9. output  operating systems   linux   fedora\n  desktop\n     ubuntu\n  desktop\n  server\n       bsd   freebsd\n  netbsd\n       cloud providers   paas   openshift\n  cloudbees\n    iaas   amazon ec2\n  rackspace\n               note  note that the indentation is optional      complex content in outline lists * every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent. + additional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks. + list continuation:: a plus sign (`{plus}`) on a line by itself * a literal paragraph does not require a list continuation. $ gem install asciidoctor * asciidoc lists may contain any complex content. + [cols=\u0026#34;2\u0026#34;, options=\u0026#34;header\u0026#34;] |=== |application |language |asciidoc |python |asciidoctor |ruby |===   example 10. output   every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent.\nadditional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks.\n  list continuation  a plus sign (+) on a line by itself\n     a literal paragraph does not require a list continuation.\n$ gem install asciidoctor     asciidoc lists may contain any complex content.\n    application language     asciidoc\n python\n   asciidoctor\n ruby\n              links external http://asciidoctor.org - automatic! http://asciidoctor.org[asciidoctor] https://github.com/asciidoctor[asciidoctor @ *github*]   example 11. output http://asciidoctor.org - automatic!\n asciidoctor\n asciidoctor @ github\n      relative link:test.adoc[docs]   example 12. output docs\n      email and irc devel@discuss.arquillian.org mailto:devel@discuss.arquillian.org[discuss arquillian] mailto:devel-join@discuss.arquillian.org[subscribe, subscribe me, i want to join!] irc://irc.freenode.org/#asciidoctor   example 13. output devel@discuss.arquillian.org\n discuss arquillian\n subscribe\n irc://irc.freenode.org/#asciidoctor\n      inline anchors [[bookmark-a]]inline anchors make arbitrary content referenceable. anchor:bookmark-b[]use a cross reference to link to this location.   example 14. output inline anchors make arbitrary content referenceable.\n use a cross reference to link to this location.\n      internal cross references see \u0026lt;\u0026lt;paragraphs\u0026gt;\u0026gt; to learn how to write paragraphs. learn how to organize the document into \u0026lt;\u0026lt;section-titles,sections\u0026gt;\u0026gt;.   example 15. output see [paragraphs] to learn how to write paragraphs.\n learn how to organize the document into sections.\n      images image::/images/asciidoc/rose.png[] image::/images/asciidoc/rose.png[rose] [[img-sunset]] image::/images/asciidoc/rose.png[caption=\u0026#34;figure 1: \u0026#34;, title=\u0026#34;a rose\u0026#34;, alt=\u0026#34;rose\u0026#34;, width=\u0026#34;300\u0026#34;, height=\u0026#34;200\u0026#34;, link=\u0026#34;http://www.flickr.com/photos/javh/5448336655\u0026#34;] image::http://asciidoctor.org/images/octocat.jpg[github mascot]   example 16. output       figure 1: a rose           admonition paragraph note note: this is a note!   example 17. output   note  this is a note!          tip tip: this is a tip!   example 18. output   tip  this is a tip!          warning warning: this is a warning!   example 19. output   warning  this is a warning!          caution caution: this is a caution!   example 20. output   caution  this is a caution!          important important: this is a important!   example 21. output   important  this is a important!          admonition blocks [note] ==== this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels: * note * tip * warning * caution * important ====   example 22. output   note  this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels:\n   note\n  tip\n  warning\n  caution\n  important\n              blocks listing block ----- this is a **_listing block_** -----   example 23. output this is a **_listing block_**        example block ===== this is a **_example block_** =====   example 24. output this is a example block\n        comment block //// this is a **_comment block_** ////   example 25. output      literal block .... this is a **_literal block_** ....   example 26. output this is a **_literal block_**        pass block ++++ == this is raw text ++++   example 27. output == this is raw text      quote/verse block ____ this is a very very simple quote ____   example 28. output  this is a very very simple quote\n       blockqoutes .after landing the cloaked klingon bird of prey in golden gate park: [quote,captain james t. kirk,star trek iv: the voyage home] everybody remember where we parked.   example 29. output after landing the cloaked klingon bird of prey in golden gate park:  everybody remember where we parked.  — captain james t. kirk star trek iv: the voyage home         sidebar block .some title **** this is a sidebar block -- i have no idea why it\u0026#39;s called `sidebar` ****   example 30. output some title this is a sidebar block — i have no idea why it’s called sidebar\n        block metadata .gettysburg address [[gettysburg]] [quote, abraham lincoln, soldiers\u0026#39; national cemetery dedication] ---- four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ... ----   example 31. output gettysburg address four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ...          customization (wip)   render (wip)   ","title":"AsciiDoc(tor): Yo Dawg!"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/elixir/elixir/","summary":"Elixir is a function programming language which uses Erlang's VM (BEAM)\nand has a very similar approach to Erlang\n","tags":["Elixir","Functional","Programming"],"text":"elixir is a dynamically-typed functional programming language.\n   intractive elixir environment $ iex     hello world! intro.exs #!/bin/elixir io.puts(\u0026#34;hello\u0026#34; \u0026lt;\u0026gt; \u0026#34; elixir!!\u0026#34;)     build tool mix help mix new mix compile mix test mix run   create mix new example     ","title":"Elixir Programming Language"},{"date":"2023-03-29","image":"","imageAlt":"","link":"https://hossein-lap.github.io/about/","summary":"For a very long time I've wanted to create a weblog to write and\nshare some stuffs in it. There we go :D\n","tags":[],"text":"hi i’m hossein\n #include \u0026lt;stdio.h\u0026gt;int main(int argc, char *argv[]) { printf(\u0026#34;hello world!\\n\u0026#34;); return 0; }   lua programmer, (xe)latex writer, sysadmin and linux user. yet another minimalist person with a passion about open source software.\n i was a computer guy from my early days back in my 1st and 2nd grade. but all i did was playing video games. until my dad came to me and said:\n  don’t just play video games kiddo, it can do much more than that. try to learn it.\n   and that was it. it became the goal of my life :)\n what i know? i have happen to gain some knowledge in programming languages such as:\n i happened to learn programming languages such as:\n     c\n lua\n   python\n bash\n    by using tools that required a little programming knowledge to modify/configure or extend.\n   tools these tools mostly were suckless tools:\n     dwm\n st\n   dmenu\n sent\n      ","title":"About"}]
}

