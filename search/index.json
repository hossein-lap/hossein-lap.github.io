
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-09-11","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/perl/","summary":"Perl programming language notes/tutorials\n","tags":["legacy","perl","script"],"text":" hello world! #!/bin/perl use warnings; print(\u0026#34;hello world!\\n\u0026#34;); note use warnings; is called pragma in perl. this pragma instructs perl to turn on additional warning reporting.\nperl syntax basic perl syntax to get started with perl language quickly including variables, expressions, statements, block, comments, whitespaces, and keywords.\nvalues and variables you develop perl programs to manipulate some kinds of data. the data can be either numbers, strings, or more complex such as a list. data is held as value.\nsome values 10 20.2 \u0026#34;perl syntax\u0026#34; to hold a piece of data, you need variables. you use a variable to store a value. and through the name of the variable, you can process the value.\nthe following illustrates some variables in perl:\ndefine variables $x = 10; $y = 20; $s = \u0026#34;perl string\u0026#34;; we have two integer variables ($x and $y) and one string variable ($s). for more information on perl variables, check it out the perl variables.\nexpressions in perl, an expression is anything that returns a value.\nthe expression can be used in a larger expression or a statement. the expression can be a literal number, complex expression with operators, or a function (aka subroutine), call.\nfor example, 3 is an expression that returns a value of 3. the $a + $b is an expression that returns the sum of two variables: $a and $b.\nstatements a statement is made up of expressions. a statement is executed by perl at run-time.\neach perl statement must end with a semicolon (;). the following example shows the statements in perl:\n$c = $a + $b; print($c); blocks a block is made up of statements wrapped in curly braces {}. you use blocks to organize statements in the program.\nthe following example illustrates a block in perl:\n{ $a = 1; $a = $a + 1; print($a); } any variable declared inside a block has its own scope.\nit means the variables declared inside a block only last as long as the block is executed.\ncomments in perl, a comment begins with a hash (#) character. perl interpreter ignores comments at both compile-time and runtime.\ntypically, you use comments to document the logic of your code. the code tells you what it does however comments provides information on why the code does so.\ncomments are very important and useful to you as a programmer in order to understand the code later. they’re also useful to other programmers who will read and maintain your programs in the future.\nlet’s take a look at the following example:\n$salary = $salary + 1.05; what the code does is to increase the value of the variable $salary 5%. however, why it does so was not documented.\ntherefore the following code with comment is much clearer.\n# increase salary %5 for employees who achieve kpi $salary = $salary + 1.05; perl also allows you to place a comment on the same line as the statement. see the following example:\n$counter = 0; # reset the counter it is important to use comments properly to make your code easier to understand.\nwhitespace whitespaces are spaces, tabs, and newlines. perl is very flexible in terms of whitespaces usages. consider the following example:\n$x = 20; $y=20; both lines of code work perfectly. we surrounded the assignment operator (=) with whitespace in the first statement, but not in the second one.\nperl really doesn’t care about the whitespace. however, it is a good practice to use whitespace to make the code more readable.\nkeywords perl has a set of keywords that have special meanings to its language.\nperl keywords fall into some categories such as built-in function and control keywords.\nyou should always avoid using keywords to name variables, functions, modules, and other objects. check it out the perl keywords.\nsometimes, it is fine to use a variable name such as $print, which is similar to the built-in print() function. however, this may lead to confusion. in addition, if the program has an issue, it’s more difficult to troubleshoot.\nperl variables to manipulate data in your program, you use variables.\nperl provides three types of variables: scalars, lists, and hashes to help you manipulate the corresponding data types including scalars, lists, and hashes.\nwe’ll focus on the scalar variable in this section.\nnaming variables you use scalar variables to manipulate scalar data such as numbers and strings,\na scalar variable starts with a dollar sign ($), followed by a letter or underscore, after that, any combination of numbers, letters, and underscores. the name of a variable can be up to 255 characters.\nperl is case-sensitive. the $variable and $variable are different variables.\nperl uses the dollar sign ($) as a prefix for the scalar variables because of the $ looks like the character s in the scalar. you can use this tip to remember when you want to declare a scalar variable.\nvalid variables: $gate = 10; $_port = 20; invalid variables: $4whatever = 20; # no letter or underscore found after dollar sign ($) $email-address = \u0026#34;zen@example.com\u0026#34;; # special character (-) found $home url = \u0026#34;http://localhost/perltutorial\u0026#34;; # space is not allowed declaring variables perl doesn’t require you to declare a variable before using it.\nfor example, you can introduce a variable in your program and use it right away as follows:\n$a = 10; $b = 20; $c = $a + $b; print($c); in some cases, using a variable without declaring it explicitly may lead to problems. let’s take a look at the following example:\n$color = \u0026#39;red\u0026#39;; print \u0026#34;your favorite color is \u0026#34; . $colour . \u0026#34;\\n\u0026#34;; the expected output was your favorite color is red.\nhowever, in this case, you got your favorite color is, because the $color and $colour are different variables. the mistake was made because of the different variable names.\nto prevent such cases, perl provides a pragma called strict that requires you to declare variable explicitly before using it.\nin this case, if you use the my keyword to declare a variable and try to run the script, perl will issue an error message indicating that a compilation error occurred due to the $colour variable must be declared explicitly.\n#!/usr/bin/perl use strict; my $color = \u0026#39;red\u0026#39;; print \u0026#34;your favorite color is \u0026#34; . $colour . \u0026#34;\\n\u0026#34; a variable declared with the my keyword is a lexically scoped variable.\nit means the variable is only accessible inside the enclosing block or all blocks nested inside the enclosing block. in other words, the variable is local to the enclosing block.\nnow, you’ll learn a very important concept in programming called variable scopes.\nperl variable scopes let’s take a look at the following example:\n#!/usr/bin/perl use warnings; $color = \u0026#39;red\u0026#39;; print(\u0026#34;my favorite #1 color is \u0026#34; . $color . \u0026#34;\\n\u0026#34;); # another block { my $color = \u0026#39;blue\u0026#39;; print(\u0026#34;my favorite #2 color is \u0026#34; . $color . \u0026#34;\\n\u0026#34;); } # for checking print(\u0026#34;my favorite #1 color is \u0026#34; . $color . \u0026#34;\\n\u0026#34;); in the example above: first, declared a global variable named $color.\nthen, displayed the favorite color by referring to the $color variable. as expected, we get the red color in this case.\nnext, created a new block and declared a variable with the same name $color using the my keyword. the $color variable is lexical. it is a local variable and only visible inside the enclosing block.\nafter that, inside the block, we displayed the favorite color and we got the blue color. the local variable takes priority in this case.\nfinally, following the block, we referred to the $color variable and perl referred to the $color global variable.\nif you want to declare global variables that are visible throughout your program or from external packages, you can use our keyword as shown in the following code:\nour $color = \u0026#39;red\u0026#39;; perl variable interpolation perl interpolates variables in double-quoted strings. it means if you place a variable inside a double-quoted string, you’ll get the value of the variable instead of its name.\nlet’s take a look at the following example:\n#!/usr/bin/perl use strict; use warnings; my $amount = 20; my $s = \u0026#34;the amount is $amount\\n\u0026#34;; print($s); perl interpolates the value of $amount into the string which is 20.\nnote note that perl only interpolates scalar variables and array, not hashes. in addition, the interpolation is only applied to the double-quoted string, but not the single-quoted string.\nperl numbers perl has two kinds of numbers: integer and floating-point numbers.\nperl integers integers are whole numbers that have no digits after the decimal points i.e 10, -20 or 100.\nin perl, integers are often expressed as decimal integers, base 10. the following illustrates some integer numbers:\n#!/usr/bin/perl use warnings; use strict; $x = 20; $y = 100; $z = -200; when the integer number is big, you often use a comma as a separator to make it easier to read e.g., 123,763,213.\nhowever, perl already uses a comma (,) as a separator in the list so for integer numbers perl uses an underscore character (_) instead. in this case, 123,763,213 is written in perl as 123_763_213.\ntake a look at the following example:\nmy $a = 123_763_213; print($a, \u0026#34;\\n\u0026#34;); # 123763213 in the output of the example above, perl uses no comma or underscore as the separator.\nbesides the decimal format, perl also supports other formats including binary, octal, and hexadecimal.\nthe following table shows you prefixes for formatting with binary, octal, and hexadecimal integers.\nnumber format 0b123\nbinary integer using a prefix of 0b\n0255\noctal integer using a prefix of 0\n0xabc\nhexadecimal integer using a prefix of 0x\nall the following integer numbers are 12 in perl:\n12 0b1100 014 0xc perl floating-point numbers you use floating-point numbers to store real numbers. perl represents floating-point numbers in two forms:\nfixed point: the decimal point is fixed in the number to denote fractional part starts e.g., 100.25\nscientific: consists of a significand with the actual number value and an exponent representing the power of 10 that the significand is multiplied by, for example, +1.0025e2 or -1.0025e2 is 100.25.\nthe floating-point number holds 8 bytes, with 11 bits reserved for the exponent and 53 bits for significand.\nthe range of floating-point numbers is essentially determined by the standard c library of the underlying platform where perl is running.\nperl string perl’s built-in string functions to manipulate strings.\nintroduction to perl strings in perl, a string is a sequence of characters surrounded by some kind of quotation marks. a string can contain ascii, unicode, and escape sequences characters such as \\n.\na perl string has a length that depends on the amount of memory in your system, which is theoretically unlimited.\nthe following example demonstrates single and double-quoted strings.\nmy $s1 = \u0026#34;string with doubled-quotes\u0026#34;; my $s2 = \u0026#39;string with single quote\u0026#39;; it is important to remember that the double-quoted string replaces variables inside it by their values, while the single-quoted string treats them as text. this is known as variable interpolation in perl.\nperl string alternative delimiters besides the single and double quotes, perl also allows you to use quote-like operators such as:\nthe q// acts like a single-quoted string.\nthe qq// acts like double-quoted string.\nyou can choose any non-alphabetic and non-numeric characters as the delimiters, not only just characters //.\n#!/usr/bin/perl use warnings; use strict; my $s= q/\u0026#34;are you learning perl string today?\u0026#34; we asked./; print($s ,\u0026#34;\\n\u0026#34;); my $name = \u0026#39;jack\u0026#39;; my $s2 = qq/\u0026#34;are you learning perl string today?\u0026#34;$name asked./; print($s2 ,\u0026#34;\\n\u0026#34;); how it works.\nfirst, defined a single-quoted string variable with the quote-like operator q/. the string $s ends with /.\nsecond, defined a double-quoted string with the quote-like operator qq/. in this case, we used the $name variable inside a string and it is replaced by its value, jack.\nthe following example demonstrates string with the ^ delimiter.\n#!/usr/bin/perl use warnings; use strict; my $s = q^a string with different delimiter ^; print($s,\u0026#34;\\n\u0026#34;); perl string functions perl provides a set of functions that allow you to manipulate strings effectively. we cover the most commonly used string functions in the following section for your reference.\nperl string length to find the number of characters in a string, you use the length() function.\nmy $s = \u0026#34;this is a string\\n\u0026#34;; print(length($s),\u0026#34;\\n\u0026#34;); #17 changing cases of string to change the cases of a string you use a pair of functions lc() and uc() that returns the lowercase and uppercase versions of a string.\nmy $s = \u0026#34;change cases of a string\\n\u0026#34;; print(\u0026#34;to upper case:\\n\u0026#34;); print(uc($s),\u0026#34;\\n\u0026#34;); print(\u0026#34;to lower case:\\n\u0026#34;); print(lc($s),\u0026#34;\\n\u0026#34;); search for a substring inside a string to search for a substring inside a string, you use index() and rindex() functions.\nthe index() function searches for a substring inside a string from a specified position and returns the position of the first occurrence of the substring in the searched string. if the position is omitted, it searches from the beginning of the string.\nthe rindex() function works like the index() function except it searches from the end of the string instead of from the beginning.\nthe following example demonstrates how to use the index() and rindex() functions:\n#!/usr/bin/perl use warnings; use strict; my $s = \u0026#34;learning perl is easy\\n\u0026#34;; my $sub = \u0026#34;perl\u0026#34;; my $p = index($s,$sub); # rindex($s,$sub); print(qq\\the substring \u0026#34;$sub\u0026#34; found at position \u0026#34;$p\u0026#34; in string \u0026#34;$s\u0026#34;\\,\u0026#34;\\n\u0026#34;); get or modify substring inside a string to extract a substring out of a string, you use the substr() function.\n#!/usr/bin/perl use warnings; use strict; # extract substring my $s = \u0026#34;green is my favorite color\u0026#34;; my $color = substr($s, 0, 5); # green my $end = substr($s, -5); # color print($end,\u0026#34;:\u0026#34;,$color,\u0026#34;\\n\u0026#34;); # replace substring substr($s, 0, 5, \u0026#34;red\u0026#34;); #red is my favorite color print($s,\u0026#34;\\n\u0026#34;); other useful perl string functions the following table illustrates other useful perl string functions with their descriptions:\nfunction description chr\nreturn ascii or unicode character of a number\ncrypt\nencrypts passwords in one way fashion\nhex\nconverts a hexadecimal string to the corresponding value\nindex\nsearches for a substring inside a string returns position where the first occurrence of the substring found\nlc\nreturns a lowercase version of the string\nlength\nreturns the number of characters of a string\noct\nconverts a string to an octal number\nord\nreturns the numeric value of the first character of a string\nq/string/\ncreates single-quoted strings\nqq/string/\ncreates double-quoted strings\nreverse\nreverses a string\nrindex\nsearches for a substring from right to left\nsprintf\nformats string to be used with print()\nsubstr\ngets or modifies a substring in a string\nuc\nreturns the uppercase version of the string\nperl operator perl operators including numeric operators, string operators, and logical operators.\nnumeric operators perl provides numeric operators to help you operate on numbers including arithmetic, boolean and bitwise operations. let’s examine the different kinds of operators in more detail.\narithmetic operators perl arithmetic operators deal with basic math such as adding, subtracting, multiplying, diving, etc. to add (+) or subtract (-) numbers, you would do something as follows:\n#!/usr/bin/perl use warnings; use strict; print 10 + 20, \u0026#34;\\n\u0026#34;; # 30 print 20 - 10, \u0026#34;\\n\u0026#34;; # 10 to multiply or divide numbers, you use divide (/) and multiply (*) operators as follows:\n#!/usr/bin/perl use warnings; use strict; print 10 * 20, \u0026#34;\\n\u0026#34;; # 200 print 20 / 10, \u0026#34;\\n\u0026#34;; # 2 when you combine adding, subtracting, multiplying, and dividing operators together, perl will perform the calculation in an order, which is known as operator precedence.\nthe multiply and divide operators have higher precedence than add and subtract operators, therefore, perl performs multiplying and dividing before adding and subtracting. see the following example:\nprint 10 + 20/2 - 5 * 2 , \u0026#34;\\n\u0026#34;; # 10 perl performs 20/2 and 5*2 first, therefore you will get 10 + 10 – 10 = 10.\nyou can use brackets () to force perl to perform calculations based on the precedence you want as shown in the following example:\nprint (((10 + 20) / 2 - 5) * 2); # 20; to raise one number to the power of another number, you use the exponentiation operator.\nexponentiation operators: #!/usr/bin/perl use warnings; use strict; print 2**3, \u0026#34;\\n\u0026#34;; # = 2 * 2 * 2 = 8. print 3**4, \u0026#34;\\n\u0026#34;; # = 3 * 3 * 3 * 3 = 81. to get the remainder of the division of one number by another, you use the modulo operator (%).\nit is handy to use the modulo operator (%) to check if a number is odd or even by dividing it by 2 to get the remainder. if the remainder is zero, the number is even, otherwise, the number is odd. see the following example:\n#!/usr/bin/perl use warnings; use strict; print 4 % 2, \u0026#34;\\n\u0026#34;; # 0 even print 5 % 2, \u0026#34;\\n\u0026#34;; # 1 odd bitwise operators bitwise operators allow you to operate on numbers one bit at a time. think of a number as a series of bits e.g., 125 can be represented in binary form as 1111101. perl provides all basic bitwise operators including and (\u0026amp;), or (|), exclusive or (^) , not (~) operators, shift right (\u0026gt;\u0026gt;), and shift left (\u0026lt;\u0026lt;) operators.\nthe bitwise operators perform from right to left. in other words, bitwise operators perform from the rightmost bit to the leftmost bit.\nbitwise operations #!/usr/bin/perl use warnings; use strict; my $a = 0b0101; # 5 my $b = 0b0011; # 3 my $c = $a \u0026amp; $b; # 0001 or 1 print $c, \u0026#34;\\n\u0026#34;; $c = $a | $b; # 0111 or 7 print $c, \u0026#34;\\n\u0026#34;; $c = $a ^ $b; # 0110 or 6 print $c, \u0026#34;\\n\u0026#34;; $c = ~$a; # 11111111111111111111111111111010 (64bits computer) or 4294967290 print $c, \u0026#34;\\n\u0026#34;; $c = $a \u0026gt;\u0026gt; 1; # 0101 shift right 1 bit, 010 or 2 print $c, \u0026#34;\\n\u0026#34;; $c = $a \u0026lt;\u0026lt; 1; # 0101 shift left 1 bit, 1010 or 10 print $c, \u0026#34;\\n\u0026#34;; comparison operators for numbers equality operators equal\n==\nnot equal\n!=\ncomparison\n\u0026lt;⇒\nless than\n\u0026lt;\ngreater than\n\u0026gt;\nless than or equal\n⇐\ngreater than or equal\n\u0026gt;=\nall the operators in the table above are obvious except the number comparison operator \u0026lt;⇒ which is also known as spaceship operator.\nthe number comparison operator is often used in sorting numbers. see the code below:\n$a \u0026lt;=\u0026gt; $b 1 if $a is greater than $b\n0 if $a and $b are equal\n-1 if $a is lower than $b\nexample #!/usr/bin/perl use warnings; use strict; my $a = 10; my $b = 20; print $a \u0026lt;=\u0026gt; $b, \u0026#34;\\n\u0026#34;; $b = 10; print $a \u0026lt;=\u0026gt; $b, \u0026#34;\\n\u0026#34;; $b = 5; print $a \u0026lt;=\u0026gt; $b, \u0026#34;\\n\u0026#34;; string operators comparison operators equality operators equal\neq\nnot equal\nne\ncomparison\ncmp\nless than\nlt\ngreater than\ngt\nless than or equal\nle\ngreater than or equal\nge\nconcatenation operators perl provides the concatenation (.) and repetition (x) operators that allow you to manipulate strings\nconcatenation operator (.) print \u0026#34;this is\u0026#34; . \u0026#34; concatenation operator\u0026#34; . \u0026#34;\\n\u0026#34;; repetition operators (x) print \u0026#34;a message \u0026#34; x 4, \u0026#34;\\n\u0026#34;; the chomp() operator the chomp() operator (or function) removes the last character in a string and returns a number of characters that were removed. the chomp() operator is very useful when dealing with the user’s input because it helps you remove the new line character \\n from the string that the user entered.\n#!/usr/bin/perl use warnings; use strict; my $s; chomp($s = \u0026lt;stdin\u0026gt;); print $s; note the \u0026lt;stdin\u0026gt; is used to get input from users. logical operators logical operators are often used in control statements such as if, while, given, etc., to control the flow of the program. the following are logical operators in perl:\n$a \u0026amp;\u0026amp; $b performs the logic and of two variables or expressions. the logical \u0026amp;\u0026amp; operator checks if both variables or expressions are true.\n$a || $b performs the logic or of two variables or expressions. the logical || operator checks whether a variable or expression is true.\n!$a performs the logic not of the variable or expression. the logic ! operator inverts the value of the following variable or expression. in the other words, it converts true to false or false to true.\nperl list perl list and how to manipulate list elements using various techniques such as list slicing, ranging and qw() function.\na perl list is a sequence of scalar values. you use parenthesis and comma operators to construct a list. each value is the list is called list element. list elements are indexed and ordered. you can refer to each element by its position.\nsimple perl list (); (10,20,30); (\u0026#34;this\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;a\u0026#34;,\u0026#34;list\u0026#34;); in the example above: the first list () is an empty list.\nthe second list (10,20,30) is a list of integers.\nthe third list (\u0026#34;this\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;a\u0026#34;,\u0026#34;list\u0026#34;) is a list of strings.\neach element in the list is separated by a comma (,). the print` operator is a list operator. so let’s display our lists above with the print operator to see how it works:\n#!/usr/bin/perl use warnings; use strict; print(()); # display nothing print(\u0026#34;\\n\u0026#34;); print(10,20,30); # display 102030 print(\u0026#34;\\n\u0026#34;); print(\u0026#34;this\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;a\u0026#34;,\u0026#34;list\u0026#34;); # display: thisisalist print(\u0026#34;\\n\u0026#34;); we passed several lists to the print operator to display their elements. all the lists that we have seen so far contain an element with the same data type. these lists are called simple lists.\ncomplex perl list a perl list may contain elements that have different data types. this kind of list is called a complex list. let’s take a look at the following example:\n#!/usr/bin/perl use warnings; use strict; my $x = 10; my $s = \u0026#34;a string\u0026#34;; print(\u0026#34;complex list\u0026#34;, $x , $s ,\u0026#34;\\n\u0026#34;); using qw function perl provides the qw() function that allows you to get a list by extracting words out of a string using the space as a delimiter. the qw stands for quote word. the two lists below are the same:\n#!/usr/bin/perl use warnings; use strict; print(\u0026#39;red\u0026#39;,\u0026#39;green\u0026#39;,\u0026#39;blue\u0026#39;); # redgreenblue print(\u0026#34;\\n\u0026#34;); print(qw(red green blue)); # redgreenblue print(\u0026#34;\\n\u0026#34;); similar to the q/ and q// operators, you can use any non-alphanumeric character as a delimiter. the following lists are the same:\nqw\\this is a list\\; qw{this is a list}; qw[this is a list]; flattening list if you put a list, called an internal list, inside another list, perl automatically flattens the internal list. the following lists are the same:\n(2,3,4,(5,6)) (2,3,4,5,6) ((2,3,4),5,6) accessing list element you can access elements of a list by using the zero-based index. to access the nth element, you put (n – 1) index inside square brackets.\nlet’s take a look at the following example: #!/usr/bin/perl use warnings; use strict; print( (1,2,3)[0] # 1 first element ); print \u0026#34;\\n\u0026#34;; # new line print( (1,2,3)[2] # 3 third element ); print \u0026#34;\\n\u0026#34;; # new line to get multiple elements of a list at a time, you can put a list inside square brackets. this feature is called list slice. you can omit the parenthesis of the list inside the square bracket.\n(1,2,3,4,5)[0,2,3] # (1,3,4) the above code returns a list of three elements (1, 3, 4).\nranges perl allows you to build a list based on a range of numbers or characters e.g., a list of numbers from 1 to 100, a list of characters from a to z. the following example defines two lists:\n(1..100) (a..z) wip ","title":"Perl"},{"date":"2024-07-14","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/vim/vim/","summary":"","tags":["config","Vim","vim-lang","vimscript"],"text":"","title":"Vim"},{"date":"2024-07-06","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/grafana/","summary":"description\n","tags":["Grafana","Infrastructure","Logging","Monitoring","Telemetry"],"text":" warning this is some note, nothing serious. do not cite from this article.\ngrafana stack grafana offers many tools, which we’ve grouped into the following categories:\nthe core grafana stack: lgtm and the grafana agent\ngrafana enterprise plugins\nincident response tools\nother grafana tools\nthe core grafana stack the core grafana stack consists of mimir, loki, tempo, and grafana; the acronym lgtm is often used to refer to this tech stack.\nmimir mimir is a time series database (tsdb) for the storage of metric data. it uses low-cost object storage such as s3, gcs, or azure blob storage. mimir is a fully prometheus-compatible solution that addresses the common scalability problems encountered with storing and searching huge quantities of metric data.\nan active time series is a metric with a value and unique labels that has reported a sample in the last 20 minutes.\nloki loki is a set of components that offer a full feature logging stack. loki uses lower-cost object storage such as s3 or gcs, and only indexes label metadata.\nlog aggregation tools typically use two data structures to store log data. an index that contains references to the location of the raw data paired with searchable metadata, and the raw data itself stored in a compressed form.\nloki differs from a lot of other log aggregation tools by keeping the index data relatively small and scaling the search functionality by using horizontal scaling of the querying component.\ntempo tempo is a storage backend for high-scale distributed trace telemetry, with the aim of sampling 100% of the read path. like loki and mimir, it leverages lower-cost object storage such as s3, gcs, or azure blob storage.\ntempo also offers the ability to generate metrics from spans as they are ingested; these metrics can be written to any backend that supports prometheus remote write.\ngrafana grafana has been a staple for fantastic visualization of data since 2014. it has targeted the ability to connect to a huge variety of data sources from tsdbs to relational databases and even other observability tools. grafana has over 150 data source plugins available. grafana has a huge community using it for many different purposes. this community supports over 6,000 dashboards, which means there is a starting place for most available technologies with minimal time to value.\ngrafana agent grafana agent is a collection of tools for collecting logs, metrics, and traces. there are many other collection tools that grafana integrates well with.\ngrafana enterprise plugins these are part of any paid subscription to grafana.\nthe enterprise data source plugins allow organizations to read data from many other storage tools they may use, from software development tools such as gitlab and azure devops to business intelligence tools such as snowflake, databricks, and looker. grafana also offers tools to read data from many other observability tools, which enables organizations to build comprehensive operational coverage while offering individual teams a choice of the tools they use.\ngrafana incident response and management grafana offers three products in the incident response and management (irm) space:\nat the foundation of irm are alerting rules, which can notify via messaging apps, email, or grafana oncall\ngrafana oncall offers an on-call schedule management system that centralizes alert grouping and escalation routing\ngrafana incident offers a chatbot functionality that can set up necessary incident spaces, collect timelines for a post-incident review process, and even manage the incident directly from a messaging service\nother grafana tools grafana labs continues to be a leader in observability and has acquired several companies in this space to release new products that complement the tools we’ve already discussed.\nfaro grafana faro is a javascript agent that can be added to frontend web applications. the project allows for real user monitoring (rum) by collecting telemetry from a browser.\nby adding rum into an environment where backend applications and infrastructure are instrumented, observers gain the ability to traverse data from the full application stack.\nk6 k6 is a load testing tool that provides both a packaged tool to run in your own infrastructure and a cloud software as a service (saas) offering. load testing, especially as part of a ci/cd pipeline, really enables teams to see how their application will perform under load, and evaluate optimizations and refactoring. paired with other detailed analysis tools such as pyroscope, the level of visibility and accessibility to non-technical members of the team can be astounding.\npyroscope pyroscope is a tool that enable teams to engage in the continuous profiling of system resource use by applications (cpu, memory, etc.). pyroscope advertises that with a minimal overhead of ~2-5% of performance, they can collect samples as frequently as every 10 seconds. phlare is a grafana labs project started in 2022, and the two projects have now merged.\ncommon log formats logs support performance and capacity monitoring in infrastructure, bug detection in software, root cause analysis, user behavior tracking, and more. following certain guidelines will help your future self when you need to analyze logs.\nlog formats usually identify if they are structured or unstructured, the data types used in them, and if any encoding or delimitation is being used.\nstructured, semi-structured, and unstructured logging it does not matter what your logs look like and they can come in structured, semi-structured, or unstructured formats.\nwhen designing and building observability solutions, it’s important to understand the log formats you are working with. this ensures that you can ingest, parse, and store the data in a way that it can be used effectively.\nnote if you familiarized yourself with the personas, you have an awareness of who they will be used by and for what purpose.\nstructured logging structured logs have a predetermined message format that allows them to be treated as datasets rather than text. the idea of structured logging is to present data with a defined pattern that can be easily understood by humans and efficiently processed by machines. the log entries are often delimited with characters such as a comma, space, or hyphen. data fields may also be joined using an equals sign or colon for key-value pairs, such as name=diego or city=berlin.\na structured log format { \u0026#34;timestamp\u0026#34;: \u0026#34;2023-04-25t12:15:03.006z\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;user diego.developer has logged in\u0026#34;, \u0026#34;log\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;info\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;auth.py\u0026#34;, \u0026#34;line\u0026#34;: 77 }, \u0026#34;user\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;diego.developer\u0026#34;, \u0026#34;id\u0026#34;: 123 }, \u0026#34;event\u0026#34;: { \u0026#34;success\u0026#34;: true } } an additional benefit of structured logging is that you can validate the conformation of the data to a schema with tools such as json schema. this opens up the possibility of making version control changes to the schema, which is where logs and event bus technology overlap.\nsemi-structured logging semi-structured logs aim to bridge the gap between unstructured and structured and, as a result, can be quite complicated. they are designed to be easy for humans to read but also have a schema that makes it possible for machines to process them too. they have complex field and event separators and usually come with a defined pattern to aid with ingesting and parsing. parsing is usually done using regular expressions or other code.\nunstructured logging unstructured logging typically refers to log entries that are presented in a textual format that can easily be read by humans but is difficult for machines to process. they are often color-coded with blank spaces to improve presentation and readability.\nparsing and splitting the data correctly creates a disassociation between events and their identifying metadata. an unstructured log will require some custom parsing, requiring intimate knowledge of the data and often creating additional work for the engineer when ingesting data. this also creates technical liability; the dependency on the log remaining the same restricts developers from changing logs or runs the risk of parsing and reporting on unstructured logs prone to breaking.\nto aid the ability of machines to process unstructured logs, encapsulation prevents entries such as stack traces from splitting at an inappropriate location.\nthe following is an example of a multiline log, with a naive encapsulation that looks for line breaks; this will appear in logging systems as four distinct events:\n2023-04-25 12:15:03,006 info [svr042] usermembershipsiterable found 4 children for 4 groups in 3 ms begin transaction update record. process started. process completed. with encapsulation based on the timestamp at the start of the event, this will be stored correctly for searching.\nsample log formats many log formats have been used in computer systems. all of these formats have a common goal of presenting a standard structure or set of fields for recording important information about the activity of a computer system.\ncommon event format (cef) developed by arcsight to fulfill the security information and event management (siem) use case, the cef is a structured text-based log format. using utf-8 encoding, the format contains a prefix, a cef header, and a body containing additional enrichment data.\nlog section description prefix\nit combines the event timestamp and source hostname\ncef header\nit combines the following pieces of metadata:\nsoftware version\nvendor name\nproduct name\nproduct version\nevent name\nproduct event class identification code\nevent severity\nbody\nit contains a list of key-value pairs\nexample cef:0|security provider|security product|version|123|user authenticated|3|src=10.51.113.149 suser=diego target=diego msg=user authenticated from 1001:db7::5 ncsa common log format (clf) as one of the oldest log formats used by web servers, the ncsa clf has for a long time been the most common and well-known log formats. it has a fixed format text-based structure and therefore cannot be customized at all.\nhere is the ncsa clf field list: remote host address\nremote log name\nusername\ntimestamp\nrequest and protocol version\nhttp status code\nbytes sento\nwhere data is missing from the log, a hyphen acts as a placeholder. unsupported characters are replaced with the + symbol.\nhere is an example ncsa clf log: 127.0.0.1 user-identifier diego [25/apr/2023:12:15:03 -0000] \u0026#34;get / apache_pb.gif http/1.1\u0026#34; 200 2326 w3c extended log file format the microsoft internet information server log format known as w3c is a structured yet configurable format. full control over the included fields ensures log files contain the most relevant data. identification of the information or direction of flow is denoted using a string prefix: server (s), client ©, server to client (sc), and client to server (cs).\nhere is the w3c extended log file format field list: timestamp\nclient ip\nserver ip\nuri-stem\nhttp status code\nbytes sent\nbytes received\ntime taken\nversion\nhere is an example w3c log: #software: internet information services 10.0 #version: 1.0 #date: 2023-04-25 12:15:03 #fields: time c-ip cs-method cs-uri-stem sc-status cs-version 12:15:03 10.51.113.149 get /home.htm 200 http/1.0 windows event log the microsoft windows operating system comes with a built-in complex structured logging system that captures data related to specific events on the operating system. there are four common windows event log categories - system, application, security, and setup - and an additional special category for forwarded events.\neach event log is also one of five different types: information, warning, error, success audit, and failure audit. windows event log is one of the most verbose log formats in use. it usually includes details such as timestamp, event id, username, hostname, message, and category, making it invaluable in diagnosing problems. windows event ids are documented and searchable, so you can easily get detailed information regarding the log event; they are grouped into categories, narrowing down the area where the event occurred, which makes debugging very accurate.\nhere is a trimmed example of microsoft windows event log: an account was successfully logged on. subject: security id: system account name: desktop-tmc369$ account domain: workgroup logon id: 0xe37 logon information: new logon: security id: ad\\diegodeveloper account name: diego.developer@themelt.cafe account domain: ad logon id: 0xec4093f network information: workstation name: desktop-tmc369 javascript object notation (json) as one of the newer yet most commonly used log formats today, json is a structured format constructed from multiple key-value pairs. using json, data can be nested into different layers while keeping the format easy to read. additionally, different data types can be represented, such as string, number, boolean, null, object, and array.\nhere is an example json log file: { \u0026#34;timestamp\u0026#34;: \u0026#34;2023-04-25t12:15:03.006z\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;user diego.developer has logged in\u0026#34;, \u0026#34;log\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;info\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;auth.py\u0026#34;, \u0026#34;line\u0026#34;: 77 }, \u0026#34;user\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;diego.developer\u0026#34;, \u0026#34;id\u0026#34;: 123 }, \u0026#34;event\u0026#34;: { \u0026#34;success\u0026#34;: true } } syslog the go-to log format for many years and still widely used, syslog is a defined standard for creating and transmitting logs. the syslog transport protocol specifies how log transmission takes place, as well as the data format. the default network ports for the protocol are 514 and 6514, with the latter being used for encryption.\nthe syslog message format combines a standardized header and message holding the body of the log.\nhere is an example syslog log: apr 25 12:15:03 server1 sshd[41458] : failed password for diego from 10.51.113.149 port 22 ssh2 logfmt logfmt is a widely used log format that fits as human readable and structured so that computers and people can both read it. a logfmt-formatted log line consists of any number of key-value pairs that can be easily parsed. as there are no standards, it is easy to extend and perfect for developers to simply add more key-value pairs to the output.\nhere is an example logfmt log: level=info method=get path=/ host=myserver.me fwd=\u0026#34;10.51.113.149\u0026#34; service=4ms status=200 exploring metric types and best practices metrics, along with logs, are an essential tool for software developers and operators, providing them with indicators regarding the state of applications and systems. resource usage data is great for monitoring a metric that captures numerical data over time. there are many different types of resources but some good examples would be cpu or ram usage, the number of messages in a queue, and the number of received http requests. metrics are frequently generated and easily enriched with labels, attributes, or dimensions, making them efficient to search and ideal in determining if something is wrong, or different from usual.\na metric commonly has the following fields: name: this uniquely identifies the metric\ndata point value(s): the data that’s stored varies by metric type\ndimensions: additional enrichment labels or attributes that support analysis\nwip ","title":"Grafana"},{"date":"2024-05-31","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/","summary":"Configure kubernetes infrastructure with NodePort, ClusterIP, Ingress, nginx load-balancer\n","tags":["infrastructure","Ingress","K8S","LoadBalancer","NodePort"],"text":" warning this is some note, nothing serious. do not cite from this article.\ndownload this note as a pdf\nforwarding a local network port to a port in the pod when you want to talk to a specific pod without going through a service (for debugging or other reasons), kubernetes allows you to configure port forwarding to the pod.\nthis is done through the kubectl port-forward command. the following command will forward your machine’s local port 8888 to port 8080 of your e.g kubia-manual pod.\nexample: $ kubectl port-forward kubia-manual 8888:8080 output: ... forwarding from 127.0.0.1:8888 -\u0026gt; 8080 ... forwarding from [::1]:8888 -\u0026gt; 8080 connecting to the pod through the port forwarder in a different terminal, you can now use curl to send an http request to your pod through the kubectl port-forward proxy running on localhost:8888.\nexample: $ curl localhost:8888 output: you\u0026#39;ve hit kubia-manual service object each pod gets its own ip address, but this address is internal to the cluster and isn’t accessible from outside of it. to make the pod accessible from the outside, you’ll expose it through a service object. you’ll create a special service of type loadbalancer, because if you create a regular service (a clusterip service), like the pod, it would also only be accessible from inside the cluster. by creating a loadbalancer type service, an external load balancer will be created and you can connect to the pod through the load balancer’s public ip.\ncreating a service object to create the service, you’ll tell kubernetes to expose the replicationcontroller you created:\nusing yaml file manifest: apiversion: v1 kind: service metadata: name: kubia spec: ports: - port: 80 # service\u0026#39;s port targetport: 8080 # the forward-to port by service selector: # all pods labeled `kubia` will follow/select this service app: kubia apply the service: $ kubectl create -f kubia-srv.yaml using kubectl cli options template: $ kubectl expose rc \u0026lt;rep-controller-name\u0026gt; --type=loadbalancer --name \u0026lt;lb-name\u0026gt; expose: $ kubectl expose rc kubia --type=loadbalancer --name kubia-http output: service \u0026#34;kubia-http\u0026#34; exposed remotely executing commands in running containers: you’ll also need to obtain the cluster ip of your service (using kubectl get svc, for example)\n$ kubectl exec kubia-7nog1 -- curl -s http://10.111.249.153 output: you\u0026#39;ve hit kubia-gzwli session affinity on the service if you execute the same command a few more times, you should hit a different pod with every invocation, because the service proxy normally forwards each connection to a randomly selected backing pod, even if the connections are coming from the same client.\nif, on the other hand, you want all requests made by a certain client to be redirected to the same pod every time, you can set the service’s sessionaffinity property to clientip (instead of none, which is the default), as shown in the following listing.\nservice with clientip session affinity manifest apiversion: v1 kind: service spec: sessionaffinity: clientip ... kubernetes supports only two types of service session affinity: none and clientip.\nkubernetes services don’t operate at the http level. services deal with tcp and udp packets and don’t care about the payload they carry. because cookies are a construct of the http protocol, services don’t know about them, which explains why session affinity cannot be based on cookies.\nexposing multiple ports in the same service manifest apiversion: v1 kind: service metadata: name: kubia spec: ports: - name: http port: 80 targetport: 8080 - name: https port: 443 targetport: 8443 selector: app: kubia using named ports you can give a name to each pod’s port and refer to it by name in the service spec.\nspecifying port names in a pod definition manifest: kind: pod spec: containers: - name: kubia ports: - name: http containerport: 8080 - name: https containerport: 8443 referring to named ports in a service manifest: apiversion: v1 kind: service spec: ports: - name: http port: 80 targetport: http - name: https port: 443 targetport: https connecting to services living outside the cluster instead of having the service redirect connections to pods in the cluster, you want it to redirect to external ip(s) and port(s).\nthis allows you to take advantage of both service load balancing and service discovery. client pods running in the cluster can connect to the external service like they connect to internal services.\nservice endpoints services don’t link to pods directly. instead, a resource sits in between—the endpoints resource. you may have already noticed endpoints if you used the kubectl describe command on your service.\nfull details of a service: $ kubectl describe svc kubia output: name: kubia namespace: default labels: \u0026lt;none\u0026gt; selector: app=kubia type: clusterip ip: 10.111.249.153 port: \u0026lt;unset\u0026gt; 80/tcp endpoints: 10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080 session affinity: none no events. an endpoints resource (yes, plural) is a list of ip addresses and ports exposing a service. the endpoints resource is like any other kubernetes resource, so you can display its basic info with kubectl get.\n$ kubectl get endpoints kubia output: name endpoints age kubia 10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080 1h manually configuring service endpoints having the service’s endpoints decoupled from the service allows them to be configured and updated manually.\nif you create a service without a pod selector, kubernetes won’t even create the endpoints resource\nafter all, without a selector, it can’t know which pods to include in the service\nto create a service with manually managed endpoints, you need to create both a service and an endpoints resource\na service without a pod selector: external-service.yaml apiversion: v1 kind: service metadata: name: external-service # must match the endpoints name spec: ports: - port: 80 endpoints are a separate resource and not an attribute of a service\nbecause you created the service without a selector, the corresponding endpoints resource hasn’t been created automatically\na manually created endpoints resource: external-service-endpoints.yaml apiversion: v1 kind: endpoints metadata: name: external-service # must match the service name subsets: - addresses: - ip: 11.11.11.11 - ip: 22.22.22.22 ports: - port: 80 # target port of endpoints exposing services to external clients few ways to make a service accessible externally.\nnodeport service type\neach cluster node opens a port on the node itself (hence the name) and redirects traffic received on that port to the underlying service.\nthe service isn’t accessible only at the internal cluster ip and port, but also through a dedicated port on all nodes.\nloadbalancer service type, an extention of nodeport type\nthis makes the service accessible through a dedicated load balancer, provisioned from the cloud infrastructure kubernetes is running on.\nthe load balancer redirects traffic to the node port across all the nodes. clients connect to the service through the load balancer’s ip.\ncreate ingress resource, radically different mechanism for exposing multiple services through a single ip address\nit operates at the http level (network layer 7) and can thus offer more features than layer 4 services can\nusing a nodeport service by creating a nodeport service, you make kubernetes reserve a port on all its nodes (the same port number is used across all of them) and forward incoming connections to the pods that are part of the service.\nthis is similar to a regular service (their actual type is clusterip), but a nodeport service can be accessed not only through the service’s internal cluster ip, but also through any node’s ip and the reserved node port.\nthis will make more sense when you try interacting with a nodeport service.\na nodeport service definition: kubia-svc-nodeport.yaml apiversion: v1 kind: service metadata: name: kubia-nodeport spec: type: nodeport # service type ports: - port: 80 # service\u0026#39;s internal cluster ip port targetport: 8080 # target port of the backing pods nodeport: 30123 # service will listen on port 30123, each cluster nodes selector: app: kubia examine the nodeport service: $ kubectl get svc kubia-nodeport output: name cluster-ip external-ip port(s) age kubia-nodeport 10.111.254.223 \u0026lt;nodes\u0026gt; 80:30123/tcp 2m external-ip column shows \u0026lt;nodes\u0026gt;, indicating the service is accessible through the ip address of any cluster node. the port(s) column shows both the internal port of the cluster ip (80) and the node port (30123). the service is accessible at the following addresses:\n10.11.254.223:80\n\u0026lt;1st node’s ip\u0026gt;:30123\n\u0026lt;2nd node’s ip\u0026gt;:30123\nand so on\nusing jsonpath to get the ips of all your nodes you can find the ip in the json or yaml descriptors of the nodes. but instead of sifting through the relatively large json, you can tell kubectl to print out only the node ip instead of the whole service definition\n$ kubectl get nodes -o \\ jsonpath=\u0026#39;{.items[*].status.addresses[?(@.type==\u0026#34;externalip\u0026#34;)].address}\u0026#39; output: 130.211.97.55 130.211.99.206 once you know the ips of your nodes, you can try accessing your service through them.\n$ curl http://130.211.97.55:30123 output: you\u0026#39;ve hit kubia-ym8or $ curl http://130.211.99.206:30123 output: you\u0026#39;ve hit kubia-xueq1 exposing a service through an external load balancer kubernetes clusters running on cloud providers usually support the automatic provision of a load balancer from the cloud infrastructure. all you need to do is set the service’s type to loadbalancer instead of nodeport. the load balancer will have its own unique, publicly accessible ip address and will redirect all connections to your service. you can thus access your service through the load balancer’s ip address.\nif kubernetes is running in an environment that doesn’t support loadbalancer services, the load balancer will not be provisioned, but the service will still behave like a nodeport service. that’s because a loadbalancer service is an extension of a nodeport service. you’ll run this example on google kubernetes engine, which supports loadbalancer services. minikube doesn’t, at least not as of this writing.\ncreating a loadbalancer service a loadbalancer-type service: kubia-svc-loadbalancer.yaml apiversion: v1 kind: service metadata: name: kubia-loadbalancer spec: type: loadbalancer ports: - port: 80 targetport: 8080 selector: app: kubia the service type is set to loadbalancer instead of nodeport. you’re not specifying a specific node port, although you could (you’re letting kubernetes choose one instead).\nconnecting to the service through the load balancer $ kubectl get svc kubia-loadbalancer output name cluster-ip external-ip port(s) age kubia-loadbalancer 10.111.241.153 130.211.53.173 80:32143/tcp 1m session affinity and web browsers because your service is now exposed externally, you may try accessing it with your web browser. you’ll see something that may strike you as odd—the browser will hit the exact same pod every time. did the service’s session affinity change in the meantime? with kubectl explain, you can double-check that the service’s session affinity is still set to none, so why don’t different browser requests hit different pods, as is the case when using curl?\nlet me explain what’s happening. the browser is using keep-alive connections and sends all its requests through a single connection, whereas curl opens a new connection every time. services work at the connection level, so when a connection to a service is first opened, a random pod is selected and then all network packets belonging to that connection are all sent to that single pod. even if session affinity is set to none, users will always hit the same pod (until the connection is closed).\nunderstanding the peculiarities of external connections you must be aware of several things related to externally originating connections to services.\nunderstanding and preventing unnecessary network hops when an external client connects to a service through the node port (this also includes cases when it goes through the load balancer first), the randomly chosen pod may or may not be running on the same node that received the connection. an additional network hop is required to reach the pod, but this may not always be desirable.\nyou can prevent this additional hop by configuring the service to redirect external traffic only to pods running on the node that received the connection. this is done by setting the externaltrafficpolicy field in the service’s spec section\nspec: externaltrafficpolicy: local ... being aware of the non-preservation of the client’s ip usually, when clients inside the cluster connect to a service, the pods backing the service can obtain the client’s ip address. but when the connection is received through a node port, the packets\u0026#39; source ip is changed, because source network address translation (snat) is performed on the packets.\nthe backing pod can’t see the actual client’s ip, which may be a problem for some applications that need to know the client’s ip. in the case of a web server, for example, this means the access log won’t show the browser’s ip.\nthe local external traffic policy described in the previous section affects the preservation of the client’s ip, because there’s no additional hop between the node receiving the connection and the node hosting the target pod (snat isn’t performed).\nexposing services externally through an ingress resource you must be aware of several things related to externally originating connections to services.\nunderstanding why ingresses are needed each loadbalancer service requires its own load balancer with its own public ip address, whereas an ingress only requires one, even when providing access to dozens of services\nwhen a client sends an http request to the ingress, the host and path in the request determine which service the request is forwarded to\ningresses operate at the application layer of the network stack (http) and can provide features such as cookie-based session affinity and the like, which services can’t\nunderstanding that an ingress controller is required to make ingress resources work, an ingress controller needs to be running in the cluster.\ncreating an ingress resource an ingress resource definition: kubia-ingress.yaml apiversion: extensions/v1beta1 kind: ingress metadata: name: kubia spec: rules: - host: kubia.example.com # maps the domain name to your service http: paths: - path: / # all requests will be sent to port 80 backend: # of the kubia-nodeport service. servicename: kubia-nodeport # serviceport: 80 # this defines an ingress with a single rule, which makes sure all http requests received by the ingress controller, in which the host kubia.example.com is requested, will be sent to the kubia-nodeport service on port 80.\nnote ingress controllers on cloud providers (in gke, for example) require the ingress to point to a nodeport service. but that’s not a requirement of kubernetes itself. accessing the service through the ingress to access your service through http://kubia.example.com, you’ll need to make sure the domain name resolves to the ip of the ingress controller\nobtaining the ip address of the ingress: $ kubectl get ingresses output: name hosts address ports age kubia kubia.example.com 192.168.99.100 80 29m note when running on cloud providers, the address may take time to appear, because the ingress controller provisions a load balancer behind the scenes.\nthe ip is shown in the address column.\ntip once you know the ip, you can then either configure your dns servers to resolve kubia.example.com to that ip or you can setup hosts: add the following line to /etc/hosts (or c:\\windows\\system32\\drivers\\etc\\hosts on windows):\n/etc/hosts 192.168.99.100\tkubia.example.com so you can access the service at http://kubia.example.com using a browser or curl\nunderstading how ingress work the client first performed a dns lookup of kubia.example.com, and the dns server (or the local operating system) returned the ip of the ingress controller\nthe client then sent an http request to the ingress controller and specified kubia.example.com in the host header\nfrom that header, the controller determined which service the client is trying to access, looked up the pod ips through the endpoints object associated with the service, and forwarded the client’s request to one of the pods.\nthe ingress controller don’t forward the request to the service\nit only use it to select a pod\nmost, if not all, controllers work like this\nexposing multiple services through the same ingress both rules and paths are arrays, so they can contain multiple items\nmapping different services to different paths of the same host ","title":"Accessing K8S pods"},{"date":"2024-05-31","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/webserver/","summary":"Create a web-server using just golang's stdlib `\"net/http\"`\n","tags":["Go","HTTP","JSON","Redis","RESTFul","SQL"],"text":" warning this is some note, nothing serious. do not cite from this article.\nwe need \u0026#34;net/http\u0026#34; module to create webserver and listen to the specified port.\nimport ( \u0026#34;net/http\u0026#34; ) we also might need these modules as well:\n\u0026#34;encoding/json\u0026#34; too for parsing json data\n\u0026#34;database/sql\u0026#34; and \u0026#34;github.com/go-sql-driver/mysql\u0026#34; to handle (my)sql/mariadb part\n\u0026#34;github.com/redi/go-redis/v9\u0026#34; to handle redis-cache\nwe need a request handler struct for the http server to be able to work.\ntype requesthandler struct {} and now we define the http server. it needs a servehttp() function and paths that needs to be handled (http requests goes to the specified paths)\nmain funcion func main() { mux := http.newservemx() mux.handle(\u0026#34;/path1\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path1/\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path2\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path2/\u0026#34;, \u0026amp;requesthandler{}) /* continue */ http.listenandserve(\u0026#34;:8080\u0026#34;, mux) } serve function func (h *requesthandler) servehttp(w http.responsewriter, r *http.requset) { request_type := r.method tmp := strings.splitn(r.url.string(), \u0026#34;/\u0026#34;, 3) section := tmp[1] // path key := tmp[2] // add data after the path params := r.url.query() value := params.get(key) body, err := io.readall(r.body) // values from curl\u0026#39;s `--data` flag (spected to be json) /* continue */ } redis handler func cache_handler() { client := redis.newclient(\u0026amp;redis.options{ addr: \u0026#34;localhost:6349\u0026#34; password: \u0026#34;\u0026#34; // no password, to get it from env variables use: `os.getenv(\u0026#34;env\u0026#34;)` db: 0 // default db }) } mysql handler func database_handler() { sql_url := \u0026#34;root@localhost:3360\u0026#34; db, err := sql.open(\u0026#34;mysql\u0026#34;, sql_url) if err != nil { pandic(err.error()) } defer db.close() /* continue */ } json parser - unmarshal type movie struct { name string `json:\u0026#34;name\u0026#34;` publisher string `json:\u0026#34;publisher\u0026#34;` year int `json:\u0026#34;year\u0026#34;` } func handlemovie() { // var target map[string]any /* not optimal */ var movie movie input := `{ \u0026#34;name\u0026#34;: \u0026#34;jocker\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;wb\u0026#34;, \u0026#34;year\u0026#34;: 2019 }` // err := json.unmarshal([]byte(input), \u0026amp;target) /* not optimal */ err := json.unmarshal([]byte(input), \u0026amp;movie) /* not optimal */ if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } /* not optimal */ // for k, v := range target { // fmt.printf(\u0026#34;k: %s, v: %v\\n\u0026#34;, k, v) // } fmt.printf( \u0026#34;name: %s, publisher: %s, year: %d\\n\u0026#34;, movie.name, movie.publisher, movie.year, ) } complex json assets/complex.json { \u0026#34;name\u0026#34;: \u0026#34;james peterson\u0026#34;, \u0026#34;age\u0026#34;: 37, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;block 78 woodgrove avenue 5\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;unit #05-111\u0026#34;, \u0026#34;postal\u0026#34;: \u0026#34;654378\u0026#34; }, \u0026#34;pets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;lex\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;dog\u0026#34;, \u0026#34;age\u0026#34;: 4, \u0026#34;color\u0026#34;: \u0026#34;gray\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;faye\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;cat\u0026#34;, \u0026#34;age\u0026#34;: 6, \u0026#34;color\u0026#34;: \u0026#34;orange\u0026#34; } ] } examples/complex_json/main.go type ( fullperson struct { address address name string pets []pet age int } pet struct { name string kind string color string age int } address struct { line1 string line2 string postal string } ) func main() { b, err := os.readfile(\u0026#34;assets/complex.json\u0026#34;) if err != nil { log.fatalf(\u0026#34;unable to read file due to %s\\n\u0026#34;, err) } var person fullperson err = json.unmarshal(b, \u0026amp;person) if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } litter.dump(person) } common pitfalls with json unmarshalling in go extra fields are omitted in the target struct\nmissing fields fallback to zero values\nunmarshalling is case insensitive\nfield names must match json keys exactly\ntype aliases are preserved\njson parser - marshal the json.marshal() method does the opposite of unmarshal() by converting a given data structure into a json.\nexamples/basic_marshal/main.go func marshal(in any) []byte { out, err := json.marshal(in) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } return out } func main() { first := marshal(14) second := marshal(\u0026#34;hello world\u0026#34;) third := marshal([]float32{1.66, 6.86, 10.1}) fourth := marshal(map[string]int{\u0026#34;num\u0026#34;: 15, \u0026#34;other\u0026#34;: 17}) fmt.printf( \u0026#34;first: %s\\nsecond: %s\\nthird: %s\\nfourth: %s\\n\u0026#34;, first, second, third, fourth, ) } structs func main() { p := person{ name: \u0026#34;john jones\u0026#34;, age: 26, email: \u0026#34;johnjones@email.com\u0026#34;, phone: \u0026#34;89910119\u0026#34;, hobbies: []string{ \u0026#34;swimming\u0026#34;, \u0026#34;badminton\u0026#34;, }, } b, err := json.marshal(p) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } fmt.println(string(b)) } note if you wish to format the json object, you can use the marshalindent() method which performs the same function as marshal() but applies some indentation to format the output. customizing json field names with struct tags type dog struct { breed string name string favoritetreat string age int } var dog = dog{ breed: \u0026#34;golden retriever\u0026#34;, age: 8, name: \u0026#34;paws\u0026#34;, favoritetreat: \u0026#34;kibble\u0026#34;, } type dog struct { breed string `json:\u0026#34;breed\u0026#34;` name string `json:\u0026#34;name\u0026#34;` favoritetreat string `json:\u0026#34;favorite_treat\u0026#34;` age int `json:\u0026#34;age\u0026#34;` } func main() { input := `{ \u0026#34;name\u0026#34;: \u0026#34;coffee\u0026#34;, \u0026#34;breed\u0026#34;: \u0026#34;toy poodle\u0026#34;, \u0026#34;age\u0026#34;: 5, \u0026#34;favorite_treat\u0026#34;: \u0026#34;kibble\u0026#34; }` var coffee dog err := json.unmarshal([]byte(input), \u0026amp;coffee) if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } litter.dump(coffee) } other uses of struct tags omit an empty field (one with its zero value in go) type user struct { username string `json:\u0026#34;username\u0026#34;` password string `json:\u0026#34;-\u0026#34;` email string `json:\u0026#34;email\u0026#34;` hobbies []string `json:\u0026#34;hobbies,omitempty\u0026#34;` } validating json data func main() { good := `{\u0026#34;name\u0026#34;: \u0026#34;john doe\u0026#34;}` bad := `{name: \u0026#34;john doe\u0026#34;}` fmt.println(json.valid([]byte(good))) fmt.println(json.valid([]byte(bad))) } defining custom behavior - marshal / unmarshal data in go, you can define custom behavior for marshalling data by implementing the json.marshaler interface. this interface defines a single method, marshaljson() which takes no arguments and returns a byte slice and an error.\nto implement the json.marshaler interface, you need to define a new type that wraps the original type you want to marshal. this new type should have a method named marshaljson() that returns a byte slice and an error.\nexamples/custom_timestamp/main.go type ( customtime struct { time.time } baby struct { birthdate customtime `json:\u0026#34;birth_date\u0026#34;` name string `json:\u0026#34;name\u0026#34;` gender string `json:\u0026#34;gender\u0026#34;` } ) in the above snippet, we defined a new customtime type that wraps a time.time value. in is subsequently used in the baby struct as the type of the birthdate value.\nhere’s an example that marshals a value of type baby below:\nfunc main() { baby := baby{ name: \u0026#34;johnny\u0026#34;, gender: \u0026#34;male\u0026#34;, birthdate: customtime{ time.date(2023, 1, 1, 12, 0, 0, 0, time.now().location()), }, } b, err := json.marshal(baby) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } fmt.println(string(b)) } notice how the birth_date presented in the rfc 3339 format. you can now define the custom marshalling behavior that will return a different format for customtime values (such as dd-mm-yyyy) instead of the default rfc 3339 timestamp format.\nyou only need to define a marshaljson() method for the type as shown below:\nexamples/custom_timestamp/main.go func (ct customtime) marshaljson() ([]byte, error) { return []byte(fmt.sprintf(`%q`, ct.time.format(\u0026#34;02-01-2006\u0026#34;))), nil } ","title":"Golang stdlib - Webserver"},{"date":"2024-05-26","image":"","imageAlt":"","link":"https://hossein-lap.github.io/welcome/","summary":"Welcome to my blog. I’m Hossein and I’ll be posting myown notes, ideas, programs. A programmer / DevOps engineer with passions about open-source software and trees.\nAlso, I use vim btw ;)\nProgramming Languages Lua, Go, C, Bash\nTools Linux, Git, QEMU/KVM, Docker, K8S, Ansible, tmux\nMarkup / Typesetting Languages LaTeX, Groff, Asciidoc(tor), Markdown\nHobbies Coding, Biking, Volleyball, Fishing","tags":[],"text":" welcome to my blog. i’m hossein and i’ll be posting myown notes, ideas, programs. a programmer / devops engineer with passions about open-source software and trees.\nalso, i use vim btw ;)\nprogramming languages lua, go, c, bash\ntools linux, git, qemu/kvm, docker, k8s, ansible, tmux\nmarkup / typesetting languages latex, groff, asciidoc(tor), markdown\nhobbies coding, biking, volleyball, fishing\n","title":"WIP"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/lua/lua/","summary":"Lua is a powerful, fast, lightweight and embeddable programming language.\nIt is used by many frameworks, games and other applications.\n","tags":["Embedded","Game","Lua","Plugin"],"text":" lua is a powerful, fast, lightweight and embeddable programming language. it is used by many frameworks, games and other applications. while it can be used by itself, it has been designed to be easy to embed in another application. it is implemented in ansi c, a subset of c programming language that is very portable, which means it can run on many systems and many devices where the most other scripting languages would not be able to run.\n\u0026#34;lua\u0026#34; (pronounced loo-ah) means \u0026#34;moon\u0026#34; in portuguese. as such, it is neither an acronym nor an abbreviation, but a noun. lua comes from two languages: del and sol. del means \u0026#34;data entry language\u0026#34;, while sol means \u0026#34;simple object language\u0026#34; and also means sun in portuguese.\none of main advantages of lua is its simplicity. programming which is also called scripting in the case of programs that run inside an embedded applications, is the process of writing computer program. a programming language is a language used to give instructions to a computer through computer code that is contained in a computer program. a programming language consists of two things: a syntax, which is like grammar in english, and libraries, basic functions provided with the language. these libraries could be compared with vocabulary in english.\nhello world! lua can either be used embedded in an application or by itself. the first example of lua code in this book will be the basic and traditional hello world program.\na \u0026#34;hello world\u0026#34; program is a computer program that outputs \u0026#34;hello, world\u0026#34; on a display device. because it is typically one of the simplest programs possible in most programming languages, it is by tradition often used to illustrate to beginners the most basic syntax of a programming language, or to verify that a language or system is operating correctly.\nprint(\u0026#34;hello world!\u0026#34;) the code above prints the text hello, world! to the output. it does so by calling the print function with the string \u0026#34;hello, world!\u0026#34; as an argument.\nsyntax syntax of a programming language defines how statements and expressions must be written in that programming language, just like grammar defines how sentences and words must be written. statements and expressions can be respectively compared to sentences and words.\nlua is a dynamically typed language intended for use as an extension language or scripting language.\nstatements and expressions can be respectively compared to sentences and words. expressions are pieces of code that have a value and that can be evaluated, while statements are pieces of code that can be executed and contain an instruction with one or many expressions to use that instruction with.\nfor example, 3 + 5 is an expression and variable = 3 + 5 is a statement that sets the value of variable to that expression.\n-- different types local x = 10 -- number local name = \u0026#34;neo\u0026#34; -- string local is_alive = false -- boolean local a = nil -- no value or invalid value obtaining lua lua can be obtained on the official lua website, on the download page.\nbasics if you are using the stand-alone lua interpreter, all you have to do to run your first program is to call the interpreter -usually named lua or lua5.3/lua5.4- with the name of the text file that contains your program. if you save the hello world program in a file hello.lua, the following command should run it:\n$ lua hello.lua as a more complex example, the next program defines a function to compute the factorial of a given number, asks the user for a number, and prints its factorial:\n-- defines a factorial function function fact (n) if n == 0 then return 1 else return n * fact(n - 1) end end print(\u0026#34;enter a number:\u0026#34;) a = io.read(\u0026#34;*n\u0026#34;) -- reads a number print(fact(a)) chuncks we call each piece of code that lua executes, such as a file or a single line in interactive mode, a chunk. a chunk is simply a sequence of commands (or statements).\na chunk can be as simple as a single statement, such as in the \u0026#34;hello world\u0026#34; example, or it can be composed of a mix of statements and function definitions (which are actually assignments, as we will see later), such as the factorial example.\ninstead of writing your program to a file, you can run the stand-alone interpreter in interactive mode. if you call lua without any arguments, you will get its prompt:\n$ lua lua 5.4.4 copyright (c) 1994-2022 lua.org, puc-rio \u0026gt; thereafter, each command that you type (such as print \u0026#34;hello world\u0026#34;) executes immediately after you enter it. to exit the interactive mode and the interpreter, just type the end-of-file control character (ctrl-d in posix, ctrl-z in windows), or call the function os.exit, from the operating system library - you have to type os.exit().\nstarting in version 5.4, we can enter expressions directly in the interactive mode, and lua will print their values:\n$ lua lua 5.4.4 copyright (c) 1994-2022 lua.org, puc-rio \u0026gt; math.pi / 4 --\u0026gt; 0.78539816339745 \u0026gt; a = 15 \u0026gt; a ^ 2 --\u0026gt; 225 \u0026gt; a + 2 --\u0026gt; 17 in older versions, we need to precede these expressions with an equals sign:\n$ lua5.2 lua 5.2.3 copyright (c) 1994-2013 lua.org, puc-rio \u0026gt; a = 15 \u0026gt; = a ^ 2 --\u0026gt; 225 for compatibility, lua 5.4 still accepts these equals signs.\nto run that code as a chunk (not in interactive mode), we must enclose the expressions inside calls to print:\nprint(math.pi / 4) --\u0026gt; 0.78539816339745 a = 15 print(a ^ 2) --\u0026gt; 225 print(a + 2) --\u0026gt; 17 lua usually interprets each line that we type in interactive mode as a complete chunk or expression. however, if it detects that the line is not complete, it waits for more input, until it has a complete chunk. this way, we can enter a multi-line definition, such as the factorial function, directly in interactive mode. however, it is usually more convenient to put such definitions in a file and then call lua to run the file.\nwe can use the -i option to instruct lua to start an interactive session after running a given chunk:\n$ lua -i prog a command line like this one will run the chunk in the file prog and then prompt for interaction. this is especially useful for debugging and manual testing.\nanother way to run chunks is with the function dofile, which immediately executes a file. for instance, suppose we have a file lib1.lua with the following code:\nfunction norm (x, y) return math.sqrt(x^2 + y^2) end function twice (x) return 2.0 * x end then, in interactive mode, we can type this code:\n\u0026gt; dofile(\u0026#34;lib1.lua\u0026#34;) -- load our library \u0026gt; n = norm(3.4, 1.0) \u0026gt; twice(n) --\u0026gt; 7.0880180586677 the function dofile is useful also when we are testing a piece of code. we can work with two windows: one is a text editor with our program (in a file prog.lua, say) and the other is a console running lua in interactive mode. after saving a modification in our program, we execute dofile(\u0026#34;prog.lua\u0026#34;) in the lua console to load the new code; then we can exercise the new code, calling its functions and printing the results.\nsome lexical conventions identifiers (or names) in lua can be any string of letters, digits, and underscores, not beginning with a digit; for instance\ni\nj\ni10\n_ij\nasomewhatlongname\n_input\nyou should avoid identifiers starting with an underscore followed by one or more upper-case letters (e.g., _version); they are reserved for special uses in lua. usually, i reserve the identifier _ (a single underscore) for dummy variables.\nthe following words are reserved; we cannot use them as identifiers:\nand end if or until break false in repeat while do for local return else function nil then elseif goto not true lua is case-sensitive and is a reserved word, but and and and are two different identifiers.\ncomments a comment is a code annotation that is ignored by the programming language. comments can be used to describe one or many lines of code, to document a program, to temporarily disable code, or for any other reason.\nthey need to be prefixed by two hyphens to be recognized by lua and they can be put either on their own line or at the end of another line:\nprint(\u0026#34;this is normal code.\u0026#34;) -- this is a comment print(\u0026#34;this is still normal code.\u0026#34;) -- comment at the end of a line of code. these comments are called short comments. it is also possible to create long comments, which start with a long bracket and can continue on many lines:\nprint(\u0026#34;this is normal code\u0026#34;) --[[line 1 line 2 ]] long brackets consist of two brackets in the middle of which any number of equality signs may be put. that number is called the level of the long bracket. long brackets will continue until the next bracket of the same level, if there is one.\na long bracket with no equal sign is called a long bracket of level 0. this approach makes it possible to use closing double brackets inside of long comments by adding equal signs in the middle of the two brackets. it is often useful to do this when using comments to disable blocks of code.\n--[==[ this is a comment that contains a closing long bracket of level 0 which is here: ]] however, the closing double bracket doesn\u0026#39;t make the comment end, because the comment was opened with an opening long bracket of level 2, and only a closing long bracket of level 2 can close it. ]==] in the example above, the closing long bracket of level 0 (]]) does not close the comment, but the closing long bracket of level 2 (]==]) does.\nlong comments can be more complex than that, as we will see in the section called \u0026#34;long strings\u0026#34;.\nexpressions expressions are pieces of code that have a value and that can be evaluated. they cannot be executed directly (with the exception of function calls), and thus, a script that would contain only the following code, which consists of an expression, would be erroneous:\n3 + 5 the code above is erroneous because all it contains is an expression. the computer cannot execute 3 + 5, since that does not make sense.\ncode must be comprised of a sequence of statements. these statements can contain expressions which will be values the statement has to manipulate or use to execute the instruction.\nsome code examples in this chapter do not constitute valid code, because they consist of only expressions. in the next chapter, statements will be covered and it will be possible to start writing valid code.\nlua needs no separator between consecutive statements, but we can use a semicolon if we wish. line breaks play no role in lua’s syntax; for instance, the following four chunks are all valid and equivalent:\na = 1 b = a * 2 a = 1; b = a * 2; a = 1; b = a * 2 a = 1 b = a * 2 -- ugly, but valid global variables global variables do not need declarations; we simply use them. it is not an error to access a non-initialized variable; we just get the value nil as the result:\n\u0026gt; b --\u0026gt; nil \u0026gt; b = 10 \u0026gt; b --\u0026gt; 10 if we assign nil to a global variable, lua behaves as if we have never used the variable:\n\u0026gt; b = nil \u0026gt; b --\u0026gt; nil lua does not differentiate a non-initialized variable from one that we assigned nil. after the assignment, lua can eventually reclaim the memory used by the variable.\ntypes and values lua is a dynamically-typed language. there are no type definitions in the language; each value carries its own type.\nthere are eight basic types in lua: nil, boolean, number, string, userdata, function, thread, and table. the function type gives the type name of any given value:\n\u0026gt; type(nil) --\u0026gt; nil \u0026gt; type(true) --\u0026gt; boolean \u0026gt; type(10.4 * 3) --\u0026gt; number \u0026gt; type(\u0026#34;hello world\u0026#34;) --\u0026gt; string \u0026gt; type(io.stdin) --\u0026gt; userdata \u0026gt; type(print) --\u0026gt; function \u0026gt; type(type) --\u0026gt; function \u0026gt; type({}) --\u0026gt; table \u0026gt; type(type(x)) --\u0026gt; string the last line will result in “string” no matter the value of x, because the result of type is always a string.\nthe userdata type allows arbitrary c data to be stored in lua variables. it has no predefined operations in lua, except assignment and equality test. userdata are used to represent new types created by an application program or a library written in c; for instance, the standard i/o library uses them to represent open files. we will discuss more about userdata later, when we get to the c api.\nvariables have no predefined types; any variable can contain values of any type:\n\u0026gt; type(a) --\u0026gt; nil (\u0026#39;a\u0026#39; is not initialized) \u0026gt; a = 10 \u0026gt; type(a) --\u0026gt; number \u0026gt; a = \u0026#34;a string!!\u0026#34; \u0026gt; type(a) --\u0026gt; string \u0026gt; a = nil \u0026gt; type(a) --\u0026gt; nil the list of data types for values are given below.\ntype description\nnil used to differentiate the value from having some data or no(nil) data.\nboolean includes true and false as values. generally used for condition checking.\nnumber represents real(double precision floating point) numbers.\nstring represents array of characters.\nfunction represents a method that is written in c or lua.\nuserdata represents arbitrary c data.\nthread represents independent threads of execution and it is used to implement coroutines.\ntable represent ordinary arrays, symbol tables, sets, records, graphs, trees, etc., and implements associative arrays. it can hold any value (except nil).\nusually, when we use a single variable for different types, the result is messy code. however, sometimes the judicious use of this facility is helpful, for instance in the use of nil to differentiate a normal return value from an abnormal condition.\nby default, all the variables will point to nil until they are assigned a value or initialized.\nwe will discuss now the simple types nil and boolean.\nnil nil is a type with a single value, nil, whose main property is to be different from any other value. lua uses nil as a kind of non-value, to represent the absence of a useful value. as we have seen, a global variable has a nil value by default, before its first assignment, and we can assign nil to a global variable to delete it.\nbooleans the boolean type has two values, false and true, which represent the traditional boolean values. however, booleans do not hold a monopoly of condition values: in lua, any value can represent a condition. conditional tests (e.g., conditions in control structures) consider both the boolean false and nil as false and anything else as true. in particular, lua considers both zero and the empty string as true in conditional tests.\nthroughout this book, i will write \u0026#34;false\u0026#34; to mean any false value, that is, the boolean false or nil. when i mean specifically the boolean value, i will write \u0026#34;false\u0026#34;. the same holds for \u0026#34;true\u0026#34; and “true”.\nlua supports a conventional set of logical operators: and, or, and not. like control structures, all logical operators consider both the boolean false and nil as false, and anything else as true. the result of the and operator is its first operand if that operand is false; otherwise, the result is its second operand. the result of the or operator is its first operand if it is not false; otherwise, the result is its second operand:\n\u0026gt; 4 and 5 --\u0026gt; 5 \u0026gt; nil and 13 --\u0026gt; nil \u0026gt; false and 13 --\u0026gt; false \u0026gt; 0 or 5 --\u0026gt; 0 \u0026gt; false or \u0026#34;hi\u0026#34; --\u0026gt; \u0026#34;hi\u0026#34; \u0026gt; nil or false --\u0026gt; false both and and or use short-circuit evaluation, that is, they evaluate their second operand only when necessary. short-circuit evaluation ensures that expressions like (i ~= 0 and a/i \u0026gt; b) do not cause run-time errors: lua will not try to evaluate a / i when i is zero.\na useful lua idiom is x = x or v, which is equivalent to\nif not x then x = v end that is, it sets x to a default value v when x is not set (provided that x is not set to false).\nanother useful idiom is ((a and b) or c) or simply (a and b or c) (given that and has a higher precedence than or). it is equivalent to the c expression a ? b : c, provided that b is not false. for instance, we can select the maximum of two numbers x and y with the expression (x \u0026gt; y) and x or y. when x \u0026gt; y, the first expression of the and is true, so the and results in its second operand (x), which is always true (because it is a number), and then the or expression results in the value of its first operand, x. when x \u0026gt; y is false, the and expression is false and so the or results in its second operand, y.\nthe not operator always gives a boolean value:\n\u0026gt; not nil --\u0026gt; true \u0026gt; not false --\u0026gt; true \u0026gt; not 0 --\u0026gt; false \u0026gt; not not 1 --\u0026gt; true \u0026gt; not not nil --\u0026gt; false the following operators are often used with boolean values, but can also be used with values of any data type:\noperation syntax description boolean negation\nnot a\nif a is false or nil, returns true. otherwise, returns false.\nlogical conjunction\na and b\nreturns the first argument if it is false or nil. otherwise, returns the second argument.\nlogical disjunction\na or b\nreturns the first argument if it is neither false nor nil. otherwise, returns the second argument.\nessentially, the not operator just negates the boolean value (makes it false if it is true and makes it true if it is false), the and operator returns true if both are true and false if not and the or operator returns true if either of arguments is true and false otherwise.\nlocal is_alive = true print(is_alive) -- true local is_alive = false print(is_alive) -- false numbers numbers generally represent quantities, but they can be used for many other things. the number type in lua works mostly in the same way as real numbers.\nnumbers can be constructed as integers, decimal numbers, decimal exponents or even in hexadecimal. here are some valid numbers:\n3\n3.0\n3.1416\n314.16e-2\n0.31416e1\n0xff\n0x56\n-- the lua local a = 1 local b = 2 local c = a + b print(c) -- 3 local d = b - a print(d) local x = 1 * 3 * 4 -- 12 print(x) local y = (1+3) * 2 -- 8 print(y) print(10 / 2) -- 5 print(2 ^ 2) -- 4 print(5 % 2) -- 1 print(-b) -- -2 -- incerment local level = 1 level = level + 1 print(level) arithmetic operations the operators for numbers in lua are the following:\noperation syntax description example arithmetic negation\n-a\nchanges the sign of a and returns the value\n-3.14159\naddition\na + b\nreturns the sum of a and b\n5.2 + 3.6\nsubtraction\na - b\nsubtracts b from a and returns the result\n5.2 + 3.6\nmultiplication\na * b\nreturns the product of a and b\n3.2 _ 1.5\nexponentiation\na ^ b\nreturns a to the power b, or the exponentiation of a by b\n5 ˆ 2\ndivision\na / b\ndivides a by b and returns the result\n6.4 / 2\nmodulus operation\na % b\nreturns the remainder of the division of a by b\n5 % 3\nintegers a new subtype of numbers, integers, was added in lua 5.3. numbers can be either integers or floats. floats are similar to numbers as described above, while integers are numbers with no decimal part.\nfloat division (/) and exponentiation always convert their operands to floats, while all other operators give integers if their two operands were integers. in other cases, with the exception of the floor division operator (//) the result is a float.\nstrings strings are sequences of characters that can be used to represent text. they can be written in lua by being contained in double quotes, single quotes or long brackets (it should be noted that comments and strings have nothing in common other than the fact they can both be delimited by long brackets, preceded by two hyphens in the case of comments).\nstrings that aren’t contained in long brackets will only continue for one line. because of this, the only way to make a string that contains many lines without using long brackets is to use escape sequences. this is also the only way to insert single or double quotes in certain cases.\n\u0026#39; \u0026#39;\n\u0026#34; \u0026#34;\n[[ ]]\nlocal phrase = [[my name is ]] local name = \u0026#39;p j\u0026#39; print(phrase .. name) -- my name is p j -- strings and numbers local age = 21 local name = \u0026#34;billy\u0026#34; print(name .. \u0026#34; is \u0026#34; .. age .. \u0026#34; years old\u0026#34;) escape sequence characters are used in string to change the normal interpretation of characters.\nfor example, to print double inverted commas (\u0026#34;\u0026#34;), we have to use \\\u0026#34; in the string.\nthe escape sequence and its use is listed below in the table.\nescape sequence use\n\\a bell\n\\b backspace\n\\f formfeed\n\\n new line\n\\r carriage return\n\\t tab\n\\v vertical tab\n\\\\ backslash\n\\\u0026#34; double quotes\n\\\u0026#39; single quotes\n\\[ left square bracket\n\\] right square bracket\nit is possible to get the length of a string, as a number, by using the unary length operator (#):\nprint(#(\u0026#34;this is a string\u0026#34;)) --\u0026gt; 16 concatenation in formal language theory and computer programming string concatenation is the operation of joining two character strings end-to-end.\nexample 1. \u0026#34;snowball\u0026#34; the concatenation of \u0026#34;snow\u0026#34; and \u0026#34;ball\u0026#34;.\nother types the four basic types in lua (numbers, booleans, nil and strings) have been described in the previous sections, but four types are missing: functions, tables, userdata and threads.\nfunctions pieces of code that can be called, receive values and return values back.\ntables data structures that can be used for data manipulation.\nuserdata used internally by applications lua is embedded in to allow lua to communicate with that program through objects controlled by the application.\nthreads used by coroutines, which allow many functions to run at the same time.\nliterals ","title":"Lua Progamming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/go/go/","summary":"go is a very simple programming language with a strong standard library and\nuseful features.\n","tags":["Backend","CLI","Go","Programming","Tools"],"text":" insert lead paragraph here.\nnew stuff very versile\nmore stuff package main import ( \u0026#34;fmt\u0026#34; ) func main() { fmt.printf(\u0026#34;this is a simple test!\\n\u0026#34;) } ","title":"Go Programming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/asciidoc/asciidoc/","summary":"AsciiDoc is a markup language similar to markdown but vay more standardized\nand with more features/elements.\n","tags":["AsciiDoc","Documentation","Writing"],"text":" intro okay, let’s do it.\ntest // include::{home}/.cache/wal/colors-wal-st.h[] lists unordered lists * level 1 ** level 2 *** level 3 **** level 4 ***** level 5 * level 1 example 1. output level 1\nlevel 2\nlevel 3\nlevel 4\nlevel 5\nlevel 1\nordered lists . level 1 .. level 2 ... level 3 .... level 4 ..... level 5 . level 1 example 2. output level 1\nlevel 2\nlevel 3\nlevel 4\nlevel 5\nlevel 1\ntodo lists - [*] checked - [x] also checked - [ ] not checked - normal list item example 3. output ✓ checked\n✓ also checked\n❏ not checked\nnormal list item\nseparating lists . apples . oranges //- . walnuts . almonds example 4. output apples\noranges\nwalnuts\nalmonds\ndefinitions normal definition list first term:: definition of first term section term:: definition of second term example 5. output first term definition of first term\nsection term definition of second term\nhorizontal definition list [horizontal] first term:: definition of first term section term:: definition of second term example 6. output first term definition of first term\nsection term definition of second term\nmulti-line definition list first term:: definition of first term section term:: definition of second term example 7. output first term definition of first term\nsection term definition of second term\nq\u0026amp;a [qanda] what is asciidoctor?:: an implementation of the asciidoc processor in ruby. what is the answer to the ultimate question?:: 42 example 8. output what is asciidoctor?\nan implementation of the asciidoc processor in ruby.\nwhat is the answer to the ultimate question?\n42\nmixed operating systems:: linux::: . fedora * desktop . ubuntu * desktop * server bsd::: . freebsd . netbsd cloud providers:: paas::: . openshift . cloudbees iaas::: . amazon ec2 . rackspace example 9. output operating systems linux fedora\ndesktop\nubuntu\ndesktop\nserver\nbsd freebsd\nnetbsd\ncloud providers paas openshift\ncloudbees\niaas amazon ec2\nrackspace\nnote note that the indentation is optional complex content in outline lists * every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent. + additional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks. + list continuation:: a plus sign (`{plus}`) on a line by itself * a literal paragraph does not require a list continuation. $ gem install asciidoctor * asciidoc lists may contain any complex content. + [cols=\u0026#34;2\u0026#34;, options=\u0026#34;header\u0026#34;] |=== |application |language |asciidoc |python |asciidoctor |ruby |=== example 10. output every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent.\nadditional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks.\nlist continuation a plus sign (+) on a line by itself\na literal paragraph does not require a list continuation.\n$ gem install asciidoctor asciidoc lists may contain any complex content.\napplication language asciidoc\npython\nasciidoctor\nruby\nlinks external http://asciidoctor.org - automatic! http://asciidoctor.org[asciidoctor] https://github.com/asciidoctor[asciidoctor @ *github*] example 11. output http://asciidoctor.org - automatic!\nasciidoctor\nasciidoctor @ github\nrelative link:test.adoc[docs] example 12. output docs\nemail and irc devel@discuss.arquillian.org mailto:devel@discuss.arquillian.org[discuss arquillian] mailto:devel-join@discuss.arquillian.org[subscribe, subscribe me, i want to join!] irc://irc.freenode.org/#asciidoctor example 13. output devel@discuss.arquillian.org\ndiscuss arquillian\nsubscribe\nirc://irc.freenode.org/#asciidoctor\ninline anchors [[bookmark-a]]inline anchors make arbitrary content referenceable. anchor:bookmark-b[]use a cross reference to link to this location. example 14. output inline anchors make arbitrary content referenceable.\nuse a cross reference to link to this location.\ninternal cross references see \u0026lt;\u0026lt;paragraphs\u0026gt;\u0026gt; to learn how to write paragraphs. learn how to organize the document into \u0026lt;\u0026lt;section-titles,sections\u0026gt;\u0026gt;. example 15. output see [paragraphs] to learn how to write paragraphs.\nlearn how to organize the document into sections.\nimages image::/images/asciidoc/rose.png[] image::/images/asciidoc/rose.png[rose] [[img-sunset]] image::/images/asciidoc/rose.png[caption=\u0026#34;figure 1: \u0026#34;, title=\u0026#34;a rose\u0026#34;, alt=\u0026#34;rose\u0026#34;, width=\u0026#34;300\u0026#34;, height=\u0026#34;200\u0026#34;, link=\u0026#34;http://www.flickr.com/photos/javh/5448336655\u0026#34;] image::http://asciidoctor.org/images/octocat.jpg[github mascot] example 16. output figure 1: a rose admonition paragraph note note: this is a note! example 17. output note this is a note! tip tip: this is a tip! example 18. output tip this is a tip! warning warning: this is a warning! example 19. output warning this is a warning! caution caution: this is a caution! example 20. output caution this is a caution! important important: this is a important! example 21. output important this is a important! admonition blocks [note] ==== this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels: * note * tip * warning * caution * important ==== example 22. output note this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels:\nnote\ntip\nwarning\ncaution\nimportant\nblocks listing block ----- this is a **_listing block_** ----- example 23. output this is a **_listing block_** example block ===== this is a **_example block_** ===== example 24. output this is a example block\ncomment block //// this is a **_comment block_** //// example 25. output literal block .... this is a **_literal block_** .... example 26. output this is a **_literal block_** pass block ++++ == this is raw text ++++ example 27. output == this is raw text quote/verse block ____ this is a very very simple quote ____ example 28. output this is a very very simple quote\nblockqoutes .after landing the cloaked klingon bird of prey in golden gate park: [quote,captain james t. kirk,star trek iv: the voyage home] everybody remember where we parked. example 29. output after landing the cloaked klingon bird of prey in golden gate park: everybody remember where we parked. — captain james t. kirk star trek iv: the voyage home sidebar block .some title **** this is a sidebar block -- i have no idea why it\u0026#39;s called `sidebar` **** example 30. output some title this is a sidebar block — i have no idea why it’s called sidebar\nblock metadata .gettysburg address [[gettysburg]] [quote, abraham lincoln, soldiers\u0026#39; national cemetery dedication] ---- four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ... ---- example 31. output gettysburg address four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ... customization (wip) render (wip) ","title":"AsciiDoc(tor): Yo Dawg!"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/elixir/elixir/","summary":"Elixir is a function programming language which uses Erlang's VM (BEAM)\nand has a very similar approach to Erlang\n","tags":["Elixir","Functional","Programming"],"text":" elixir is a dynamically-typed functional programming language.\nintractive elixir environment $ iex hello world! intro.exs #!/bin/elixir io.puts(\u0026#34;hello\u0026#34; \u0026lt;\u0026gt; \u0026#34; elixir!!\u0026#34;) build tool mix help mix new mix compile mix test mix run create mix new example ","title":"Elixir Programming Language"},{"date":"2023-03-29","image":"","imageAlt":"","link":"https://hossein-lap.github.io/about/","summary":"For a very long time I've wanted to create a weblog to write and\nshare some stuffs in it. There we go :D\n","tags":[],"text":" hi i’m hossein\nyet another minimalist person with a passion about open source software.\ni was a computer guy from my early days back in my 1st and 2nd grade. but all i did was playing video games. until my dad came to me and said:\ndon’t just play video games kiddo, it can do much more than that. try to learn it.\nand that was it. it became the goal of my life :)\nprogramming i have a solid background with writing and patching softwares in some programming languages like\nc lua go bash python …​ by mostly using some tools that required a little programming knowledge to modify / configure or extend.\nlet me give you an example i wanted to learn python language so i needed to take some notes, i decided to use latex for that matter and my notes were getting dirty, i was losing some of them, they’re getting out-of-hand, then i’ve decided to use git for managing them.\ni learned c by patching / configuring the suckless tools, lua by configuring neovim and writing plugins for it, bash by using it daily with \u0026#34;live inside terminal\u0026#34; approach. of cource i’ve also read books and documentations for them eventually. python and go are the ones that i really sat-down and read books / docs about them from the beginning of the journey.\nworkflow i’m a simple guy so i like simplicity.\ni use st as my terminal emulator. i have vim (or neovim i’m fine with both) as my text editor in my pocket, tmux as multiplexer / session-manager by my side, i have a home in any window manger (but i perfer it to be inside dwm over the other). also for some bidi papers and documents i’ve let the little evil in, doom emacs.\nto be honest, i just need a posix-complaint shell, tmux, vim and git. all of these can be repleaced and i’m fine wit their alternatives.\noperating system currently (as of june 21, 2024) i’m using nixos as my daily-driver os. i love nixos’s approach and its reproducability, just starting to like nix language / packages manager, i’ve wanted to learn a functional programming language anyway (i still might go for elixir) so, that’s might be it, who knows ;)\ni’m very fine and comfortable with most of other linux distributions out there. i’ve started using linux with ubuntu 18.04, shortly moved to linux mint 18 and used it about a 6 to 10 months, after that i went for manjaro xfce, installed it, used it for about 3 or so months and then, i installed manjaro i3.\nthe emphasizing manjaro i3 is because it really changed the way i look at a gui.\nwip ","title":"About"}]
}

