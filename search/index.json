
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-05-31","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/","summary":"Configure kubernetes infrastructre with NodePort, ClusterIP, Ingress, nginx load-balancer\n","tags":["ingress","K8S","LoadBalancer","nginx","NodePort"],"text":" warning this is some note, nothing serious. 1. exposing services to external clients few ways to make a service accessible externally:\nport-forwarding\nnodeport service type\nservice object (loadbalancer service type)\ncreate ingress resource (radically different mechanism)\n2. forwarding a local network port to a port in the pod when you want to talk to a specific pod without going through a service (for debugging or other reasons), kubernetes allows you to configure port forwarding to the pod.\nthis is done through the kubectl port-forward command. the following command will forward your machine’s local port 8888 to port 8080 of your kubia-manual pod:\n$ kubectl port-forward kubia-manual 8888:8080 ... forwarding from 127.0.0.1:8888 -\u0026gt; 8080 ... forwarding from [::1]:8888 -\u0026gt; 8080 2.1. connecting to the pod through the port forwarder in a different terminal, you can now use curl to send an http request to your pod through the kubectl port-forward proxy running on localhost:8888:\n$ curl localhost:8888 you\u0026#39;ve hit kubia-manual 3. service object each pod gets its own ip address, but this address is internal to the cluster and isn’t accessible from outside of it. to make the pod accessible from the outside, you’ll expose it through a service object. you’ll create a special service of type loadbalancer, because if you create a regular service (a clusterip service), like the pod, it would also only be accessible from inside the cluster. by creating a loadbalancer type service, an external load balancer will be created and you can connect to the pod through the load balancer’s public ip.\n3.1. creating a service object to create the service, you’ll tell kubernetes to expose the replicationcontroller you created:\n$ kubectl expose rc \u0026lt;rep-controller-name\u0026gt; --type=loadbalancer --name \u0026lt;lb-name\u0026gt; $ kubectl expose rc kubia --type=loadbalancer --name kubia-http service \u0026#34;kubia-http\u0026#34; exposed ","title":"Accessing K8S pods"},{"date":"2024-05-31","image":"","imageAlt":"","link":"https://hossein-lap.github.io/notes/webserver/","summary":"Create a web-server using just golang's stdlib `\"net/http\"`\n","tags":["Go","HTTP","JSON","Redis","RESTFul","SQL"],"text":" warning this is just some notes, nothing serious. we need \u0026#34;net/http\u0026#34; module to create webserver and listen to the specified port.\nimport ( \u0026#34;net/http\u0026#34; ) we also might need these modules as well:\n\u0026#34;encoding/json\u0026#34; too for parsing json data\n\u0026#34;database/sql\u0026#34; and \u0026#34;github.com/go-sql-driver/mysql\u0026#34; to handle (my)sql/mariadb part\n\u0026#34;github.com/redi/go-redis/v9\u0026#34; to handle redis-cache\nwe need a request handler struct for the http server to be able to work.\ntype requesthandler struct {} and now we define the http server. it needs a servehttp() function and paths that needs to be handled (http requests goes to the specified paths)\nmain funcion func main() { mux := http.newservemx() mux.handle(\u0026#34;/path1\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path1/\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path2\u0026#34;, \u0026amp;requesthandler{}) mux.handle(\u0026#34;/path2/\u0026#34;, \u0026amp;requesthandler{}) /* continue */ http.listenandserve(\u0026#34;:8080\u0026#34;, mux) } serve function func (h *requesthandler) servehttp(w http.responsewriter, r *http.requset) { request_type := r.method tmp := strings.splitn(r.url.string(), \u0026#34;/\u0026#34;, 3) section := tmp[1] // path key := tmp[2] // add data after the path params := r.url.query() value := params.get(key) body, err := io.readall(r.body) // values from curl\u0026#39;s `--data` flag (spected to be json) /* continue */ } 1. redis handler func cache_handler() { client := redis.newclient(\u0026amp;redis.options{ addr: \u0026#34;localhost:6349\u0026#34; password: \u0026#34;\u0026#34; // no password, to get it from env variables use: `os.getenv(\u0026#34;env\u0026#34;)` db: 0 // default db }) } 2. mysql handler func database_handler() { sql_url := \u0026#34;root@localhost:3360\u0026#34; db, err := sql.open(\u0026#34;mysql\u0026#34;, sql_url) if err != nil { pandic(err.error()) } defer db.close() /* continue */ } 3. json parser - unmarshal type movie struct { name string `json:\u0026#34;name\u0026#34;` publisher string `json:\u0026#34;publisher\u0026#34;` year int `json:\u0026#34;year\u0026#34;` } func handlemovie() { // var target map[string]any /* not optimal */ var movie movie input := `{ \u0026#34;name\u0026#34;: \u0026#34;jocker\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;wb\u0026#34;, \u0026#34;year\u0026#34;: 2019 }` // err := json.unmarshal([]byte(input), \u0026amp;target) /* not optimal */ err := json.unmarshal([]byte(input), \u0026amp;movie) /* not optimal */ if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } /* not optimal */ // for k, v := range target { // fmt.printf(\u0026#34;k: %s, v: %v\\n\u0026#34;, k, v) // } fmt.printf( \u0026#34;name: %s, publisher: %s, year: %d\\n\u0026#34;, movie.name, movie.publisher, movie.year, ) } 3.1. complex json assets/complex.json { \u0026#34;name\u0026#34;: \u0026#34;james peterson\u0026#34;, \u0026#34;age\u0026#34;: 37, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;block 78 woodgrove avenue 5\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;unit #05-111\u0026#34;, \u0026#34;postal\u0026#34;: \u0026#34;654378\u0026#34; }, \u0026#34;pets\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;lex\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;dog\u0026#34;, \u0026#34;age\u0026#34;: 4, \u0026#34;color\u0026#34;: \u0026#34;gray\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;faye\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;cat\u0026#34;, \u0026#34;age\u0026#34;: 6, \u0026#34;color\u0026#34;: \u0026#34;orange\u0026#34; } ] } examples/complex_json/main.go type ( fullperson struct { address address name string pets []pet age int } pet struct { name string kind string color string age int } address struct { line1 string line2 string postal string } ) func main() { b, err := os.readfile(\u0026#34;assets/complex.json\u0026#34;) if err != nil { log.fatalf(\u0026#34;unable to read file due to %s\\n\u0026#34;, err) } var person fullperson err = json.unmarshal(b, \u0026amp;person) if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } litter.dump(person) } 3.2. common pitfalls with json unmarshalling in go extra fields are omitted in the target struct\nmissing fields fallback to zero values\nunmarshalling is case insensitive\nfield names must match json keys exactly\ntype aliases are preserved\n4. json parser - marshal the json.marshal() method does the opposite of unmarshal() by converting a given data structure into a json.\nexamples/basic_marshal/main.go func marshal(in any) []byte { out, err := json.marshal(in) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } return out } func main() { first := marshal(14) second := marshal(\u0026#34;hello world\u0026#34;) third := marshal([]float32{1.66, 6.86, 10.1}) fourth := marshal(map[string]int{\u0026#34;num\u0026#34;: 15, \u0026#34;other\u0026#34;: 17}) fmt.printf( \u0026#34;first: %s\\nsecond: %s\\nthird: %s\\nfourth: %s\\n\u0026#34;, first, second, third, fourth, ) } 4.1. structs func main() { p := person{ name: \u0026#34;john jones\u0026#34;, age: 26, email: \u0026#34;johnjones@email.com\u0026#34;, phone: \u0026#34;89910119\u0026#34;, hobbies: []string{ \u0026#34;swimming\u0026#34;, \u0026#34;badminton\u0026#34;, }, } b, err := json.marshal(p) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } fmt.println(string(b)) } note if you wish to format the json object, you can use the marshalindent() method which performs the same function as marshal() but applies some indentation to format the output. 4.2. customizing json field names with struct tags type dog struct { breed string name string favoritetreat string age int } var dog = dog{ breed: \u0026#34;golden retriever\u0026#34;, age: 8, name: \u0026#34;paws\u0026#34;, favoritetreat: \u0026#34;kibble\u0026#34;, } type dog struct { breed string `json:\u0026#34;breed\u0026#34;` name string `json:\u0026#34;name\u0026#34;` favoritetreat string `json:\u0026#34;favorite_treat\u0026#34;` age int `json:\u0026#34;age\u0026#34;` } func main() { input := `{ \u0026#34;name\u0026#34;: \u0026#34;coffee\u0026#34;, \u0026#34;breed\u0026#34;: \u0026#34;toy poodle\u0026#34;, \u0026#34;age\u0026#34;: 5, \u0026#34;favorite_treat\u0026#34;: \u0026#34;kibble\u0026#34; }` var coffee dog err := json.unmarshal([]byte(input), \u0026amp;coffee) if err != nil { log.fatalf(\u0026#34;unable to marshal json due to %s\u0026#34;, err) } litter.dump(coffee) } 4.3. other uses of struct tags omit an empty field (one with its zero value in go) type user struct { username string `json:\u0026#34;username\u0026#34;` password string `json:\u0026#34;-\u0026#34;` email string `json:\u0026#34;email\u0026#34;` hobbies []string `json:\u0026#34;hobbies,omitempty\u0026#34;` } 5. validating json data func main() { good := `{\u0026#34;name\u0026#34;: \u0026#34;john doe\u0026#34;}` bad := `{name: \u0026#34;john doe\u0026#34;}` fmt.println(json.valid([]byte(good))) fmt.println(json.valid([]byte(bad))) } 6. defining custom behavior - marshal / unmarshal data in go, you can define custom behavior for marshalling data by implementing the json.marshaler interface. this interface defines a single method, marshaljson() which takes no arguments and returns a byte slice and an error.\nto implement the json.marshaler interface, you need to define a new type that wraps the original type you want to marshal. this new type should have a method named marshaljson() that returns a byte slice and an error.\nexamples/custom_timestamp/main.go type ( customtime struct { time.time } baby struct { birthdate customtime `json:\u0026#34;birth_date\u0026#34;` name string `json:\u0026#34;name\u0026#34;` gender string `json:\u0026#34;gender\u0026#34;` } ) in the above snippet, we defined a new customtime type that wraps a time.time value. in is subsequently used in the baby struct as the type of the birthdate value.\nhere’s an example that marshals a value of type baby below:\nfunc main() { baby := baby{ name: \u0026#34;johnny\u0026#34;, gender: \u0026#34;male\u0026#34;, birthdate: customtime{ time.date(2023, 1, 1, 12, 0, 0, 0, time.now().location()), }, } b, err := json.marshal(baby) if err != nil { log.fatalf(\u0026#34;unable to marshal due to %s\\n\u0026#34;, err) } fmt.println(string(b)) } notice how the birth_date presented in the rfc 3339 format. you can now define the custom marshalling behavior that will return a different format for customtime values (such as dd-mm-yyyy) instead of the default rfc 3339 timestamp format.\nyou only need to define a marshaljson() method for the type as shown below:\nexamples/custom_timestamp/main.go func (ct customtime) marshaljson() ([]byte, error) { return []byte(fmt.sprintf(`%q`, ct.time.format(\u0026#34;02-01-2006\u0026#34;))), nil } ","title":"Golang stdlib - Webserver"},{"date":"2024-05-26","image":"","imageAlt":"","link":"https://hossein-lap.github.io/welcome/","summary":"Welcome to my blog. I’m Hossein and I’ll be posting myown notes, ideas, programs. A programmer / DevOps engineer with passions about open-source software and trees.\nAlso, I use vim btw ;)\nProgramming Languages\nLua, Go, C, Bash\nTools\nLinux, Git, QEMU/KVM, Docker, K8S, Ansible, tmux\nMarkup / Typesetting Languages\nLaTeX, Groff, Asciidoc(tor), Markdown\nHobbies\nCoding, Biking, Volleyball, Fishing","tags":[],"text":" welcome to my blog. i’m hossein and i’ll be posting myown notes, ideas, programs. a programmer / devops engineer with passions about open-source software and trees.\nalso, i use vim btw ;)\nprogramming languages\nlua, go, c, bash\ntools\nlinux, git, qemu/kvm, docker, k8s, ansible, tmux\nmarkup / typesetting languages\nlatex, groff, asciidoc(tor), markdown\nhobbies\ncoding, biking, volleyball, fishing\n","title":"WIP"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/lua/lua/","summary":"Lua is a powerful, fast, lightweight and embeddable programming language.\nIt is used by many frameworks, games and other applications.\n","tags":["Embedded","Game","Lua","Plugin"],"text":" lua is a powerful, fast, lightweight and embeddable programming language. it is used by many frameworks, games and other applications. while it can be used by itself, it has been designed to be easy to embed in another application. it is implemented in ansi c, a subset of c programming language that is very portable, which means it can run on many systems and many devices where the most other scripting languages would not be able to run.\n\u0026#34;lua\u0026#34; (pronounced loo-ah) means \u0026#34;moon\u0026#34; in portuguese. as such, it is neither an acronym nor an abbreviation, but a noun. lua comes from two languages: del and sol. del means \u0026#34;data entry language\u0026#34;, while sol means \u0026#34;simple object language\u0026#34; and also means sun in portuguese.\none of main advantages of lua is its simplicity. programming which is also called scripting in the case of programs that run inside an embedded applications, is the process of writing computer program. a programming language is a language used to give instructions to a computer through computer code that is contained in a computer program. a programming language consists of two things: a syntax, which is like grammar in english, and libraries, basic functions provided with the language. these libraries could be compared with vocabulary in english.\n1. hello world! lua can either be used embedded in an application or by itself. the first example of lua code in this book will be the basic and traditional hello world program.\na \u0026#34;hello world\u0026#34; program is a computer program that outputs \u0026#34;hello, world\u0026#34; on a display device. because it is typically one of the simplest programs possible in most programming languages, it is by tradition often used to illustrate to beginners the most basic syntax of a programming language, or to verify that a language or system is operating correctly.\nprint(\u0026#34;hello world!\u0026#34;) the code above prints the text hello, world! to the output. it does so by calling the print function with the string \u0026#34;hello, world!\u0026#34; as an argument.\n2. syntax syntax of a programming language defines how statements and expressions must be written in that programming language, just like grammar defines how sentences and words must be written. statements and expressions can be respectively compared to sentences and words.\nlua is a dynamically typed language intended for use as an extension language or scripting language.\nstatements and expressions can be respectively compared to sentences and words. expressions are pieces of code that have a value and that can be evaluated, while statements are pieces of code that can be executed and contain an instruction with one or many expressions to use that instruction with.\nfor example, 3 + 5 is an expression and variable = 3 + 5 is a statement that sets the value of variable to that expression.\n-- different types local x = 10 -- number local name = \u0026#34;neo\u0026#34; -- string local is_alive = false -- boolean local a = nil -- no value or invalid value 3. obtaining lua lua can be obtained on the official lua website, on the download page.\n4. basics if you are using the stand-alone lua interpreter, all you have to do to run your first program is to call the interpreter -usually named lua or lua5.3/lua5.4- with the name of the text file that contains your program. if you save the hello world program in a file hello.lua, the following command should run it:\n$ lua hello.lua as a more complex example, the next program defines a function to compute the factorial of a given number, asks the user for a number, and prints its factorial:\n-- defines a factorial function function fact (n) if n == 0 then return 1 else return n * fact(n - 1) end end print(\u0026#34;enter a number:\u0026#34;) a = io.read(\u0026#34;*n\u0026#34;) -- reads a number print(fact(a)) 5. chuncks we call each piece of code that lua executes, such as a file or a single line in interactive mode, a chunk. a chunk is simply a sequence of commands (or statements).\na chunk can be as simple as a single statement, such as in the \u0026#34;hello world\u0026#34; example, or it can be composed of a mix of statements and function definitions (which are actually assignments, as we will see later), such as the factorial example.\ninstead of writing your program to a file, you can run the stand-alone interpreter in interactive mode. if you call lua without any arguments, you will get its prompt:\n$ lua lua 5.4.4 copyright (c) 1994-2022 lua.org, puc-rio \u0026gt; thereafter, each command that you type (such as print \u0026#34;hello world\u0026#34;) executes immediately after you enter it. to exit the interactive mode and the interpreter, just type the end-of-file control character (ctrl-d in posix, ctrl-z in windows), or call the function os.exit, from the operating system library - you have to type os.exit().\nstarting in version 5.4, we can enter expressions directly in the interactive mode, and lua will print their values:\n$ lua lua 5.4.4 copyright (c) 1994-2022 lua.org, puc-rio \u0026gt; math.pi / 4 --\u0026gt; 0.78539816339745 \u0026gt; a = 15 \u0026gt; a ^ 2 --\u0026gt; 225 \u0026gt; a + 2 --\u0026gt; 17 in older versions, we need to precede these expressions with an equals sign:\n$ lua5.2 lua 5.2.3 copyright (c) 1994-2013 lua.org, puc-rio \u0026gt; a = 15 \u0026gt; = a ^ 2 --\u0026gt; 225 for compatibility, lua 5.4 still accepts these equals signs.\nto run that code as a chunk (not in interactive mode), we must enclose the expressions inside calls to print:\nprint(math.pi / 4) --\u0026gt; 0.78539816339745 a = 15 print(a ^ 2) --\u0026gt; 225 print(a + 2) --\u0026gt; 17 lua usually interprets each line that we type in interactive mode as a complete chunk or expression. however, if it detects that the line is not complete, it waits for more input, until it has a complete chunk. this way, we can enter a multi-line definition, such as the factorial function, directly in interactive mode. however, it is usually more convenient to put such definitions in a file and then call lua to run the file.\nwe can use the -i option to instruct lua to start an interactive session after running a given chunk:\n$ lua -i prog a command line like this one will run the chunk in the file prog and then prompt for interaction. this is especially useful for debugging and manual testing.\nanother way to run chunks is with the function dofile, which immediately executes a file. for instance, suppose we have a file lib1.lua with the following code:\nfunction norm (x, y) return math.sqrt(x^2 + y^2) end function twice (x) return 2.0 * x end then, in interactive mode, we can type this code:\n\u0026gt; dofile(\u0026#34;lib1.lua\u0026#34;) -- load our library \u0026gt; n = norm(3.4, 1.0) \u0026gt; twice(n) --\u0026gt; 7.0880180586677 the function dofile is useful also when we are testing a piece of code. we can work with two windows: one is a text editor with our program (in a file prog.lua, say) and the other is a console running lua in interactive mode. after saving a modification in our program, we execute dofile(\u0026#34;prog.lua\u0026#34;) in the lua console to load the new code; then we can exercise the new code, calling its functions and printing the results.\n5.1. some lexical conventions identifiers (or names) in lua can be any string of letters, digits, and underscores, not beginning with a digit; for instance\ni\nj\ni10\n_ij\nasomewhatlongname\n_input\nyou should avoid identifiers starting with an underscore followed by one or more upper-case letters (e.g., _version); they are reserved for special uses in lua. usually, i reserve the identifier _ (a single underscore) for dummy variables.\nthe following words are reserved; we cannot use them as identifiers:\nand end if or until break false in repeat while do for local return else function nil then elseif goto not true lua is case-sensitive and is a reserved word, but and and and are two different identifiers.\n6. comments a comment is a code annotation that is ignored by the programming language. comments can be used to describe one or many lines of code, to document a program, to temporarily disable code, or for any other reason.\nthey need to be prefixed by two hyphens to be recognized by lua and they can be put either on their own line or at the end of another line:\nprint(\u0026#34;this is normal code.\u0026#34;) -- this is a comment print(\u0026#34;this is still normal code.\u0026#34;) -- comment at the end of a line of code. these comments are called short comments. it is also possible to create long comments, which start with a long bracket and can continue on many lines:\nprint(\u0026#34;this is normal code\u0026#34;) --[[line 1 line 2 ]] long brackets consist of two brackets in the middle of which any number of equality signs may be put. that number is called the level of the long bracket. long brackets will continue until the next bracket of the same level, if there is one.\na long bracket with no equal sign is called a long bracket of level 0. this approach makes it possible to use closing double brackets inside of long comments by adding equal signs in the middle of the two brackets. it is often useful to do this when using comments to disable blocks of code.\n--[==[ this is a comment that contains a closing long bracket of level 0 which is here: ]] however, the closing double bracket doesn\u0026#39;t make the comment end, because the comment was opened with an opening long bracket of level 2, and only a closing long bracket of level 2 can close it. ]==] in the example above, the closing long bracket of level 0 (]]) does not close the comment, but the closing long bracket of level 2 (]==]) does.\nlong comments can be more complex than that, as we will see in the section called \u0026#34;long strings\u0026#34;.\n7. expressions expressions are pieces of code that have a value and that can be evaluated. they cannot be executed directly (with the exception of function calls), and thus, a script that would contain only the following code, which consists of an expression, would be erroneous:\n3 + 5 the code above is erroneous because all it contains is an expression. the computer cannot execute 3 + 5, since that does not make sense.\ncode must be comprised of a sequence of statements. these statements can contain expressions which will be values the statement has to manipulate or use to execute the instruction.\nsome code examples in this chapter do not constitute valid code, because they consist of only expressions. in the next chapter, statements will be covered and it will be possible to start writing valid code.\nlua needs no separator between consecutive statements, but we can use a semicolon if we wish. line breaks play no role in lua’s syntax; for instance, the following four chunks are all valid and equivalent:\na = 1 b = a * 2 a = 1; b = a * 2; a = 1; b = a * 2 a = 1 b = a * 2 -- ugly, but valid 8. global variables global variables do not need declarations; we simply use them. it is not an error to access a non-initialized variable; we just get the value nil as the result:\n\u0026gt; b --\u0026gt; nil \u0026gt; b = 10 \u0026gt; b --\u0026gt; 10 if we assign nil to a global variable, lua behaves as if we have never used the variable:\n\u0026gt; b = nil \u0026gt; b --\u0026gt; nil lua does not differentiate a non-initialized variable from one that we assigned nil. after the assignment, lua can eventually reclaim the memory used by the variable.\n9. types and values lua is a dynamically-typed language. there are no type definitions in the language; each value carries its own type.\nthere are eight basic types in lua: nil, boolean, number, string, userdata, function, thread, and table. the function type gives the type name of any given value:\n\u0026gt; type(nil) --\u0026gt; nil \u0026gt; type(true) --\u0026gt; boolean \u0026gt; type(10.4 * 3) --\u0026gt; number \u0026gt; type(\u0026#34;hello world\u0026#34;) --\u0026gt; string \u0026gt; type(io.stdin) --\u0026gt; userdata \u0026gt; type(print) --\u0026gt; function \u0026gt; type(type) --\u0026gt; function \u0026gt; type({}) --\u0026gt; table \u0026gt; type(type(x)) --\u0026gt; string the last line will result in “string” no matter the value of x, because the result of type is always a string.\nthe userdata type allows arbitrary c data to be stored in lua variables. it has no predefined operations in lua, except assignment and equality test. userdata are used to represent new types created by an application program or a library written in c; for instance, the standard i/o library uses them to represent open files. we will discuss more about userdata later, when we get to the c api.\nvariables have no predefined types; any variable can contain values of any type:\n\u0026gt; type(a) --\u0026gt; nil (\u0026#39;a\u0026#39; is not initialized) \u0026gt; a = 10 \u0026gt; type(a) --\u0026gt; number \u0026gt; a = \u0026#34;a string!!\u0026#34; \u0026gt; type(a) --\u0026gt; string \u0026gt; a = nil \u0026gt; type(a) --\u0026gt; nil the list of data types for values are given below.\ntype description\nnil used to differentiate the value from having some data or no(nil) data.\nboolean includes true and false as values. generally used for condition checking.\nnumber represents real(double precision floating point) numbers.\nstring represents array of characters.\nfunction represents a method that is written in c or lua.\nuserdata represents arbitrary c data.\nthread represents independent threads of execution and it is used to implement coroutines.\ntable represent ordinary arrays, symbol tables, sets, records, graphs, trees, etc., and implements associative arrays. it can hold any value (except nil).\nusually, when we use a single variable for different types, the result is messy code. however, sometimes the judicious use of this facility is helpful, for instance in the use of nil to differentiate a normal return value from an abnormal condition.\nby default, all the variables will point to nil until they are assigned a value or initialized.\nwe will discuss now the simple types nil and boolean.\n9.1. nil nil is a type with a single value, nil, whose main property is to be different from any other value. lua uses nil as a kind of non-value, to represent the absence of a useful value. as we have seen, a global variable has a nil value by default, before its first assignment, and we can assign nil to a global variable to delete it.\n9.2. booleans the boolean type has two values, false and true, which represent the traditional boolean values. however, booleans do not hold a monopoly of condition values: in lua, any value can represent a condition. conditional tests (e.g., conditions in control structures) consider both the boolean false and nil as false and anything else as true. in particular, lua considers both zero and the empty string as true in conditional tests.\nthroughout this book, i will write \u0026#34;false\u0026#34; to mean any false value, that is, the boolean false or nil. when i mean specifically the boolean value, i will write \u0026#34;false\u0026#34;. the same holds for \u0026#34;true\u0026#34; and “true”.\nlua supports a conventional set of logical operators: and, or, and not. like control structures, all logical operators consider both the boolean false and nil as false, and anything else as true. the result of the and operator is its first operand if that operand is false; otherwise, the result is its second operand. the result of the or operator is its first operand if it is not false; otherwise, the result is its second operand:\n\u0026gt; 4 and 5 --\u0026gt; 5 \u0026gt; nil and 13 --\u0026gt; nil \u0026gt; false and 13 --\u0026gt; false \u0026gt; 0 or 5 --\u0026gt; 0 \u0026gt; false or \u0026#34;hi\u0026#34; --\u0026gt; \u0026#34;hi\u0026#34; \u0026gt; nil or false --\u0026gt; false both and and or use short-circuit evaluation, that is, they evaluate their second operand only when necessary. short-circuit evaluation ensures that expressions like (i ~= 0 and a/i \u0026gt; b) do not cause run-time errors: lua will not try to evaluate a / i when i is zero.\na useful lua idiom is x = x or v, which is equivalent to\nif not x then x = v end that is, it sets x to a default value v when x is not set (provided that x is not set to false).\nanother useful idiom is ((a and b) or c) or simply (a and b or c) (given that and has a higher precedence than or). it is equivalent to the c expression a ? b : c, provided that b is not false. for instance, we can select the maximum of two numbers x and y with the expression (x \u0026gt; y) and x or y. when x \u0026gt; y, the first expression of the and is true, so the and results in its second operand (x), which is always true (because it is a number), and then the or expression results in the value of its first operand, x. when x \u0026gt; y is false, the and expression is false and so the or results in its second operand, y.\nthe not operator always gives a boolean value:\n\u0026gt; not nil --\u0026gt; true \u0026gt; not false --\u0026gt; true \u0026gt; not 0 --\u0026gt; false \u0026gt; not not 1 --\u0026gt; true \u0026gt; not not nil --\u0026gt; false the following operators are often used with boolean values, but can also be used with values of any data type:\noperation syntax description boolean negation\nnot a\nif a is false or nil, returns true. otherwise, returns false.\nlogical conjunction\na and b\nreturns the first argument if it is false or nil. otherwise, returns the second argument.\nlogical disjunction\na or b\nreturns the first argument if it is neither false nor nil. otherwise, returns the second argument.\nessentially, the not operator just negates the boolean value (makes it false if it is true and makes it true if it is false), the and operator returns true if both are true and false if not and the or operator returns true if either of arguments is true and false otherwise.\nlocal is_alive = true print(is_alive) -- true local is_alive = false print(is_alive) -- false 9.3. numbers numbers generally represent quantities, but they can be used for many other things. the number type in lua works mostly in the same way as real numbers.\nnumbers can be constructed as integers, decimal numbers, decimal exponents or even in hexadecimal. here are some valid numbers:\n3\n3.0\n3.1416\n314.16e-2\n0.31416e1\n0xff\n0x56\n-- the lua local a = 1 local b = 2 local c = a + b print(c) -- 3 local d = b - a print(d) local x = 1 * 3 * 4 -- 12 print(x) local y = (1+3) * 2 -- 8 print(y) print(10 / 2) -- 5 print(2 ^ 2) -- 4 print(5 % 2) -- 1 print(-b) -- -2 -- incerment local level = 1 level = level + 1 print(level) 9.3.1. arithmetic operations the operators for numbers in lua are the following:\noperation syntax description example arithmetic negation\n-a\nchanges the sign of a and returns the value\n-3.14159\naddition\na + b\nreturns the sum of a and b\n5.2 + 3.6\nsubtraction\na - b\nsubtracts b from a and returns the result\n5.2 + 3.6\nmultiplication\na * b\nreturns the product of a and b\n3.2 _ 1.5\nexponentiation\na ^ b\nreturns a to the power b, or the exponentiation of a by b\n5 ˆ 2\ndivision\na / b\ndivides a by b and returns the result\n6.4 / 2\nmodulus operation\na % b\nreturns the remainder of the division of a by b\n5 % 3\n9.3.2. integers a new subtype of numbers, integers, was added in lua 5.3. numbers can be either integers or floats. floats are similar to numbers as described above, while integers are numbers with no decimal part.\nfloat division (/) and exponentiation always convert their operands to floats, while all other operators give integers if their two operands were integers. in other cases, with the exception of the floor division operator (//) the result is a float.\n9.4. strings strings are sequences of characters that can be used to represent text. they can be written in lua by being contained in double quotes, single quotes or long brackets (it should be noted that comments and strings have nothing in common other than the fact they can both be delimited by long brackets, preceded by two hyphens in the case of comments).\nstrings that aren’t contained in long brackets will only continue for one line. because of this, the only way to make a string that contains many lines without using long brackets is to use escape sequences. this is also the only way to insert single or double quotes in certain cases.\n\u0026#39; \u0026#39;\n\u0026#34; \u0026#34;\n[[ ]]\nlocal phrase = [[my name is ]] local name = \u0026#39;p j\u0026#39; print(phrase .. name) -- my name is p j -- strings and numbers local age = 21 local name = \u0026#34;billy\u0026#34; print(name .. \u0026#34; is \u0026#34; .. age .. \u0026#34; years old\u0026#34;) escape sequence characters are used in string to change the normal interpretation of characters.\nfor example, to print double inverted commas (\u0026#34;\u0026#34;), we have to use \\\u0026#34; in the string.\nthe escape sequence and its use is listed below in the table.\nescape sequence use\n\\a bell\n\\b backspace\n\\f formfeed\n\\n new line\n\\r carriage return\n\\t tab\n\\v vertical tab\n\\\\ backslash\n\\\u0026#34; double quotes\n\\\u0026#39; single quotes\n\\[ left square bracket\n\\] right square bracket\nit is possible to get the length of a string, as a number, by using the unary length operator (#):\nprint(#(\u0026#34;this is a string\u0026#34;)) --\u0026gt; 16 9.4.1. concatenation in formal language theory and computer programming string concatenation is the operation of joining two character strings end-to-end.\nexample 1. \u0026#34;snowball\u0026#34; the concatenation of \u0026#34;snow\u0026#34; and \u0026#34;ball\u0026#34;.\n9.5. other types the four basic types in lua (numbers, booleans, nil and strings) have been described in the previous sections, but four types are missing: functions, tables, userdata and threads.\nfunctions pieces of code that can be called, receive values and return values back.\ntables data structures that can be used for data manipulation.\nuserdata used internally by applications lua is embedded in to allow lua to communicate with that program through objects controlled by the application.\nthreads used by coroutines, which allow many functions to run at the same time.\n10. literals ","title":"Lua Progamming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/go/go/","summary":"go is a very simple programming language with a strong standard library and\nuseful features.\n","tags":["Backend","CLI","Go","Programming","Tools"],"text":" insert lead paragraph here.\n1. new stuff very versile\n2. more stuff package main import ( \u0026#34;fmt\u0026#34; ) func main() { fmt.printf(\u0026#34;this is a simple test!\\n\u0026#34;) } ","title":"Go Programming Language"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/asciidoc/asciidoc/","summary":"AsciiDoc is a markup language similar to markdown but vay more standardized\nand with more features/elements.\n","tags":["AsciiDoc","Documentation","Writing"],"text":" 1. intro okay, let’s do it.\ntest // include::{home}/.cache/wal/colors-wal-st.h[] 2. lists 2.1. unordered lists * level 1 ** level 2 *** level 3 **** level 4 ***** level 5 * level 1 example 1. output level 1\nlevel 2\nlevel 3\nlevel 4\nlevel 5\nlevel 1\n2.2. ordered lists . level 1 .. level 2 ... level 3 .... level 4 ..... level 5 . level 1 example 2. output level 1\nlevel 2\nlevel 3\nlevel 4\nlevel 5\nlevel 1\n2.3. todo lists - [*] checked - [x] also checked - [ ] not checked - normal list item example 3. output ✓ checked\n✓ also checked\n❏ not checked\nnormal list item\n2.4. separating lists . apples . oranges //- . walnuts . almonds example 4. output apples\noranges\nwalnuts\nalmonds\n3. definitions 3.1. normal definition list first term:: definition of first term section term:: definition of second term example 5. output first term definition of first term\nsection term definition of second term\n3.2. horizontal definition list [horizontal] first term:: definition of first term section term:: definition of second term example 6. output first term definition of first term\nsection term definition of second term\n3.3. multi-line definition list first term:: definition of first term section term:: definition of second term example 7. output first term definition of first term\nsection term definition of second term\n3.4. q\u0026amp;a [qanda] what is asciidoctor?:: an implementation of the asciidoc processor in ruby. what is the answer to the ultimate question?:: 42 example 8. output what is asciidoctor?\nan implementation of the asciidoc processor in ruby.\nwhat is the answer to the ultimate question?\n42\n3.5. mixed operating systems:: linux::: . fedora * desktop . ubuntu * desktop * server bsd::: . freebsd . netbsd cloud providers:: paas::: . openshift . cloudbees iaas::: . amazon ec2 . rackspace example 9. output operating systems linux fedora\ndesktop\nubuntu\ndesktop\nserver\nbsd freebsd\nnetbsd\ncloud providers paas openshift\ncloudbees\niaas amazon ec2\nrackspace\nnote note that the indentation is optional 3.6. complex content in outline lists * every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent. + additional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks. + list continuation:: a plus sign (`{plus}`) on a line by itself * a literal paragraph does not require a list continuation. $ gem install asciidoctor * asciidoc lists may contain any complex content. + [cols=\u0026#34;2\u0026#34;, options=\u0026#34;header\u0026#34;] |=== |application |language |asciidoc |python |asciidoctor |ruby |=== example 10. output every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent.\nadditional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks.\nlist continuation a plus sign (+) on a line by itself\na literal paragraph does not require a list continuation.\n$ gem install asciidoctor asciidoc lists may contain any complex content.\napplication language asciidoc\npython\nasciidoctor\nruby\n4. links 4.1. external http://asciidoctor.org - automatic! http://asciidoctor.org[asciidoctor] https://github.com/asciidoctor[asciidoctor @ *github*] example 11. output http://asciidoctor.org - automatic!\nasciidoctor\nasciidoctor @ github\n4.2. relative link:test.adoc[docs] example 12. output docs\n4.3. email and irc devel@discuss.arquillian.org mailto:devel@discuss.arquillian.org[discuss arquillian] mailto:devel-join@discuss.arquillian.org[subscribe, subscribe me, i want to join!] irc://irc.freenode.org/#asciidoctor example 13. output devel@discuss.arquillian.org\ndiscuss arquillian\nsubscribe\nirc://irc.freenode.org/#asciidoctor\n4.4. inline anchors [[bookmark-a]]inline anchors make arbitrary content referenceable. anchor:bookmark-b[]use a cross reference to link to this location. example 14. output inline anchors make arbitrary content referenceable.\nuse a cross reference to link to this location.\n4.5. internal cross references see \u0026lt;\u0026lt;paragraphs\u0026gt;\u0026gt; to learn how to write paragraphs. learn how to organize the document into \u0026lt;\u0026lt;section-titles,sections\u0026gt;\u0026gt;. example 15. output see [paragraphs] to learn how to write paragraphs.\nlearn how to organize the document into sections.\n4.6. images image::/images/asciidoc/rose.png[] image::/images/asciidoc/rose.png[rose] [[img-sunset]] image::/images/asciidoc/rose.png[caption=\u0026#34;figure 1: \u0026#34;, title=\u0026#34;a rose\u0026#34;, alt=\u0026#34;rose\u0026#34;, width=\u0026#34;300\u0026#34;, height=\u0026#34;200\u0026#34;, link=\u0026#34;http://www.flickr.com/photos/javh/5448336655\u0026#34;] image::http://asciidoctor.org/images/octocat.jpg[github mascot] example 16. output figure 1: a rose 5. admonition paragraph 5.1. note note: this is a note! example 17. output note this is a note! 5.2. tip tip: this is a tip! example 18. output tip this is a tip! 5.3. warning warning: this is a warning! example 19. output warning this is a warning! 5.4. caution caution: this is a caution! example 20. output caution this is a caution! 5.5. important important: this is a important! example 21. output important this is a important! 5.6. admonition blocks [note] ==== this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels: * note * tip * warning * caution * important ==== example 22. output note this is an example of an admonition block. unlike an admonition paragraph, it may contain any asciidoc content. the style can be any one of the admonition labels:\nnote\ntip\nwarning\ncaution\nimportant\n6. blocks 6.1. listing block ----- this is a **_listing block_** ----- example 23. output this is a **_listing block_** 6.2. example block ===== this is a **_example block_** ===== example 24. output this is a example block\n6.3. comment block //// this is a **_comment block_** //// example 25. output 6.4. literal block .... this is a **_literal block_** .... example 26. output this is a **_literal block_** 6.5. pass block ++++ == this is raw text ++++ example 27. output == this is raw text 6.6. quote/verse block ____ this is a very very simple quote ____ example 28. output this is a very very simple quote\n6.6.1. blockqoutes .after landing the cloaked klingon bird of prey in golden gate park: [quote,captain james t. kirk,star trek iv: the voyage home] everybody remember where we parked. example 29. output after landing the cloaked klingon bird of prey in golden gate park: everybody remember where we parked. — captain james t. kirk star trek iv: the voyage home 6.7. sidebar block .some title **** this is a sidebar block -- i have no idea why it\u0026#39;s called `sidebar` **** example 30. output some title this is a sidebar block — i have no idea why it’s called sidebar\n6.8. block metadata .gettysburg address [[gettysburg]] [quote, abraham lincoln, soldiers\u0026#39; national cemetery dedication] ---- four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ... ---- example 31. output gettysburg address four score and seven years ago our fathers brought forth on this continent a new nation... now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. ... 7. customization (wip) 8. render (wip) ","title":"AsciiDoc(tor): Yo Dawg!"},{"date":"2024-04-02","image":"","imageAlt":"","link":"https://hossein-lap.github.io/docs/elixir/elixir/","summary":"Elixir is a function programming language which uses Erlang's VM (BEAM)\nand has a very similar approach to Erlang\n","tags":["Elixir","Functional","Programming"],"text":" elixir is a dynamically-typed functional programming language.\n1. intractive elixir environment $ iex 2. hello world! intro.exs #!/bin/elixir io.puts(\u0026#34;hello\u0026#34; \u0026lt;\u0026gt; \u0026#34; elixir!!\u0026#34;) 3. build tool mix help mix new mix compile mix test mix run create mix new example ","title":"Elixir Programming Language"},{"date":"2023-03-29","image":"","imageAlt":"","link":"https://hossein-lap.github.io/about/","summary":"For a very long time I've wanted to create a weblog to write and\nshare some stuffs in it. There we go :D\n","tags":[],"text":" hi i’m hossein\nyet another minimalist person with a passion about open source software.\ni was a computer guy from my early days back in my 1st and 2nd grade. but all i did was playing video games. until my dad came to me and said:\ndon’t just play video games kiddo, it can do much more than that. try to learn it.\nand that was it. it became the goal of my life :)\n1. programming i have a solid background with writing and patching softwares in some programming languages like\nc lua go bash python …​ by mostly using some tools that required a little programming knowledge to modify / configure or extend.\nlet me give you an example i wanted to learn python language so i needed to take some notes, i decided to use latex for that matter and my notes were getting dirty, i was losing some of them, they’re getting out-of-hand, then i’ve decided to use git for managing them.\ni learned c by patching / configuring the suckless tools, lua by configuring neovim and writing plugins for it, bash by using it daily with \u0026#34;live inside terminal\u0026#34; approach. of cource i’ve also read books and documentations for them eventually. python and go are the ones that i really sat-down and read books / docs about them from the beginning of the journey.\n2. workflow i’m a simple guy so i like simplicity.\ni use st as my terminal emulator. i have vim (or neovim i’m fine with both) as my text editor in my pocket, tmux as multiplexer / session-manager by my side, i have a home in any window manger (but i perfer it to be inside dwm over the other). also for some bidi papers and documents i’ve let the little evil in, doom emacs.\nto be honest, i just need a posix-complaint shell, tmux, vim and git. all of these can be repleaced and i’m fine wit their alternatives.\n2.1. operating system currently (as of june 21, 2024) i’m using nixos as my daily-driver os. i love nixos’s approach and its reproducability, just starting to like nix language / packages manager, i’ve wanted to learn a functional programming language anyway (i still might go for elixir) so, that’s might be it, who knows ;)\ni’m very fine and comfortable with most of other linux distributions out there. i’ve started using linux with ubuntu 18.04, shortly moved to linux mint 18 and used it about a 6 to 10 months, after that i went for manjaro xfce, installed it, used it for about 3 or so months and then, i installed manjaro i3.\nthe emphasizing manjaro i3 is because it really changed the way i look at a gui.\n3. wip ","title":"About"}]
}

