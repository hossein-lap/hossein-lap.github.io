<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Notes on Hossein Esmailzadeh</title>
    <link>https://hossein-lap.github.io/notes/</link>
    <description>Recent content in Notes on Hossein Esmailzadeh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hossein Esmail</copyright>
    <lastBuildDate>Sat, 14 Sep 2024 15:53:26 +0330</lastBuildDate><atom:link href="https://hossein-lap.github.io/notes/index.xml" rel="self" type="application/rss+xml" /><icon>https://hossein-lap.github.io/images/ed/foo.png</icon>
    
    
    <item>
      <title>Docker</title>
      <link>https://hossein-lap.github.io/notes/docker/</link>
      <pubDate>Sat, 14 Sep 2024 15:53:26 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/docker/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_intro">1. Intro</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Yeah I don’t like long intros either, but this one needs a little more digging.
Let’s begin.</p>
</div>
<div class="sect2">
<h3 id="_what_is_docker">1.1. What is Docker?</h3>
<div class="paragraph">
<p>Docker is a container management service. You may also hear it referred as
<em>container engine</em>. All it can do is <strong>create</strong>, <strong>run</strong> and <strong>manage</strong> containers.
Let’s go a little bit deeper.</p>
</div>
</div>
<div class="sect2">
<h3 id="_what_is_a_container">1.2. What is a container</h3>
<div class="paragraph">
<p>Let me put it this way, what you need to run a program? A computer (servers are
also computers) and what a computer (beside hardware) has? Software.
Now what software do you use to work with the computer’s hardware? <strong>Operating
System</strong>. Containers are just a small isolated things that emulates a Operating
System. In a different approach we can say: <strong>Using OS-level virtualization to
deliver software in packages called <em>containers</em></strong>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_containers_vs_virtual_machines">1.3. Containers VS. Virtual-Machines</h3>
<div class="paragraph">
<p>Every VM requires its own dedicated operating system (OS) is a major flaw.
Every OS consumes CPU, RAM and other resources that could otherwise be used to
power more applications. Every OS needs patching and monitoring. And in some
cases, every OS requires a license. All of this results in wasted time and
resources.</p>
</div>
<div class="paragraph">
<p>A major difference is that containers do not require their own full-blown OS.
In fact, all containers on a single host share the host’s OS. This frees up
huge amounts of system resources such as CPU, RAM, and storage. It also reduces
potential licensing costs and reduces the overhead of OS patching and other
maintenance.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/images/notes/docker/vm-vs-container.png" alt="vm vs container"/>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_linux_containers">1.4. Linux containers</h3>
<div class="paragraph">
<p>Modern containers started in the Linux world and are the product of an immense
amount of work from a wide variety of people over a long period of time. Just
as one example, Google LLC has contributed many container-related technologies
to the Linux kernel. Without these, and other contributions, we wouldn’t have
modern containers today.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>There are many operating system virtualization technologies similar to
containers that pre-date Docker and modern containers. Some even date back to
System/360 on the Mainframe. BSD Jails and Solaris Zones are some other
well-known examples of Unix-type container technologies.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_basics">2. Basics</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="title">Pulling an image</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="bash">docker image pull ubuntu:latest</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_dockerfile">2.1. Dockerfile</h3>
<div class="paragraph">
<p>You can create your own Docker image from a file called <code>Dockerfile</code>.
This file includes instructions to build an application. Instructions like
installing dependencies, copying files, running compile / build commands and
so on. <em>Things that needs to be done for preparing the environment that you app
will run in it</em>.</p>
</div>
<div class="listingblock">
<div class="title">Dockerfile — Simple webapp</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="dockerfile"><span style="color: #ba8baf">FROM</span><span style="color: #a1b56c"> alpine</span>
<span style="color: #ba8baf">LABEL</span><span style="color: #a1b56c"> maintainer=&#34;example@mail.com&#34;</span>
<span style="color: #ba8baf">RUN </span>apk add <span style="color: #f7ca88">--update</span> nodejs nodejs-npm
<span style="color: #ba8baf">COPY</span><span style="color: #a1b56c"> . /src</span>
<span style="color: #ba8baf">WORKDIR</span><span style="color: #a1b56c"> /src</span>
<span style="color: #ba8baf">RUN </span>npm <span style="color: #d8d8d8;background-color: #181818">install</span>
<span style="color: #ba8baf">EXPOSE</span><span style="color: #a1b56c"> 8080</span>
<span style="color: #ba8baf">ENTRYPOINT</span><span style="color: #a1b56c"> [&#34;node&#34;, &#34;./app.js&#34;]</span></code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 1. Keywords</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>FROM</code>: The <strong>base</strong> image to use</p>
</li>
<li>
<p><code>LABEL</code>: Image’s metadata</p>
</li>
<li>
<p><code>RUN</code>: Command to run inside the image at build time</p>
</li>
<li>
<p><code>COPY</code>: Copy files from <code>&lt;local&gt;</code> to <code>&lt;image&gt;</code></p>
</li>
<li>
<p><code>WORKDIR</code>: Change the working directory</p>
<div class="ulist">
<ul>
<li>
<p>Note that if the directory does not exists, it will be created</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>EXPOSE</code>: The port that will be exposed</p>
<div class="ulist">
<ul>
<li>
<p>available to the host/other images</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>ENTRYPOINT</code>: The command that will be run at the end</p>
<div class="ulist">
<ul>
<li>
<p>The actual app; all the previous commands are just a preparation for this command/section</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="title">Dockerfile — Build image</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="bash">docker buildx build <span style="color: #f7ca88">-f</span> Dockerfile <span style="color: #f7ca88">-t</span> test-name .</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>[+] Building 35.5s (10/10) FINISHED                                                  docker:default
 =&gt; [internal] load build definition from Dockerfile                                           0.0s
 =&gt; =&gt; transferring dockerfile: 363B                                                           0.0s
 =&gt; [internal] load .dockerignore                                                              0.0s
 =&gt; =&gt; transferring context: 2B                                                                0.0s
 =&gt; [internal] load metadata for docker.io/library/alpine:latest                               0.0s
 =&gt; [1/5] FROM docker.io/library/alpine                                                        0.0s
 =&gt; [internal] load build context                                                              0.0s
 =&gt; =&gt; transferring context: 36.77kB                                                           0.0s
 =&gt; [2/5] RUN apk add --update nodejs npm curl                                                 9.2s
 =&gt; [3/5] COPY . /src                                                                          0.0s
 =&gt; [4/5] WORKDIR /src                                                                         0.0s
 =&gt; [5/5] RUN npm install                                                                     26.0s
 =&gt; exporting to image                                                                         0.2s
 =&gt; =&gt; exporting layers                                                                        0.2s
 =&gt; =&gt; writing image sha256:1825da98372a937a095e523f71f59dcd6a4c41f6f0f573ed1bfe118fae8d50ed   0.0s
 =&gt; =&gt; naming to docker.io/library/test                                                        0.0s</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Docker CLI — Get list of images</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="bash">docker image <span style="color: #d8d8d8;background-color: #181818">ls</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>REPOSITORY             TAG               IMAGE ID       CREATED         SIZE
test                   latest            1825da98372a   6 minutes ago   95.4MB</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Docker CLI — Run an image/container</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="bash">docker container run <span style="color: #f7ca88">-d</span> <span style="color: #f7ca88">--name</span> web1 <span style="color: #f7ca88">--publish</span> 8080:8080 <span style="color: #d8d8d8;background-color: #181818">test</span>:latest</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>63e334d59c7d937c99f6cbe6e5628c3b180ab26cb4b3f7e3d2cdd007cfd78f37</pre>
</div>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="title">Docker CLI — Get list of running images/containers</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="bash">docker ps</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>CONTAINER ID   IMAGE         COMMAND           CREATED          STATUS          PORTS                                       NAMES
63e334d59c7d   test:latest   &#34;node ./app.js&#34;   14 seconds ago   Up 13 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   web1</pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You can also use multiple images inside one container:</p>
</div>
<div class="listingblock">
<div class="title">Multi-stage Dockerfile</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="docker"><span style="color: #585858"># pull golang image to build the app</span>
<span style="color: #ba8baf">FROM</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">golang:alpine</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #ba8baf">as</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">builder</span>
<span style="color: #585858"># add a label</span>
<span style="color: #ba8baf">LABEL</span><span style="color: #a1b56c"> maintainer=&#34;Hossein Esmailzadeh &lt;hosteam01@gmail.com&gt;&#34;</span>

<span style="color: #585858">## inside golang:alpine image</span>
<span style="color: #585858"># change the working directory</span>
<span style="color: #ba8baf">WORKDIR</span><span style="color: #a1b56c"> /app</span>

<span style="color: #585858"># copy golang&#39;s related files (checksum and module files)</span>
<span style="color: #ba8baf">COPY</span><span style="color: #a1b56c"> go.mod go.sum ./</span>
<span style="color: #585858"># get the needed modules</span>
<span style="color: #ba8baf">RUN </span>go mod download
<span style="color: #585858"># copy the source code</span>
<span style="color: #ba8baf">COPY</span><span style="color: #a1b56c"> . .</span>

<span style="color: #585858"># compile the app</span>
<span style="color: #ba8baf">RUN </span><span style="color: #d8d8d8;background-color: #181818">CGO_ENABLED</span><span style="color: #d8d8d8">=</span>0 <span style="color: #d8d8d8;background-color: #181818">GOOS</span><span style="color: #d8d8d8">=</span>linux go build <span style="color: #f7ca88">-a</span> <span style="color: #f7ca88">-installsuffix</span> cgo <span style="color: #f7ca88">-o</span> main .

<span style="color: #585858">## inside our image</span>
<span style="color: #585858"># use a alpine (very small OS) image as base</span>
<span style="color: #ba8baf">FROM</span><span style="color: #a1b56c"> alpine:latest</span>

<span style="color: #585858"># install dependencies</span>
<span style="color: #ba8baf">RUN </span>apk <span style="color: #f7ca88">--no-cache</span> add ca-certificates
<span style="color: #585858"># change the working directory</span>
<span style="color: #ba8baf">WORKDIR</span><span style="color: #a1b56c"> /root/</span>
<span style="color: #585858"># copy the built binary from the golang:alpine image inside our container</span>
<span style="color: #ba8baf">COPY</span><span style="color: #a1b56c"> --from=builder /app/main .</span>

<span style="color: #585858"># let port 9090 to be accessible for others</span>
<span style="color: #ba8baf">EXPOSE</span><span style="color: #a1b56c"> 9090</span>

<span style="color: #585858"># run the binary at the end</span>
<span style="color: #ba8baf">CMD</span><span style="color: #a1b56c"> [&#34;./main&#34;]</span></code></pre>
</div>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Perl</title>
      <link>https://hossein-lap.github.io/notes/perl/</link>
      <pubDate>Wed, 11 Sep 2024 15:04:10 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/perl/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="listingblock">
<div class="title">Hello World!</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">Hello world!</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Note</div>
<p><code>use warnings;</code> is called <em>pragma</em> in Perl. This pragma instructs Perl to turn
on additional warning reporting.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_syntax">1. Perl Syntax</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Basic <strong>Perl syntax</strong> to get started with Perl language quickly including
variables, expressions, statements, block, comments, whitespaces, and keywords.</p>
</div>
<div class="sect2">
<h3 id="_values_and_variables">1.1. Values and Variables</h3>
<div class="paragraph">
<p>You develop Perl programs to manipulate some kinds of data. The data can be
either <a href="doc/03-perl-numbers.html#_Perl_numbers">numbers</a>,
<a href="doc/04-perl-strings.html#_Perl_strings">strings</a>, or more complex such as a
<a href="doc/06-perl-list.html#_Perl_list">list</a>. Data is held as value.</p>
</div>
<div class="listingblock">
<div class="title">Some values</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #a1b56c">10</span>
<span style="color: #a1b56c">20.2</span>
<span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Perl Syntax</span><span style="color: #d8d8d8">&#34;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To hold a piece of data, you need <strong>variables</strong>. You use a variable to store a
value. And through the name of the variable, you can process the value.</p>
</div>
<div class="paragraph">
<p>The following illustrates some variables in Perl:</p>
</div>
<div class="listingblock">
<div class="title">Define variables</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8;background-color: #181818">$x</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">10</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$y</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Perl string</span><span style="color: #d8d8d8">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We have two integer variables (<code>$x</code> and <code>$y</code>) and one string variable (<code>$s</code>).
For more information on Perl variables, check it out the
<a href="doc/02-perl-variables.html#_Perl_variables">Perl variables</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_expressions">1.2. Expressions</h3>
<div class="paragraph">
<p>In Perl, an expression is anything that returns a value.</p>
</div>
<div class="paragraph">
<p>The expression can be used in a larger expression or a statement. The expression can be a literal
<a href="doc/03-perl-numbers.html#_Perl_numbers">number</a>, complex expression with
<a href="doc/05-perl-operators.html#_Perl_operators">operators</a>, or a
<a href="doc/20-perl-subroutine.html#_Perl_subroutine">function (aka subroutine)</a>, call.</p>
</div>
<div class="paragraph">
<p>For example, 3 is an expression that returns a value of 3. The <code>$a + $b</code> is an
expression that returns the sum of two variables: <code>$a</code> and <code>$b</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_statements">1.3. Statements</h3>
<div class="paragraph">
<p>A statement is made up of expressions. A statement is executed by Perl at run-time.</p>
</div>
<div class="paragraph">
<p>Each Perl statement must end with a semicolon (<code>;</code>). The following example
shows the statements in Perl:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">+</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_blocks">1.4. Blocks</h3>
<div class="paragraph">
<p>A block is made up of statements wrapped in curly braces <code>{}</code>. You use blocks
to organize statements in the program.</p>
</div>
<div class="paragraph">
<p>The following example illustrates a block in Perl:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8">{</span>
	<span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">1</span><span style="color: #d8d8d8">;</span>
	<span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">+</span> <span style="color: #a1b56c">1</span><span style="color: #d8d8d8">;</span>
	<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$a</span><span style="color: #d8d8d8">);</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Any variable declared inside a block has its own scope.</p>
</div>
<div class="paragraph">
<p>It means the variables declared inside a block only last as long as the block
is executed.</p>
</div>
</div>
<div class="sect2">
<h3 id="_comments">1.5. Comments</h3>
<div class="paragraph">
<p>In Perl, a comment begins with a hash (<code>#</code>) character. Perl interpreter ignores
comments at both compile-time and runtime.</p>
</div>
<div class="paragraph">
<p>Typically, you use comments to document the logic of your code. The code tells
you what it does however comments provides information on why the code does so.</p>
</div>
<div class="paragraph">
<p>Comments are very important and useful to you as a programmer in order to
understand the code later. They’re also useful to other programmers who will
read and maintain your programs in the future.</p>
</div>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8;background-color: #181818">$salary</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$salary</span> <span style="color: #d8d8d8">+</span> <span style="color: #a1b56c">1.05</span><span style="color: #d8d8d8">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>What the code does is to increase the value of the variable <code>$salary</code> 5%.
However, why it does so was not documented.</p>
</div>
<div class="paragraph">
<p>Therefore the following code with comment is much clearer.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858"># increase salary %5 for employees who achieve KPI</span>
<span style="color: #d8d8d8;background-color: #181818">$salary</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$salary</span> <span style="color: #d8d8d8">+</span> <span style="color: #a1b56c">1.05</span><span style="color: #d8d8d8">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl also allows you to place a comment on the same line as the statement. See
the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8;background-color: #181818">$counter</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">0</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># reset the counter</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is important to use comments properly to make your code easier to
understand.</p>
</div>
</div>
<div class="sect2">
<h3 id="_whitespace">1.6. Whitespace</h3>
<div class="paragraph">
<p>Whitespaces are spaces, tabs, and newlines. Perl is very flexible in terms of
whitespaces usages. Consider the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8;background-color: #181818">$x</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$y</span><span style="color: #d8d8d8">=</span><span style="color: #a1b56c">20</span><span style="color: #d8d8d8">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Both lines of code work perfectly. We surrounded the assignment operator (<code>=</code>)
with whitespace in the first statement, but not in the second one.</p>
</div>
<div class="paragraph">
<p>Perl really doesn’t care about the whitespace. However, it is a good practice
to use whitespace to make the code more readable.</p>
</div>
</div>
<div class="sect2">
<h3 id="_keywords">1.7. Keywords</h3>
<div class="paragraph">
<p>Perl has a set of keywords that have special meanings to its language.</p>
</div>
<div class="paragraph">
<p>Perl keywords fall into some categories such as built-in function and control
keywords.</p>
</div>
<div class="paragraph">
<p>You should always avoid using keywords to name variables, functions,
<a href="doc/21-perl-modules.html#_Perl_modules">modules</a>, and other objects. Check it
out the <a href="http://learn.perl.org/docs/keywords.html">Perl keywords</a>.</p>
</div>
<div class="paragraph">
<p>Sometimes, it is fine to use a variable name such as <code>$print</code>, which is similar
to the built-in <code>print()</code> function. However, this may lead to confusion. In
addition, if the program has an issue, it’s more difficult to troubleshoot.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_variables">2. Perl Variables</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To manipulate data in your program, you use variables.</p>
</div>
<div class="paragraph">
<p>Perl provides three types of variables: scalars, lists, and hashes to help you
manipulate the corresponding data types including scalars, lists, and hashes.</p>
</div>
<div class="paragraph">
<p>We’ll focus on the scalar variable in this section.</p>
</div>
<div class="sect2">
<h3 id="_naming_variables">2.1. Naming variables</h3>
<div class="paragraph">
<p>You use scalar variables to manipulate scalar data such as
<a href="doc/03-perl-numbers.html#_Perl_numbers">numbers</a> and
<a href="doc/04-perl-strings.html#_Perl_strings">strings</a>,</p>
</div>
<div class="paragraph">
<p>A scalar variable starts with a dollar sign (<code>$</code>), followed by a letter or
underscore, after that, any combination of numbers, letters, and underscores.
The name of a variable can be up to 255 characters.</p>
</div>
<div class="paragraph">
<p>Perl is case-sensitive. The <code>$variable</code> and <code>$Variable</code> are different variables.</p>
</div>
<div class="paragraph">
<p>Perl uses the dollar sign (<code>$</code>) as a prefix for the scalar variables because of
the <code>$</code> looks like the character S in the scalar. You can use this tip to
remember when you want to declare a scalar variable.</p>
</div>
<div class="listingblock">
<div class="title">Valid variables:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl]">$gate = 10;
$_port = 20;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Invalid variables:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl]">$4whatever = 20; # no letter or underscore found after dollar sign ($)
$email-address = &#34;zen@example.com&#34;; # special character (-) found
$home url = &#34;http://localhost/perltutorial&#34;; # space is not allowed</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_declaring_variables">2.2. Declaring variables</h3>
<div class="paragraph">
<p>Perl doesn’t require you to declare a variable before using it.</p>
</div>
<div class="paragraph">
<p>For example, you can introduce a variable in your program and use it right away
as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">10</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$b</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">+</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In some cases, using a variable without declaring it explicitly may lead to
problems. Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#39;</span><span style="color: #a1b56c">red</span><span style="color: #d8d8d8">&#39;;</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Your favorite color is </span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8;background-color: #181818">$colour</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The expected output was <code>Your favorite color is red</code>.</p>
</div>
<div class="paragraph">
<p>However, in this case, you got <code>Your favorite color is</code>, because the <code>$color</code>
and <code>$colour</code> are different variables. The mistake was made because of the
<em>different variable names</em>.</p>
</div>
<div class="paragraph">
<p>To prevent such cases, Perl provides a <em>pragma</em> called <code>strict</code> that requires you
to declare variable explicitly before using it.</p>
</div>
<div class="paragraph">
<p>In this case, if you use the <code>my</code> keyword to declare a variable and try to run
the script, Perl will issue an error message indicating that a compilation
error occurred due to the <code>$colour</code> variable must be declared explicitly.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#39;</span><span style="color: #a1b56c">red</span><span style="color: #d8d8d8">&#39;;</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Your favorite color is </span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8;background-color: #181818">$colour</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A variable declared with the <code>my</code> keyword is a <em>lexically scoped</em> variable.</p>
</div>
<div class="paragraph">
<p>It means the variable is only accessible inside the enclosing block or all
blocks nested inside the enclosing block. In other words, the variable is local
to the enclosing block.</p>
</div>
<div class="paragraph">
<p>Now, you’ll learn a very important concept in programming called variable
scopes.</p>
</div>
</div>
<div class="sect2">
<h3 id="_perl_variable_scopes">2.3. Perl variable scopes</h3>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#39;</span><span style="color: #a1b56c">red</span><span style="color: #d8d8d8">&#39;;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">my favorite #1 color is </span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>
<span style="color: #585858"># another block</span>
<span style="color: #d8d8d8">{</span>
	<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#39;</span><span style="color: #a1b56c">blue</span><span style="color: #d8d8d8">&#39;;</span>
	<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">my favorite #2 color is </span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span><span style="color: #181818;background-color: #ab4642">  </span>
<span style="color: #d8d8d8">}</span>
<span style="color: #585858"># for checking</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">my favorite #1 color is </span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
<div class="quoteblock">
<div class="title">In the example above:</div>
<blockquote>
<div class="ulist">
<ul>
<li>
<p>First, declared a global variable named <code>$color</code>.</p>
</li>
<li>
<p>Then, displayed the favorite color by referring to the <code>$color</code> variable. As
expected, we get the red color in this case.</p>
</li>
<li>
<p>Next, created a new block and declared a variable with the same name <code>$color</code>
using the <code>my</code> keyword. The <code>$color</code> variable is lexical. It is a local
variable and only visible inside the enclosing block.</p>
</li>
<li>
<p>After that, inside the block, we displayed the favorite color and we got the
<code>blue</code> color. The local variable takes priority in this case.</p>
</li>
<li>
<p>Finally, following the block, we referred to the <code>$color</code> variable and Perl
referred to the <code>$color</code> global variable.</p>
</li>
</ul>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>If you want to declare global variables that are visible throughout your
program or from external packages, you can use <code>our</code> keyword as shown in the
following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">our</span> <span style="color: #d8d8d8;background-color: #181818">$color</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#39;</span><span style="color: #a1b56c">red</span><span style="color: #d8d8d8">&#39;;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_variable_interpolation">2.4. Perl variable interpolation</h3>
<div class="paragraph">
<p>Perl interpolates variables in double-quoted strings. It means if you place a
variable inside a double-quoted string, you’ll get the value of the variable
instead of its name.</p>
</div>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$amount</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">The amount is </span><span style="color: #a16946">$amount</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl interpolates the value of <code>$amount</code> into the string which is 20.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>Note that Perl only interpolates scalar variables and
<a href="doc/07-perl-array.html#_Perl_array">array</a>, not
<a href="doc/07-perl-hash.html#_Perl_hash">hashes</a>. In addition, the interpolation is
only applied to the double-quoted string, but not the single-quoted string.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_numbers">3. Perl Numbers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl has two kinds of numbers: integer and floating-point numbers.</p>
</div>
<div class="sect2">
<h3 id="_perl_integers">3.1. Perl integers</h3>
<div class="paragraph">
<p>Integers are whole numbers that have no digits after the decimal points i.e
<code>10</code>, <code>-20</code> or <code>100</code>.</p>
</div>
<div class="paragraph">
<p>In Perl, integers are often expressed as decimal integers, base 10. The
following illustrates some integer numbers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #d8d8d8;background-color: #181818">$x</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$y</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">100</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">$z</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">-</span><span style="color: #a1b56c">200</span><span style="color: #d8d8d8">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When the integer number is big, you often use a comma as a separator to make it
easier to read e.g., 123,763,213.</p>
</div>
<div class="paragraph">
<p>However, Perl already uses a comma (<code>,</code>) as a separator in the list so for
integer numbers Perl uses an underscore character (<code>_</code>) instead. In this case,
<code>123,763,213</code> is written in Perl as <code>123_763_213</code>.</p>
</div>
<div class="paragraph">
<p>Take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">123_763_213</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$a</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span> <span style="color: #585858"># 123763213</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the output of the example above, Perl uses no comma or underscore as the
separator.</p>
</div>
<div class="paragraph">
<p>Besides the decimal format, Perl also supports other formats including binary,
octal, and hexadecimal.</p>
</div>
<div class="paragraph">
<p>The following table shows you prefixes for formatting with binary, octal, and
hexadecimal integers.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Number</th>
<th class="tableblock halign-left valign-top">Format</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0b123</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Binary integer using a prefix of 0b</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0255</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Octal integer using a prefix of 0</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0xABC</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Hexadecimal integer using a prefix of 0x</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>All the following integer numbers are 12 in Perl:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>12
0b1100
014
0xC</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_floating_point_numbers">3.2. Perl floating-point numbers</h3>
<div class="paragraph">
<p>You use floating-point numbers to store real numbers. Perl represents
floating-point numbers in two forms:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Fixed point</strong>: the decimal point is fixed in the number to denote fractional
part starts e.g., <code>100.25</code></p>
</li>
<li>
<p><strong>Scientific</strong>: consists of a significand with the actual number value and an
exponent representing the power of 10 that the significand is multiplied by,
for example, <code>+1.0025e2</code> or  <code>-1.0025E2</code> is <code>100.25.</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The floating-point number holds 8 bytes, with 11 bits reserved for the exponent
and 53 bits for significand.</p>
</div>
<div class="paragraph">
<p>The range of floating-point numbers is essentially determined by the standard C
library of the underlying platform where Perl is running.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_string">4. Perl String</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl’s built-in string functions to manipulate strings.</p>
</div>
<div class="sect2">
<h3 id="_introduction_to_perl_strings">4.1. Introduction to Perl strings</h3>
<div class="paragraph">
<p>In Perl, a string is a sequence of characters surrounded by some kind of
quotation marks. A string can contain ASCII, UNICODE, and escape sequences
characters such as <code>\n</code>.</p>
</div>
<div class="paragraph">
<p>A Perl string has a length that depends on the amount of memory in your system,
which is theoretically unlimited.</p>
</div>
<div class="paragraph">
<p>The following example demonstrates single and double-quoted strings.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s1</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">string with doubled-quotes</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s2</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#39;</span><span style="color: #a1b56c">string with single quote</span><span style="color: #d8d8d8">&#39;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is important to remember that the double-quoted string replaces variables
inside it by their values, while the single-quoted string treats them as text.
This is known as variable interpolation in Perl.</p>
</div>
</div>
<div class="sect2">
<h3 id="_perl_string_alternative_delimiters">4.2. Perl string alternative delimiters</h3>
<div class="paragraph">
<p>Besides the single and double quotes, Perl also allows you to use quote-like
operators such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>q//</code> acts like a single-quoted string.</p>
</li>
<li>
<p>The <code>qq//</code> acts like double-quoted string.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can choose any non-alphabetic and non-numeric characters as the delimiters,
not only just characters <code>//</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">q/&#34;Are you learning Perl String today?&#34; We asked./</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">,&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$name</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#39;</span><span style="color: #a1b56c">Jack</span><span style="color: #d8d8d8">&#39;;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s2</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">qq/&#34;Are you learning Perl String today?&#34;$name asked./</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s2</span> <span style="color: #d8d8d8">,&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>How it works.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>First, defined a single-quoted string variable with the quote-like operator
<code>q/</code>. The string  <code>$s</code> ends with <code>/</code>.</p>
</li>
<li>
<p>Second, defined a double-quoted string with the quote-like operator <code>qq/</code>. In
this case, we used the <code>$name</code> variable inside a string and it is replaced by
its value, <code>Jack</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following example demonstrates string with the <code>^</code> delimiter.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">q^A string with different delimiter ^</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">,&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_string_functions">4.3. Perl string functions</h3>
<div class="paragraph">
<p>Perl provides a set of functions that allow you to manipulate strings
effectively. We cover the most commonly used string functions in the following
section for your reference.</p>
</div>
<div class="sect3">
<h4 id="_perl_string_length">4.3.1. Perl string length</h4>
<div class="paragraph">
<p>To find the number of characters in a string, you use the <code>length()</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">This is a string</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">length</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">),&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span> <span style="color: #585858">#17</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_changing_cases_of_string">4.3.2. Changing cases of string</h4>
<div class="paragraph">
<p>To change the cases of a string you use a pair of functions <code>lc()</code> and <code>uc()</code>
that returns the lowercase and uppercase versions of a string.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Change cases of a string</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">To upper case:</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">uc</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">),&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>

<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">To lower case:</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">lc</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">),&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_search_for_a_substring_inside_a_string">4.3.3. Search for a substring inside a string</h4>
<div class="paragraph">
<p>To search for a substring inside a string, you use <code>index()</code> and <code>rindex()</code>
functions.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>index()</code> function searches for a substring inside a string from a
specified position and returns the position of the first occurrence of the
substring in the searched string. If the position is omitted, it searches
from the beginning of the string.</p>
</li>
<li>
<p>The <code>rindex()</code> function works like the <code>index()</code> function except it searches
from the end of the string instead of from the beginning.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following example demonstrates how to use the <code>index()</code> and <code>rindex()</code>
functions:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Learning Perl is easy</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$sub</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Perl</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$p</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">index</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">$sub</span><span style="color: #d8d8d8">);</span> <span style="color: #585858"># rindex($s,$sub);</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">qq\The substring &#34;$sub&#34; found at position &#34;$p&#34; in string &#34;$s&#34;\</span><span style="color: #d8d8d8">,&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_get_or_modify_substring_inside_a_string">4.3.4. Get or modify substring inside a string</h4>
<div class="paragraph">
<p>To extract a substring out of a string, you use the <code>substr()</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>
<span style="color: #585858"># extract substring</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Green is my favorite color</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$color</span><span style="color: #181818;background-color: #ab4642"> </span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">substr</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">0</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">5</span><span style="color: #d8d8d8">);</span><span style="color: #181818;background-color: #ab4642">     </span> <span style="color: #585858"># Green</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$end</span><span style="color: #181818;background-color: #ab4642">   </span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">substr</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">-</span><span style="color: #a1b56c">5</span><span style="color: #d8d8d8">);</span><span style="color: #181818;background-color: #ab4642">       </span> <span style="color: #585858"># color</span>

<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$end</span><span style="color: #d8d8d8">,&#34;</span><span style="color: #a1b56c">:</span><span style="color: #d8d8d8">&#34;,</span><span style="color: #d8d8d8;background-color: #181818">$color</span><span style="color: #d8d8d8">,&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>

<span style="color: #585858"># replace substring</span>
<span style="color: #d8d8d8;background-color: #181818">substr</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">0</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">5</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">Red</span><span style="color: #d8d8d8">&#34;);</span> <span style="color: #585858">#Red is my favorite color</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">,&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_other_useful_perl_string_functions">4.3.5. Other useful Perl string functions</h4>
<div class="paragraph">
<p>The following table illustrates other useful Perl string functions with their
descriptions:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Function</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>chr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Return ASCII or UNICODE character of a number</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>crypt</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Encrypts passwords in one way fashion</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>hex</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Converts a hexadecimal string to the corresponding value</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>index</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Searches for a substring inside a string returns position where the first occurrence of the substring found</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>lc</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns a lowercase version of the string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>length</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the number of characters of a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>oct</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Converts a string to an octal number</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ord</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the numeric value of the first character of a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>q/string/</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates single-quoted strings</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>qq/string/</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates double-quoted strings</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reverse</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reverses a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>rindex</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Searches for a substring from right to left</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>sprintf</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Formats string to be used with print()</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>substr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Gets or modifies a substring in a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>uc</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the uppercase version of the string</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_operator">5. Perl Operator</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl operators including numeric operators, string operators, and logical operators.</p>
</div>
<div class="sect2">
<h3 id="_numeric_operators">5.1. Numeric operators</h3>
<div class="paragraph">
<p>Perl provides numeric operators to help you operate on numbers including
arithmetic, Boolean and bitwise operations. Let’s examine the different kinds
of operators in more detail.</p>
</div>
<div class="sect3">
<h4 id="_arithmetic_operators">5.1.1. Arithmetic operators</h4>
<div class="paragraph">
<p>Perl arithmetic operators deal with basic math such as adding, subtracting,
multiplying, diving, etc. To add (<code>+</code>) or subtract (<code>-</code>) numbers, you would do
something as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">10</span> <span style="color: #d8d8d8">+</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># 30</span>
<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">20</span> <span style="color: #d8d8d8">-</span> <span style="color: #a1b56c">10</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># 10</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To multiply or divide numbers, you use divide (<code>/</code>) and multiply (<code>*</code>) operators as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">10</span> <span style="color: #d8d8d8">*</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># 200</span>
<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">20</span> <span style="color: #d8d8d8">/</span> <span style="color: #a1b56c">10</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># 2</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When you combine adding, subtracting, multiplying, and dividing operators
together, Perl will perform the calculation in an order, which is known as
operator precedence.</p>
</div>
<div class="paragraph">
<p>The multiply and divide operators have higher precedence than add and subtract
operators, therefore, Perl performs multiplying and dividing before adding and
subtracting. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">print</span> <span style="color: #a1b56c">10</span> <span style="color: #d8d8d8">+</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">/</span><span style="color: #a1b56c">2</span> <span style="color: #d8d8d8">-</span> <span style="color: #a1b56c">5</span> <span style="color: #d8d8d8">*</span> <span style="color: #a1b56c">2</span> <span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># 10</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl performs 20/2 and 5*2 first, therefore you will get 10 + 10 – 10 = 10.</p>
</div>
<div class="paragraph">
<p>You can use brackets <code>()</code> to force Perl to perform calculations based on the
precedence you want as shown in the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">print</span> <span style="color: #d8d8d8">(((</span><span style="color: #a1b56c">10</span> <span style="color: #d8d8d8">+</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">)</span> <span style="color: #d8d8d8">/</span> <span style="color: #a1b56c">2</span> <span style="color: #d8d8d8">-</span> <span style="color: #a1b56c">5</span><span style="color: #d8d8d8">)</span> <span style="color: #d8d8d8">*</span> <span style="color: #a1b56c">2</span><span style="color: #d8d8d8">);</span> <span style="color: #585858"># 20;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To raise one number to the power of another number, you use the exponentiation
operator.</p>
</div>
<div class="listingblock">
<div class="title">Exponentiation operators:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">2</span><span style="color: #d8d8d8">**</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># = 2 * 2 * 2 = 8.</span>
<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">3</span><span style="color: #d8d8d8">**</span><span style="color: #a1b56c">4</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># = 3 * 3 * 3 * 3 = 81.</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To get the remainder of the division of one number by another, you use the modulo operator (<code>%</code>).</p>
</div>
<div class="paragraph">
<p>It is handy to use the modulo operator (<code>%</code>) to check if a number is odd or even
by dividing it by 2 to get the remainder. If the remainder is zero, the number
is even, otherwise, the number is odd. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">4</span> <span style="color: #d8d8d8">%</span> <span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># 0 even</span>
<span style="color: #ba8baf">print</span> <span style="color: #a1b56c">5</span> <span style="color: #d8d8d8">%</span> <span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># 1 odd</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_bitwise_operators">5.1.2. Bitwise Operators</h4>
<div class="paragraph">
<p>Bitwise operators allow you to operate on numbers one bit at a time. Think of a
number as a series of bits e.g., <code>125</code> can be represented in binary form as
<code>1111101</code>. Perl provides all basic bitwise operators including and (<code>&amp;</code>), or
(<code>|</code>), exclusive or (<code>^</code>) , not (<code>~</code>) operators, shift right (<code>&gt;&gt;</code>), and shift
left (<code>&lt;&lt;</code>) operators.</p>
</div>
<div class="paragraph">
<p>The bitwise operators perform from right to left. In other words, bitwise
operators perform from the rightmost bit to the leftmost bit.</p>
</div>
<div class="listingblock">
<div class="title">Bitwise operations</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">0b0101</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 5</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$b</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">0b0011</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 3</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">&amp;</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 0001 or 1</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>

<span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">|</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 0111 or 7</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>

<span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">^</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 0110 or 6</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>

<span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">~</span><span style="color: #d8d8d8;background-color: #181818">$a</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 11111111111111111111111111111010 (64bits computer) or 4294967290</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>

<span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">&gt;&gt;</span> <span style="color: #a1b56c">1</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 0101 shift right 1 bit, 010 or 2</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>

<span style="color: #d8d8d8;background-color: #181818">$c</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">&lt;&lt;</span> <span style="color: #a1b56c">1</span><span style="color: #d8d8d8">;</span> <span style="color: #585858"># 0101 shift left 1 bit, 1010 or 10</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$c</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_comparison_operators_for_numbers">5.1.3. Comparison operators for numbers</h4>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Equality</th>
<th class="tableblock halign-left valign-top">Operators</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>==</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Not Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>!=</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Comparison</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;⇒</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&gt;</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>⇐</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&gt;=</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>All the operators in the table above are obvious except the number comparison
operator <code>&lt;⇒</code> which is also known as spaceship operator.</p>
</div>
<div class="paragraph">
<p>The number comparison operator is often used in sorting numbers. See the code
below:</p>
</div>
$a &lt;=&gt; $b
<div class="ulist">
<ul>
<li>
<p><strong>1</strong> if <code>$a</code> is greater than <code>$b</code></p>
</li>
<li>
<p><strong>0</strong> if <code>$a</code> and <code>$b</code> are equal</p>
</li>
<li>
<p><strong>-1</strong> if <code>$a</code> is lower than <code>$b</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">10</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$b</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">20</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">&lt;=&gt;</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>

<span style="color: #d8d8d8;background-color: #181818">$b</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">10</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">&lt;=&gt;</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span>

<span style="color: #d8d8d8;background-color: #181818">$b</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">5</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$a</span> <span style="color: #d8d8d8">&lt;=&gt;</span> <span style="color: #d8d8d8;background-color: #181818">$b</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_string_operators">5.2. String operators</h3>
<div class="sect3">
<h4 id="_comparison_operators">5.2.1. Comparison operators</h4>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Equality</th>
<th class="tableblock halign-left valign-top">Operators</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>eq</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Not Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ne</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Comparison</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>cmp</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>lt</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>gt</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>le</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ge</code></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_concatenation_operators">5.2.2. Concatenation operators</h4>
<div class="paragraph">
<p>Perl provides the concatenation (<code>.</code>) and repetition (<code>x</code>) operators that allow
you to manipulate strings</p>
</div>
<div class="listingblock">
<div class="title">Concatenation operator (<code>.</code>)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">print</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">This is</span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c"> concatenation operator</span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8">.</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Repetition operators (<code>x</code>)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #ba8baf">print</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">a message </span><span style="color: #d8d8d8">&#34;</span> <span style="color: #d8d8d8;background-color: #181818">x</span> <span style="color: #a1b56c">4</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span></code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_the_chomp_operator">5.2.3. The chomp() operator</h4>
<div class="paragraph">
<p>The <code>chomp()</code> operator (or function) removes the last character in a string and
returns a number of characters that were removed. The <code>chomp()</code> operator is
very useful when dealing with the user’s input because it helps you remove the
new line character \n from the string that the user entered.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">;</span>
<span style="color: #d8d8d8;background-color: #181818">chomp</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&lt;</span><span style="color: #d8d8d8;background-color: #181818">STDIN</span><span style="color: #d8d8d8">&gt;</span><span style="color: #d8d8d8">);</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8;background-color: #181818">$s</span><span style="color: #d8d8d8">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
The <code>&lt;STDIN&gt;</code> is used to get input from users.
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_logical_operators">5.3. Logical operators</h3>
<div class="paragraph">
<p>Logical operators are often used in control statements such as
<a href="doc/09-perl-if-statement.html#_Perl_if_Statement">if</a>,
<a href="doc/13-perl-while-loop.html#_Perl_while_Loop">while</a>,
<a href="doc/11-perl-given.html#_Perl_given">given</a>,
etc., to control the flow of the program. The following are logical operators in Perl:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>$a &amp;&amp; $b</code> performs the logic <code>AND</code> of two variables or expressions. The
logical <code>&amp;&amp;</code> operator checks if both variables or expressions are true.</p>
</li>
<li>
<p><code>$a || $b</code> performs the logic <code>OR</code> of two variables or expressions. The
logical <code>||</code> operator checks whether a variable or expression is true.</p>
</li>
<li>
<p><code>!$a</code> performs the logic <code>NOT</code> of the variable or expression. The logic <code>!</code>
operator inverts the value of the following variable or expression. In the
other words, it converts <code>true</code> to <code>false</code> or <code>false</code> to <code>true</code>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_list">6. Perl List</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl list and how to manipulate list elements using various techniques such as
list slicing, ranging and qw() function.</p>
</div>
<div class="paragraph">
<p>A Perl list is a sequence of
<a href="doc/02-perl-variables.html#_Perl_Variables">scalar</a>
values. You use parenthesis and comma operators to construct a list. Each value
is the list is called list element. List elements are indexed and ordered. You
can refer to each element by its position.</p>
</div>
<div class="sect2">
<h3 id="_simple_perl_list">6.1. Simple Perl list</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8">();</span>
<span style="color: #d8d8d8">(</span><span style="color: #a1b56c">10</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">20</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">30</span><span style="color: #d8d8d8">);</span>
<span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">this</span><span style="color: #d8d8d8">&#34;,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">is</span><span style="color: #d8d8d8">&#34;,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">a</span><span style="color: #d8d8d8">&#34;,&#34;</span><span style="color: #a1b56c">list</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">In the example above:</div>
<ul>
<li>
<p>The first list <code>()</code> is an empty list.</p>
</li>
<li>
<p>The second list <code>(10,20,30)</code> is a list of integers.</p>
</li>
<li>
<p>The third list <code>(&#34;this&#34;, &#34;is&#34;, &#34;a&#34;,&#34;list&#34;)</code> is a list of strings.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Each element in the list is separated by a comma <code>(,)</code>. The print` operator is
a list operator. So let’s display our lists above with the <code>print</code> operator to
see how it works:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(());</span> <span style="color: #585858"># display nothing</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">10</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">20</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">30</span><span style="color: #d8d8d8">);</span> <span style="color: #585858"># display 102030</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">this</span><span style="color: #d8d8d8">&#34;,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">is</span><span style="color: #d8d8d8">&#34;,</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">a</span><span style="color: #d8d8d8">&#34;,&#34;</span><span style="color: #a1b56c">list</span><span style="color: #d8d8d8">&#34;);</span> <span style="color: #585858"># display: thisisalist</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We passed several lists to the <code>print</code> operator to display their elements. All
the lists that we have seen so far contain an element with the same data type.
These lists are called simple lists.</p>
</div>
</div>
<div class="sect2">
<h3 id="_complex_perl_list">6.2. Complex Perl list</h3>
<div class="paragraph">
<p>A Perl list may contain elements that have different data types. This kind of
list is called a complex list. Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$x</span> <span style="color: #d8d8d8">=</span> <span style="color: #a1b56c">10</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">my</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a1b56c">a string</span><span style="color: #d8d8d8">&#34;;</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a1b56c">complex list</span><span style="color: #d8d8d8">&#34;,</span> <span style="color: #d8d8d8;background-color: #181818">$x</span> <span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">$s</span> <span style="color: #d8d8d8">,&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_qw_function">6.3. Using qw function</h3>
<div class="paragraph">
<p>Perl provides the <code>qw()</code> function that allows you to get a list by extracting
words out of a string using the space as a delimiter. The <code>qw</code> stands for quote
word. The two lists below are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#39;</span><span style="color: #a1b56c">red</span><span style="color: #d8d8d8">&#39;,&#39;</span><span style="color: #a1b56c">green</span><span style="color: #d8d8d8">&#39;,&#39;</span><span style="color: #a1b56c">blue</span><span style="color: #d8d8d8">&#39;);</span> <span style="color: #585858"># redgreenblue</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span>

<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">qw(red green blue)</span><span style="color: #d8d8d8">);</span> <span style="color: #585858"># redgreenblue</span>
<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Similar to the <code>q/</code> and <code>q//</code> operators, you can use any non-alphanumeric
character as a delimiter. The following lists are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #a1b56c">qw\this is a list\</span><span style="color: #d8d8d8">;</span>
<span style="color: #a1b56c">qw{this is a list}</span><span style="color: #d8d8d8">;</span>
<span style="color: #a1b56c">qw[this is a list]</span><span style="color: #d8d8d8">;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_flattening_list">6.4. Flattening list</h3>
<div class="paragraph">
<p>If you put a list, called an internal list, inside another list, Perl
automatically flattens the internal list. The following lists are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">4</span><span style="color: #d8d8d8">,(</span><span style="color: #a1b56c">5</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">6</span><span style="color: #d8d8d8">))</span>
<span style="color: #d8d8d8">(</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">4</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">5</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">6</span><span style="color: #d8d8d8">)</span>
<span style="color: #d8d8d8">((</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">4</span><span style="color: #d8d8d8">),</span><span style="color: #a1b56c">5</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">6</span><span style="color: #d8d8d8">)</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_list_element">6.5. Accessing list element</h3>
<div class="paragraph">
<p>You can access elements of a list by using the zero-based index. To access the
n<sup>th</sup> element, you put (n – 1) index inside square brackets.</p>
</div>
<div class="listingblock">
<div class="title">Let’s take a look at the following example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #585858">#!/usr/bin/perl</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">warnings</span><span style="color: #d8d8d8">;</span>
<span style="color: #ba8baf">use</span> <span style="color: #d8d8d8;background-color: #181818">strict</span><span style="color: #d8d8d8">;</span>

<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span>
     <span style="color: #d8d8d8">(</span><span style="color: #a1b56c">1</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">)[</span><span style="color: #a1b56c">0</span><span style="color: #d8d8d8">]</span> <span style="color: #585858"># 1 first element</span>
<span style="color: #d8d8d8">);</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># new line</span>

<span style="color: #ba8baf">print</span><span style="color: #d8d8d8">(</span>
     <span style="color: #d8d8d8">(</span><span style="color: #a1b56c">1</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">)[</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">]</span> <span style="color: #585858"># 3 third element</span>
<span style="color: #d8d8d8">);</span>
<span style="color: #ba8baf">print</span> <span style="color: #d8d8d8">&#34;</span><span style="color: #a16946">\n</span><span style="color: #d8d8d8">&#34;;</span> <span style="color: #585858"># new line</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To get multiple elements of a list at a time, you can put a list inside square
brackets. This feature is called list slice. You can omit the parenthesis of
the list inside the square bracket.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">1</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">4</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">5</span><span style="color: #d8d8d8">)[</span><span style="color: #a1b56c">0</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">,</span><span style="color: #a1b56c">3</span><span style="color: #d8d8d8">]</span> <span style="color: #585858"># (1,3,4)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The above code returns a list of three elements <code>(1, 3, 4)</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ranges">6.6. Ranges</h3>
<div class="paragraph">
<p>Perl allows you to build a list based on a range of numbers or characters e.g.,
a list of numbers from 1 to 100, a list of characters from a to z. The
following example defines two lists:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="perl"><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">1</span><span style="color: #d8d8d8">..</span><span style="color: #a1b56c">100</span><span style="color: #d8d8d8">)</span>
<span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">a</span><span style="color: #d8d8d8">..</span><span style="color: #d8d8d8;background-color: #181818">z</span><span style="color: #d8d8d8">)</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_wip">7. WIP</h2>
<div class="sectionbody">

</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Grafana</title>
      <link>https://hossein-lap.github.io/notes/grafana/</link>
      <pubDate>Sat, 06 Jul 2024 13:24:36 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/grafana/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_grafana_stack">1. Grafana stack</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Grafana offers many tools, which we’ve grouped into the following categories:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The core Grafana stack: <strong>LGTM</strong> and the <strong>Grafana Agent</strong></p>
</li>
<li>
<p>Grafana enterprise plugins</p>
</li>
<li>
<p>Incident response tools</p>
</li>
<li>
<p>Other Grafana tools</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_the_core_grafana_stack">1.1. The core Grafana stack</h3>
<div class="paragraph">
<p>The core Grafana stack consists of <strong>Mimir</strong>, <strong>Loki</strong>, <strong>Tempo</strong>, and <strong>Grafana</strong>; the
acronym <strong>LGTM</strong> is often used to refer to this tech stack.</p>
</div>
<div class="paragraph">
<div class="title">Mimir</div>
<p>Mimir is a <strong>Time Series Database</strong> (<strong>TSDB</strong>) for the storage of metric data. It
uses low-cost object storage such as S3, GCS, or Azure Blob Storage.
Mimir is a fully Prometheus-compatible solution that addresses the common
scalability problems encountered with storing and searching huge quantities of
metric data.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>An active time series is a metric with a value and unique labels that has
reported a sample in the last 20 minutes.</p>
</div>
</div>
</div>
<div class="paragraph">
<div class="title">Loki</div>
<p>Loki is a set of components that offer a full feature logging stack. Loki uses
lower-cost object storage such as S3 or GCS, and only indexes label metadata.</p>
</div>
<div class="paragraph">
<p>Log aggregation tools typically use two data structures to store log data. An
index that contains references to the location of the raw data paired with
searchable metadata, and the raw data itself stored in a compressed form.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>Loki differs from a lot of other log aggregation tools by keeping the index
data relatively small and scaling the search functionality by using horizontal
scaling of the querying component.</p>
</div>
</div>
</div>
<div class="paragraph">
<div class="title">Tempo</div>
<p>Tempo is a storage backend for high-scale distributed trace telemetry, with the
aim of sampling 100% of the read path. Like Loki and Mimir, it leverages
lower-cost object storage such as S3, GCS, or Azure Blob Storage.</p>
</div>
<div class="paragraph">
<p>Tempo also offers the ability to generate metrics from spans as they are
ingested; these metrics can be written to any backend that supports Prometheus
remote write.</p>
</div>
<div class="paragraph">
<div class="title">Grafana</div>
<p>Grafana has been a staple for fantastic visualization of data since 2014. It
has targeted the ability to connect to a huge variety of data sources from
TSDBs to relational databases and even other observability tools. Grafana has
over 150 data source plugins available. Grafana has a huge community using it
for many different purposes. This community supports over 6,000 dashboards,
which means there is a starting place for most available technologies with
minimal time to value.</p>
</div>
<div class="paragraph">
<div class="title">Grafana Agent</div>
<p>Grafana Agent is a collection of tools for collecting logs, metrics, and
traces. There are many other collection tools that Grafana integrates well
with.</p>
</div>
</div>
<div class="sect2">
<h3 id="_grafana_enterprise_plugins">1.2. Grafana Enterprise plugins</h3>
<div class="paragraph">
<p>These are part of any paid subscription to Grafana.</p>
</div>
<div class="paragraph">
<p>The Enterprise data source plugins allow organizations to read data from many
other storage tools they may use, from software development tools such as <strong>GitLab</strong>
and <strong>Azure DevOps</strong> to business intelligence tools such as <strong>Snowflake</strong>,
<strong>Databricks</strong>, and <strong>Looker</strong>. Grafana also offers tools to read data from many
other observability tools, which enables organizations to build comprehensive
operational coverage while offering individual teams a choice of the tools they
use.</p>
</div>
</div>
<div class="sect2">
<h3 id="_grafana_incident_response_and_management">1.3. Grafana incident response and management</h3>
<div class="paragraph">
<p>Grafana offers three products in the <strong>incident response and management</strong> (<strong>IRM</strong>)
space:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>At the foundation of IRM are <strong>alerting rules</strong>, which can notify via messaging
apps, email, or Grafana OnCall</p>
</li>
<li>
<p><strong>Grafana OnCall</strong> offers an on-call schedule management system that
centralizes alert grouping and escalation routing</p>
</li>
<li>
<p><strong>Grafana Incident</strong> offers a chatbot functionality that can set up necessary
incident spaces, collect timelines for a post-incident review process, and
even manage the incident directly from a messaging service</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_other_grafana_tools">1.4. Other Grafana tools</h3>
<div class="paragraph">
<p>Grafana Labs continues to be a leader in observability and has acquired several
companies in this space to release new products that complement the tools we’ve
already discussed.</p>
</div>
<div class="paragraph">
<div class="title">Faro</div>
<p><strong>Grafana Faro</strong> is a JavaScript agent that can be added to frontend web
applications. The project allows for <strong>real user monitoring</strong> (<strong>RUM</strong>) by
collecting telemetry from a browser.</p>
</div>
<div class="paragraph">
<p>By adding RUM into an environment where backend applications and infrastructure
are instrumented, observers gain the ability to traverse data from the full
application stack.</p>
</div>
<div class="paragraph">
<div class="title">k6</div>
<p><strong>k6</strong> is a load testing tool that provides both a packaged tool to run in your
own infrastructure and a cloud <strong>Software as a Service</strong> (<strong>SaaS</strong>) offering. Load
testing, especially as part of a CI/CD pipeline, really enables teams to see
how their application will perform under load, and evaluate optimizations and
refactoring. Paired with other detailed analysis tools such as Pyroscope, the
level of visibility and accessibility to non-technical members of the team can
be astounding.</p>
</div>
<div class="paragraph">
<div class="title">Pyroscope</div>
<p><strong>Pyroscope</strong> is a tool that enable teams to engage in the continuous profiling
of system resource use by applications (CPU, memory, etc.). Pyroscope
advertises that with a minimal overhead of ~2-5% of performance, they can
collect samples as frequently as every 10 seconds. <strong>Phlare</strong> is a Grafana Labs
project started in 2022, and the two projects have now merged.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_common_log_formats">2. Common log formats</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Logs support performance and capacity monitoring in infrastructure, bug
detection in software, root cause analysis, user behavior tracking, and more.
Following certain guidelines will help your future self when you need to
analyze logs.</p>
</div>
<div class="paragraph">
<p>Log formats usually identify if they are structured or unstructured, the data
types used in them, and if any encoding or delimitation is being used.</p>
</div>
<div class="sect2">
<h3 id="_structured_semi_structured_and_unstructured_logging">2.1. Structured, semi-structured, and unstructured logging</h3>
<div class="paragraph">
<p>It does not matter what your logs look like and they can come in structured,
semi-structured, or unstructured formats.</p>
</div>
<div class="paragraph">
<p>when designing and building observability solutions, it’s important to
understand the log formats you are working with. This ensures that you can
ingest, parse, and store the data in a way that it can be used effectively.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If you familiarized yourself with the <em>personas</em>, you have an awareness of who
they will be used by and for what purpose.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_structured_logging">2.1.1. Structured logging</h4>
<div class="paragraph">
<p><strong>Structured logs</strong> have a predetermined message format that allows them to be
treated as datasets rather than text. The idea of structured logging is to
present data with a defined pattern that can be easily understood by humans and
efficiently processed by machines. The log entries are often delimited with
characters such as a comma, space, or hyphen. Data fields may also be joined
using an equals sign or colon for key-value pairs, such as <code>name=Diego</code> or
<code>city=Berlin</code>.</p>
</div>
<div class="literalblock">
<div class="title">A structured log format</div>
<div class="content">
<pre>{
&#34;timestamp&#34;: &#34;2023-04-25T12:15:03.006Z&#34;,
&#34;message&#34;: &#34;User Diego.Developer has logged in&#34;,
&#34;log&#34;: {
&#34;level&#34;: &#34;info&#34;,
&#34;file&#34;: &#34;auth.py&#34;,
&#34;line&#34;: 77
},
&#34;user&#34;: {
&#34;name&#34;: &#34;diego.developer&#34;,
&#34;id&#34;: 123
},
&#34;event&#34;: {
&#34;success&#34;: true
}
}</pre>
</div>
</div>
<div class="paragraph">
<p>An additional benefit of structured logging is that you can validate the
conformation of the data to a schema with tools such as JSON schema. This opens
up the possibility of making version control changes to the schema, which is
where logs and event bus technology overlap.</p>
</div>
</div>
<div class="sect3">
<h4 id="_semi_structured_logging">2.1.2. Semi-structured logging</h4>
<div class="paragraph">
<p><strong>Semi-structured</strong> logs aim to bridge the gap between unstructured and structured
and, as a result, can be quite complicated. They are designed to be easy for
humans to read but also have a schema that makes it possible for machines to
process them too. They have complex field and event separators and usually come
with a defined pattern to aid with ingesting and parsing. Parsing is usually
done using regular expressions or other code.</p>
</div>
</div>
<div class="sect3">
<h4 id="_unstructured_logging">2.1.3. Unstructured logging</h4>
<div class="paragraph">
<p><strong>Unstructured logging</strong> typically refers to log entries that are presented in a
textual format that can easily be read by humans but is difficult for machines
to process. They are often color-coded with blank spaces to improve
presentation and readability.</p>
</div>
<div class="paragraph">
<p>Parsing and splitting the data correctly creates a disassociation between
events and their identifying metadata. An unstructured log will require some
custom parsing, requiring intimate knowledge of the data and often creating
additional work for the engineer when ingesting data. This also creates
technical liability; the dependency on the log remaining the same restricts
developers from changing logs or runs the risk of parsing and reporting on
unstructured logs prone to breaking.</p>
</div>
<div class="paragraph">
<p>To aid the ability of machines to process unstructured logs, encapsulation
prevents entries such as stack traces from splitting at an inappropriate
location.</p>
</div>
<div class="paragraph">
<p>The following is an example of a multiline log, with a naive encapsulation that
looks for line breaks; this will appear in logging systems as four distinct
events:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>2023-04-25 12:15:03,006 INFO [SVR042] UserMembershipsIterable Found 4
children for 4 groups in 3 ms
Begin Transaction update record.
Process started.
Process completed.</pre>
</div>
</div>
<div class="paragraph">
<p>With encapsulation based on the timestamp at the start of the event, this will
be stored correctly for searching.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_sample_log_formats">2.2. Sample log formats</h3>
<div class="paragraph">
<p>Many log formats have been used in computer systems. All of these formats have
a common goal of presenting a standard structure or set of fields for recording
important information about the activity of a computer system.</p>
</div>
<div class="sect3">
<h4 id="_common_event_format_cef">2.2.1. Common Event Format (CEF)</h4>
<div class="paragraph">
<p>Developed by ArcSight to fulfill the <strong>Security Information and Event Management</strong>
(SIEM) use case, the CEF is a structured text-based log format. Using UTF-8
encoding, the format contains a prefix, a CEF header, and a body containing
additional enrichment data.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Log Section</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Prefix</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">It combines the event timestamp and source hostname</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">CEF header</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>It combines the following pieces of metadata:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Software version</p>
</li>
<li>
<p>Vendor name</p>
</li>
<li>
<p>Product name</p>
</li>
<li>
<p>Product version</p>
</li>
<li>
<p>Event name</p>
</li>
<li>
<p>Product event class identification code</p>
</li>
<li>
<p>Event severity</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Body</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">It contains a list of key-value pairs</p></td>
</tr>
</tbody>
</table>
<div class="literalblock">
<div class="title">Example</div>
<div class="content">
<pre>CEF:0|Security Provider|Security Product|Version|123|User
Authenticated|3|src=10.51.113.149 suser=diego target=diego msg=User
authenticated from 1001:db7::5</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_ncsa_common_log_format_clf">2.2.2. NCSA Common Log Format (CLF)</h4>
<div class="paragraph">
<p>As one of the oldest log formats used by web servers, the NCSA CLF has for a
long time been the most common and well-known log formats. It has a fixed
format text-based structure and therefore cannot be customized at all.</p>
</div>
<div class="ulist">
<div class="title">Here is the NCSA CLF field list:</div>
<ul>
<li>
<p>Remote host address</p>
</li>
<li>
<p>Remote log name</p>
</li>
<li>
<p>Username</p>
</li>
<li>
<p>Timestamp</p>
</li>
<li>
<p>Request and protocol version</p>
</li>
<li>
<p>HTTP status code</p>
</li>
<li>
<p>Bytes sento</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Where data is missing from the log, a hyphen acts as a placeholder. Unsupported
characters are replaced with the + symbol.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example NCSA CLF log:</div>
<div class="content">
<pre>127.0.0.1 user-identifier diego [25/Apr/2023:12:15:03 -0000] &#34;GET /
apache_pb.gif HTTP/1.1&#34; 200 2326</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_w3c_extended_log_file_format">2.2.3. W3C Extended Log File Format</h4>
<div class="paragraph">
<p>The Microsoft Internet Information Server log format known as W3C is a
structured yet configurable format. Full control over the included fields
ensures log files contain the most relevant data. Identification of the
information or direction of flow is denoted using a string prefix: server (S),
client ©, server to client (SC), and client to server (CS).</p>
</div>
<div class="ulist">
<div class="title">Here is the W3C Extended Log File Format field list:</div>
<ul>
<li>
<p>Timestamp</p>
</li>
<li>
<p>Client IP</p>
</li>
<li>
<p>Server IP</p>
</li>
<li>
<p>URI-stem</p>
</li>
<li>
<p>HTTP status code</p>
</li>
<li>
<p>Bytes sent</p>
</li>
<li>
<p>Bytes received</p>
</li>
<li>
<p>Time taken</p>
</li>
<li>
<p>Version</p>
</li>
</ul>
</div>
<div class="literalblock">
<div class="title">Here is an example W3C log:</div>
<div class="content">
<pre>#Software: Internet Information Services 10.0
#Version: 1.0
#Date: 2023-04-25 12:15:03
#Fields: time c-ip cs-method cs-uri-stem sc-status cs-version
12:15:03 10.51.113.149 GET /home.htm 200 HTTP/1.0</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_windows_event_log">2.2.4. Windows Event Log</h4>
<div class="paragraph">
<p>The Microsoft Windows operating system comes with a built-in complex structured
logging system that captures data related to specific events on the operating
system. There are four common Windows event log categories - system,
application, security, and setup - and an additional special category for
forwarded events.</p>
</div>
<div class="paragraph">
<p>Each event log is also one of five different types: information, warning,
error, success audit, and failure audit. Windows Event Log is one of the most
verbose log formats in use. It usually includes details such as timestamp,
event ID, username, hostname, message, and category, making it invaluable in
diagnosing problems. Windows event IDs are documented and searchable, so you
can easily get detailed information regarding the log event; they are grouped
into categories, narrowing down the area where the event occurred, which makes
debugging very accurate.</p>
</div>
<div class="literalblock">
<div class="title">Here is a trimmed example of Microsoft Windows Event Log:</div>
<div class="content">
<pre>An account was successfully logged on.
Subject:
Security ID: SYSTEM
Account Name: DESKTOP-TMC369$
Account Domain: WORKGROUP
Logon ID: 0xE37
Logon Information:
New Logon:
Security ID: AD\DiegoDeveloper
Account Name: diego.developer@themelt.cafe
Account Domain: AD
Logon ID: 0xEC4093F
Network Information:
Workstation Name: DESKTOP-TMC369</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_javascript_object_notation_json">2.2.5. JavaScript Object Notation (JSON)</h4>
<div class="paragraph">
<p>As one of the newer yet most commonly used log formats today, JSON is a
structured format constructed from multiple key-value pairs. Using JSON, data
can be nested into different layers while keeping the format easy to read.
Additionally, different data types can be represented, such as string, number,
Boolean, null, object, and array.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example JSON log file:</div>
<div class="content">
<pre>{
&#34;timestamp&#34;: &#34;2023-04-25T12:15:03.006Z&#34;,
&#34;message&#34;: &#34;User Diego.Developer has logged in&#34;,
&#34;log&#34;: {
&#34;level&#34;: &#34;info&#34;,
&#34;file&#34;: &#34;auth.py&#34;,
&#34;line&#34;: 77
},
&#34;user&#34;: {
&#34;name&#34;: &#34;diego.developer&#34;,
&#34;id&#34;: 123
},
&#34;event&#34;: {
&#34;success&#34;: true
}
}</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_syslog">2.2.6. Syslog</h4>
<div class="paragraph">
<p>The go-to log format for many years and still widely used, Syslog is a defined
standard for creating and transmitting logs. The <strong>Syslog transport protocol</strong>
specifies how log transmission takes place, as well as the data format. The
default network ports for the protocol are <code>514</code> and <code>6514</code>, with the latter
being used for encryption.</p>
</div>
<div class="paragraph">
<p>The Syslog message format combines a standardized header and message holding
the body of the log.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example Syslog log:</div>
<div class="content">
<pre>Apr 25 12:15:03 server1 sshd[41458] : Failed password for  diego from
10.51.113.149 port 22 ssh2</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_logfmt">2.2.7. Logfmt</h4>
<div class="paragraph">
<p>Logfmt is a widely used log format that fits as human readable and structured
so that computers and people can both read it. A Logfmt-formatted log line
consists of any number of key-value pairs that can be easily parsed. As there
are no standards, it is easy to extend and perfect for developers to simply add
more key-value pairs to the output.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example Logfmt log:</div>
<div class="content">
<pre>level=info method=GET path=/ host=myserver.me fwd=&#34;10.51.113.149&#34;
service=4ms status=200</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exploring_metric_types_and_best_practices">3. Exploring metric types and best practices</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Metrics, along with logs, are an essential tool for software developers and
operators, providing them with indicators regarding the state of applications
and systems. Resource usage data is great for monitoring a metric that captures
numerical data over time. There are many different types of resources but some
good examples would be CPU or RAM usage, the number of messages in a queue, and
the number of received HTTP requests. Metrics are frequently generated and
easily enriched with labels, attributes, or dimensions, making them efficient
to search and ideal in determining if something is wrong, or different from
usual.</p>
</div>
<div class="ulist">
<div class="title">A metric commonly has the following fields:</div>
<ul>
<li>
<p><strong>Name</strong>: This uniquely identifies the metric</p>
</li>
<li>
<p><strong>Data point value(s)</strong>: The data that’s stored varies by metric type</p>
</li>
<li>
<p><strong>Dimensions</strong>: Additional enrichment labels or attributes that support analysis</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_wip">3.1. WIP</h3>

</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Accessing K8S pods</title>
      <link>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</link>
      <pubDate>Fri, 31 May 2024 18:50:32 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><a href="/pdfs/notes/k8s-ingress-loadbalancer.pdf">Download this note as a PDF</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_forwarding_a_local_network_port_to_a_port_in_the_pod">1. Forwarding a Local Network Port to a Port in The Pod</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you want to talk to a specific pod without going through a service (for
debugging or other reasons), Kubernetes allows you to configure port forwarding
to the pod.</p>
</div>
<div class="paragraph">
<p>This is done through the <code>kubectl port-forward</code> command. The following command
will forward your machine’s local port <code>8888</code> to port <code>8080</code> of your
e.g <code>kubia-manual</code> pod.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl port-forward kubia-manual 8888:8080</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>... Forwarding from 127.0.0.1:8888 -&gt; 8080
... Forwarding from [::1]:8888 -&gt; 8080</pre>
</div>
</div>
<div class="sect2">
<h3 id="_connecting_to_the_pod_through_the_port_forwarder">1.1. Connecting to The Pod Through the Port Forwarder</h3>
<div class="paragraph">
<p>In a different terminal, you can now use curl to send an HTTP request to your pod
through the <code>kubectl port-forward</code> proxy running on <code>localhost:8888</code>.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>curl localhost:8888</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-manual</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_service_object">2. Service Object</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each pod gets its own IP address, but this address is internal to the cluster
and isn’t accessible from outside of it. To make the pod accessible from the
outside, you’ll expose it through a Service object. You’ll create a special
service of type <code>LoadBalancer</code>, because if you create a regular service (a
<code>ClusterIP</code> service), like the pod, it would also only be accessible from
inside the cluster. By creating a <code>LoadBalancer</code> type service, an external load
balancer will be created and you can connect to the pod through the load
balancer’s public IP.</p>
</div>
<div class="sect2">
<h3 id="_creating_a_service_object">2.1. Creating a Service Object</h3>
<div class="paragraph">
<p>To create the service, you’ll tell Kubernetes to expose the ReplicationController you
created:</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using YAML file</div>
<div class="listingblock">
<div class="title">Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Service</span>
<span style="color: #7cafc2">metadata</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span> <span style="color: #585858"># service&#39;s port</span>
    <span style="color: #7cafc2">targetPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8080</span> <span style="color: #585858"># the forward-to port by service</span>
  <span style="color: #7cafc2">selector</span><span style="color: #d8d8d8">:</span> <span style="color: #585858"># all pods labeled `kubia` will follow/select this service</span>
    <span style="color: #7cafc2">app</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Apply the service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl create <span style="color: #f7ca88">-f</span> kubia-srv.yaml</code></pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using kubectl CLI options</div>
<div class="listingblock">
<div class="title">Template:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl expose rc &lt;rep-controller-name&gt; <span style="color: #f7ca88">--type</span><span style="color: #d8d8d8">=</span>LoadBalancer <span style="color: #f7ca88">--name</span> &lt;lb-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Expose:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl expose rc kubia <span style="color: #f7ca88">--type</span><span style="color: #d8d8d8">=</span>LoadBalancer <span style="color: #f7ca88">--name</span> kubia-http</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>service &#34;kubia-http&#34; exposed</pre>
</div>
</div>
</div>
</div>
<div class="ulist">
<div class="title">Remotely Executing Commands in Running Containers:</div>
<ul>
<li>
<p>You’ll also need to obtain the cluster IP of your service
(using <code>kubectl get svc</code>, for example)</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl <span style="color: #d8d8d8;background-color: #181818">exec </span>kubia-7nog1 <span style="color: #f7ca88">--</span> curl <span style="color: #f7ca88">-s</span> http://10.111.249.153</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-gzwli</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_session_affinity_on_the_service">2.2. Session Affinity on the Service</h3>
<div class="paragraph">
<p>If you execute the same command a few more times, you should hit a different
pod with every invocation, because the service proxy normally forwards each
connection to a randomly selected backing pod, even if the connections are
coming from the same client.</p>
</div>
<div class="paragraph">
<p>If, on the other hand, you want all requests made by a certain client to be
redirected to the same pod every time, you can set the service’s
<code>sessionAffinity</code> property to <code>ClientIP</code> (instead of <code>None</code>, which is the
default), as shown in the following listing.</p>
</div>
<div class="listingblock">
<div class="title">Service with <code>ClientIP</code> Session Affinity Manifest</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Service</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">sessionAffinity</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">ClientIP</span>
  <span style="color: #a1b56c">...</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Kubernetes supports only two types of service session affinity: <code>None</code> and
<code>ClientIP</code>.</p>
</li>
<li>
<p>Kubernetes services don’t operate at the HTTP level. Services deal with TCP
and UDP packets and don’t care about the payload they carry. Because cookies
are a construct of the HTTP protocol, services don’t know about them, which
explains why session affinity cannot be based on cookies.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_ports_in_the_same_service">2.3. Exposing Multiple Ports in the Same Service</h3>
<div class="listingblock">
<div class="title">Manifest</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Service</span>
<span style="color: #7cafc2">metadata</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">http</span>
    <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span>
    <span style="color: #7cafc2">targetPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8080</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">https</span>
    <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">443</span>
    <span style="color: #7cafc2">targetPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8443</span>
  <span style="color: #7cafc2">selector</span><span style="color: #d8d8d8">:</span>
    <span style="color: #7cafc2">app</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_named_ports">2.4. Using Named Ports</h3>
<div class="paragraph">
<p>You can give a name to each pod’s port and refer to it by name in the service spec.</p>
</div>
<div class="listingblock">
<div class="title">Specifying port names in a pod definition Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Pod</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">containers</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span>
    <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
    <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">http</span>
      <span style="color: #7cafc2">containerPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8080</span>
    <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">https</span>
      <span style="color: #7cafc2">containerPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8443</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Referring to named ports in a service Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Service</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">http</span>
    <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span>
    <span style="color: #7cafc2">targetPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">http</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">https</span>
    <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">443</span>
    <span style="color: #7cafc2">targetPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">https</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_connecting_to_services_living_outside_the_cluster">3. Connecting to services living outside the cluster</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Instead of having the service redirect connections to pods in the cluster, you
want it to redirect to external IP(s) and port(s).</p>
</div>
<div class="paragraph">
<p>This allows you to take advantage of both service load balancing and service
discovery. Client pods running in the cluster can connect to the external
service like they connect to internal services.</p>
</div>
<div class="sect2">
<h3 id="_service_endpoints">3.1. Service Endpoints</h3>
<div class="paragraph">
<p>Services don’t link to pods directly. Instead, a resource sits in between—the
Endpoints resource. You may have already noticed endpoints if you used the
<code>kubectl describe</code> command on your service.</p>
</div>
<div class="listingblock">
<div class="title">Full details of a service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl describe svc kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>Name:             kubia
Namespace:        default
Labels:           &lt;none&gt;
Selector:         app=kubia
Type:             ClusterIP
IP:               10.111.249.153
Port:             &lt;unset&gt; 80/TCP
Endpoints:        10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080
Session           Affinity: None
No events.</pre>
</div>
</div>
<div class="paragraph">
<p>An Endpoints resource (yes, plural) is a list of IP addresses and ports
exposing a service. The Endpoints resource is like any other Kubernetes
resource, so you can display its basic info with kubectl get.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl get endpoints kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME     ENDPOINTS                                           AGE
kubia    10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080     1h</pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Manually Configuring Service Endpoints</div>
<div class="ulist">
<ul>
<li>
<p>having the service’s endpoints decoupled from the service allows them to be
configured and updated manually.</p>
</li>
<li>
<p>If you create a service without a pod selector, Kubernetes won’t even create
the Endpoints resource</p>
<div class="ulist">
<ul>
<li>
<p>after all, without a selector, it can’t know which pods to include in the
service</p>
</li>
</ul>
</div>
</li>
<li>
<p>To create a service with manually managed endpoints, you need to create both
a Service and an Endpoints resource</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A service without a pod selector: <code>external-service.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Service</span>
<span style="color: #7cafc2">metadata</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">external-service</span> <span style="color: #585858"># must match the endpoints name</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Endpoints are a separate resource and not an attribute of a service</p>
</li>
<li>
<p>Because you created the service without a selector, the corresponding
Endpoints resource hasn’t been created automatically</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A manually created Endpoints resource: <code>external-service-endpoints.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Endpoints</span>
<span style="color: #7cafc2">metadata</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">external-service</span> <span style="color: #585858"># must match the service name</span>
<span style="color: #7cafc2">subsets</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">addresses</span><span style="color: #d8d8d8">:</span>
    <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">ip</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">11.11.11.11</span>
    <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">ip</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">22.22.22.22</span>
    <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
    <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span> <span style="color: #585858"># target port of endpoints</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_to_external_clients">4. Exposing services to external clients</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Few ways to make a service accessible externally.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>NodePort</code> Service Type</p>
<div class="ulist">
<ul>
<li>
<p>Each cluster node opens a port on the node itself (hence the name) and
redirects traffic received on that port to the underlying service.</p>
</li>
<li>
<p>The service isn’t accessible only at the internal cluster IP and port, but
also through a dedicated port on all nodes.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>LoadBalancer</code> Service Type, an extention of <code>NodePort</code> type</p>
<div class="ulist">
<ul>
<li>
<p>This makes the service accessible through a dedicated load balancer,
provisioned from the cloud infrastructure Kubernetes is running on.</p>
</li>
<li>
<p>The load balancer redirects traffic to the node port across all the nodes.
Clients connect to the service through the load balancer’s IP.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Create <code>Ingress</code> Resource, radically different mechanism for exposing
multiple services through a single IP address</p>
<div class="ulist">
<ul>
<li>
<p>It operates at the HTTP level (network layer 7) and can thus offer more
features than layer 4 services can</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_using_a_nodeport_service">4.1. Using a NodePort service</h3>
<div class="paragraph">
<p>By creating a <code>NodePort</code> service, you make Kubernetes reserve a port on all its
nodes (the same port number is used across all of them) and forward incoming
connections to the pods that are part of the service.</p>
</div>
<div class="paragraph">
<p>This is similar to a regular service (their actual type is <code>ClusterIP</code>), but a
<code>NodePort</code> service can be accessed not only through the service’s internal
cluster IP, but also through any node’s IP and the reserved node port.</p>
</div>
<div class="paragraph">
<p>This will make more sense when you try interacting with a <code>NodePort</code> service.</p>
</div>
<div class="listingblock">
<div class="title">A NodePort service definition: <code>kubia-svc-nodeport.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Service</span>
<span style="color: #7cafc2">metadata</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia-nodeport</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">type</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">NodePort</span> <span style="color: #585858"># service type</span>
  <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span> <span style="color: #585858"># service&#39;s internal cluster IP port</span>
    <span style="color: #7cafc2">targetPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8080</span> <span style="color: #585858"># target port of the backing pods</span>
    <span style="color: #7cafc2">nodePort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">30123</span> <span style="color: #585858"># service will listen on port 30123, each cluster nodes</span>
  <span style="color: #7cafc2">selector</span><span style="color: #d8d8d8">:</span>
    <span style="color: #7cafc2">app</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Examine the NodePort Service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl get svc kubia-nodeport</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME             CLUSTER-IP       EXTERNAL-IP    PORT(S)          AGE
kubia-nodeport   10.111.254.223   &lt;nodes&gt;        80:30123/TCP     2m</pre>
</div>
</div>
<div class="paragraph">
<p><code>EXTERNAL-IP</code> column shows <code>&lt;nodes&gt;</code>, indicating the service is accessible
through the IP address of any cluster node. The <code>PORT(S)</code> column shows both the
internal port of the cluster IP (<code>80</code>) and the node port (<code>30123</code>). The service
is accessible at the following addresses:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>10.11.254.223:80</code></p>
</li>
<li>
<p><code>&lt;1st node’s IP&gt;:30123</code></p>
</li>
<li>
<p><code>&lt;2nd node’s IP&gt;:30123</code></p>
</li>
<li>
<p>and so on</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Using JSONPath to get the IPs of all your nodes</div>
<p>You can find the IP in the JSON or YAML descriptors of the nodes. But instead
of sifting through the relatively large JSON, you can tell <code>kubectl</code> to print
out only the node IP instead of the whole service definition</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl get nodes <span style="color: #f7ca88">-o</span> <span style="color: #a16946">\</span>
<span style="color: #d8d8d8;background-color: #181818">  jsonpath=&#39;{.items[*].status.addresses[?(@.type==&#34;ExternalIP&#34;)].address}&#39;</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>130.211.97.55 130.211.99.206</pre>
</div>
</div>
<div class="paragraph">
<p>Once you know the IPs of your nodes, you can try accessing your service through
them.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>curl http://130.211.97.55:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-ym8or</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>curl http://130.211.99.206:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-xueq1</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_a_service_through_an_external_load_balancer">4.2. Exposing a service through an external load balancer</h3>
<div class="paragraph">
<p>Kubernetes clusters running on cloud providers usually support the automatic
provision of a load balancer from the cloud infrastructure. All you need to do
is set the service’s type to <code>LoadBalancer</code> instead of <code>NodePort</code>. The load
balancer will have its own unique, publicly accessible IP address and will
redirect all connections to your service. You can thus access your service
through the load balancer’s IP address.</p>
</div>
<div class="paragraph">
<p>If Kubernetes is running in an environment that doesn’t support <code>LoadBalancer</code>
services, the load balancer will not be provisioned, but the service will still
behave like a <code>NodePort</code> service. That’s because a <code>LoadBalancer</code> service is an
extension of a <code>NodePort</code> service. You’ll run this example on Google Kubernetes
Engine, which supports <code>LoadBalancer</code> services. Minikube doesn’t, at least not
as of this writing.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Creating a Loadbalancer Service</div>
<div class="listingblock">
<div class="title">A LoadBalancer-type service: <code>kubia-svc-loadbalancer.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">v1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Service</span>
<span style="color: #7cafc2">metadata</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia-loadbalancer</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">type</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">LoadBalancer</span>
  <span style="color: #7cafc2">ports</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">port</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span>
    <span style="color: #7cafc2">targetPort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8080</span>
  <span style="color: #7cafc2">selector</span><span style="color: #d8d8d8">:</span>
    <span style="color: #7cafc2">app</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The service type is set to LoadBalancer instead of NodePort. You’re not
specifying a specific node port, although you could (you’re letting
Kubernetes choose one instead).</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Connecting to the Service Through the Load Balancer</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl get svc kubia-loadbalancer</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output</div>
<div class="content">
<pre>NAME                CLUSTER-IP       EXTERNAL-IP       PORT(S)       AGE
kubia-loadbalancer  10.111.241.153   130.211.53.173    80:32143/TCP  1m</pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Session affinity and web browsers</div>
<div class="paragraph">
<p>Because your service is now exposed externally, you may try accessing it with
your web browser. You’ll see something that may strike you as odd—the browser
will hit the exact same pod every time. Did the service’s session affinity
change in the meantime? With <code>kubectl explain</code>, you can double-check that the
service’s session affinity is still set to <code>None</code>, so why don’t different
browser requests hit different pods, as is the case when using <code>curl</code>?</p>
</div>
<div class="paragraph">
<p>Let me explain what’s happening. The browser is using keep-alive connections
and sends all its requests through a single connection, whereas <code>curl</code> opens a
new connection every time. Services work at the connection level, so when a
connection to a service is first opened, a random pod is selected and then all
network packets belonging to that connection are all sent to that single pod.
Even if session affinity is set to <code>None</code>, users will always hit the same pod
(until the connection is closed).</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_understanding_the_peculiarities_of_external_connections">4.3. Understanding the peculiarities of external connections</h3>
<div class="paragraph">
<p>You must be aware of several things related to externally originating connections to
services.</p>
</div>
<div class="paragraph">
<div class="title">Understanding and Preventing Unnecessary Network Hops</div>
<p>When an external client connects to a service through the node port (this also
includes cases when it goes through the load balancer first), the randomly chosen
pod may or may not be running on the same node that received the connection. An
additional network hop is required to reach the pod, but this may not always be
desirable.</p>
</div>
<div class="paragraph">
<p>You can prevent this additional hop by configuring the service to redirect external
traffic only to pods running on the node that received the connection. This is done by
setting the <code>externalTrafficPolicy</code> field in the service’s <code>spec</code> section</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">externalTrafficPolicy</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Local</span>
  <span style="color: #a1b56c">...</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Being Aware of the non-preservation of the Client’s IP</div>
<p>Usually, when clients inside the cluster connect to a service, the pods backing
the service can obtain the client’s IP address. But when the connection is
received through a node port, the packets&#39; source IP is changed, because Source
Network Address Translation (SNAT) is performed on the packets.</p>
</div>
<div class="paragraph">
<p>The backing pod can’t see the actual client’s IP, which may be a problem for
some applications that need to know the client’s IP. In the case of a web
server, for example, this means the access log won’t show the browser’s IP.</p>
</div>
<div class="paragraph">
<p>The <code>Local</code> external traffic policy described in the previous section affects
the preservation of the client’s IP, because there’s no additional hop between
the node receiving the connection and the node hosting the target pod (SNAT
isn’t performed).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_externally_through_an_ingress_resource">5. Exposing services externally through an Ingress resource</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You must be aware of several things related to externally originating
connections to services.</p>
</div>
<div class="ulist">
<div class="title">Understanding Why Ingresses are Needed</div>
<ul>
<li>
<p>each LoadBalancer service requires its own load balancer with its own public
IP address, whereas an Ingress only requires one, even when providing access
to dozens of services</p>
</li>
<li>
<p>When a client sends an HTTP request to the Ingress, the host and path in the
request determine which service the request is forwarded to</p>
</li>
<li>
<p>Ingresses operate at the application layer of the network stack (HTTP) and
can provide features such as cookie-based session affinity and the like,
which services can’t</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Understanding that an Ingress Controller is Required</div>
<p>To make Ingress resources work, an Ingress controller needs to be running in
the cluster.</p>
</div>
<div class="sect2">
<h3 id="_creating_an_ingress_resource">5.1. Creating an Ingress resource</h3>
<div class="listingblock">
<div class="title">An Ingress resource definition: <code>kubia-ingress.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="yaml"><span style="color: #7cafc2">apiVersion</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">extensions/v1beta1</span>
<span style="color: #7cafc2">kind</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">Ingress</span>
<span style="color: #7cafc2">metadata</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia</span>
<span style="color: #7cafc2">spec</span><span style="color: #d8d8d8">:</span>
  <span style="color: #7cafc2">rules</span><span style="color: #d8d8d8">:</span>
  <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">host</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia.example.com</span> <span style="color: #585858">#  maps the domain name to your service</span>
  <span style="color: #7cafc2">http</span><span style="color: #d8d8d8">:</span>
    <span style="color: #7cafc2">paths</span><span style="color: #d8d8d8">:</span>
    <span style="color: #d8d8d8">-</span> <span style="color: #7cafc2">path</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">/</span>                        <span style="color: #585858"># All requests will be sent to port 80</span>
      <span style="color: #7cafc2">backend</span><span style="color: #d8d8d8">:</span>                       <span style="color: #585858"># of the kubia-nodeport service.</span>
        <span style="color: #7cafc2">serviceName</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">kubia-nodeport</span>  <span style="color: #585858">#</span>
        <span style="color: #7cafc2">servicePort</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">80</span>              <span style="color: #585858">#</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This defines an Ingress with a single rule, which makes sure all HTTP requests
received by the Ingress controller, in which the host <code>kubia.example.com</code> is
requested, will be sent to the <code>kubia-nodeport</code> service on port <code>80</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Ingress controllers on cloud providers (in GKE, for example) require the
Ingress to point to a <code>NodePort</code> service. But that’s not a requirement of
Kubernetes itself.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_the_service_through_the_ingress">5.2. Accessing the service through the Ingress</h3>
<div class="paragraph">
<p>To access your service through <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a>, you’ll need to make sure
the domain name resolves to the IP of the Ingress controller</p>
</div>
<div class="listingblock">
<div class="title">Obtaining the ip Address of the Ingress:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="console"><span style="color: #d8d8d8;background-color: #181818">$</span><span style="color: #d8d8d8;background-color: #181818"> </span>kubectl get ingresses</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME      HOSTS                ADDRESS            PORTS       AGE
kubia     kubia.example.com    192.168.99.100     80          29m</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>When running on cloud providers, the address may take time to appear,
because the Ingress controller provisions a load balancer behind the scenes.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="ulist">
<ul>
<li>
<p>The IP is shown in the <code>ADDRESS</code> column.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<div class="paragraph">
<p>Once you know the IP, you can then either configure your DNS servers to resolve
kubia.example.com to that IP or you can setup hosts: add the following line to
<code>/etc/hosts</code> (or <code>C:\windows\system32\drivers\etc\hosts</code> on Windows):</p>
</div>
<div class="listingblock">
<div class="title"><code>/etc/hosts</code></div>
<div class="content">
<pre>192.168.99.100		kubia.example.com</pre>
</div>
</div>
<div class="paragraph">
<p>So you can access the service at <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a> using a browser or
<code>curl</code></p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_understading_how_ingress_work">5.2.1. Understading how Ingress work</h4>
<div class="ulist">
<ul>
<li>
<p>The client first performed a DNS lookup of kubia.example.com, and the DNS
server (or the local operating system) returned the IP of the Ingress
controller</p>
</li>
<li>
<p>The client then sent an HTTP request to the Ingress controller and specified
<code>kubia.example.com</code> in the <code>Host</code> header</p>
<div class="ulist">
<ul>
<li>
<p>From that header, the controller determined which service the client is
trying to access, looked up the pod IPs through the Endpoints object
associated with the service, and forwarded the client’s request to one of
the pods.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The Ingress controller don’t forward the request to the service</p>
<div class="ulist">
<ul>
<li>
<p>It only use it to select a pod</p>
</li>
<li>
<p>Most, if not all, controllers work like this</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_services_through_the_same_ingress">5.3. Exposing multiple services through the same Ingress</h3>
<div class="paragraph">
<p>Both <code>rules</code> and <code>paths</code> are arrays, so they can contain multiple items</p>
</div>
<div class="sect3">
<h4 id="_mapping_different_services_to_different_paths_of_the_same_host">5.3.1. Mapping different services to different paths of the same host</h4>

</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Golang stdlib - Webserver</title>
      <link>https://hossein-lap.github.io/notes/webserver/</link>
      <pubDate>Fri, 31 May 2024 16:47:17 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/webserver/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>We need <code>&#34;net/http&#34;</code> module to create webserver and listen to the specified port.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">import</span> <span style="color: #d8d8d8">(</span>
    <span style="color: #a1b56c">&#34;net/http&#34;</span>
<span style="color: #d8d8d8">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>we also might need these modules as well:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&#34;encoding/json&#34;</code> too for parsing JSON data</p>
</li>
<li>
<p><code>&#34;database/sql&#34;</code> and <code>&#34;github.com/go-sql-driver/mysql&#34;</code> to handle (my)sql/mariadb part</p>
</li>
<li>
<p><code>&#34;github.com/redi/go-redis/v9&#34;</code> to handle redis-cache</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We need a request handler struct for the http server to be able to work.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">type</span> <span style="color: #d8d8d8;background-color: #181818">RequestHandler</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>And now we define the http server. it needs a <code>ServeHTTP()</code> function and paths
that needs to be handled (HTTP requests goes to the specified paths)</p>
</div>
<div class="listingblock">
<div class="title">main funcion</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">main</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">mux</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">http</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">NewServeMx</span><span style="color: #d8d8d8">()</span>
    <span style="color: #d8d8d8;background-color: #181818">mux</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Handle</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;/path1&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">RequestHandler</span><span style="color: #d8d8d8">{})</span>
    <span style="color: #d8d8d8;background-color: #181818">mux</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Handle</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;/path1/&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">RequestHandler</span><span style="color: #d8d8d8">{})</span>
    <span style="color: #d8d8d8;background-color: #181818">mux</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Handle</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;/path2&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">RequestHandler</span><span style="color: #d8d8d8">{})</span>
    <span style="color: #d8d8d8;background-color: #181818">mux</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Handle</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;/path2/&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">RequestHandler</span><span style="color: #d8d8d8">{})</span>
    <span style="color: #585858">/* continue */</span>
    <span style="color: #d8d8d8;background-color: #181818">http</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">ListenAndServe</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;:8080&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">mux</span><span style="color: #d8d8d8">)</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">serve function</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">h</span> <span style="color: #d8d8d8">*</span><span style="color: #d8d8d8;background-color: #181818">RequestHandler</span><span style="color: #d8d8d8">)</span> <span style="color: #d8d8d8;background-color: #181818">ServeHTTP</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">w</span> <span style="color: #d8d8d8;background-color: #181818">http</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">ResponseWriter</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">r</span> <span style="color: #d8d8d8">*</span><span style="color: #d8d8d8;background-color: #181818">http</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Requset</span><span style="color: #d8d8d8">)</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">request_type</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">r</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Method</span>
    <span style="color: #d8d8d8;background-color: #181818">tmp</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">strings</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">SplitN</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">r</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">URL</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">String</span><span style="color: #d8d8d8">(),</span> <span style="color: #a1b56c">&#34;/&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">3</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8;background-color: #181818">section</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">tmp</span><span style="color: #d8d8d8">[</span><span style="color: #a1b56c">1</span><span style="color: #d8d8d8">]</span> <span style="color: #585858">// path</span>
    <span style="color: #d8d8d8;background-color: #181818">key</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">tmp</span><span style="color: #d8d8d8">[</span><span style="color: #a1b56c">2</span><span style="color: #d8d8d8">]</span> <span style="color: #585858">// add data after the path</span>
    <span style="color: #d8d8d8;background-color: #181818">params</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">r</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">URL</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Query</span><span style="color: #d8d8d8">()</span>
    <span style="color: #d8d8d8;background-color: #181818">value</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">params</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Get</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">key</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8;background-color: #181818">body</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">io</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">ReadAll</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">r</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Body</span><span style="color: #d8d8d8">)</span> <span style="color: #585858">// values from curl&#39;s `--data` flag (spected to be JSON)</span>
    <span style="color: #585858">/* continue */</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_redis_handler">1. Redis Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">cache_handler</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">client</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">redis</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">NewClient</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">redis</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Options</span><span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">Addr</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;localhost:6349&#34;</span>
        <span style="color: #d8d8d8;background-color: #181818">Password</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;&#34;</span> <span style="color: #585858">// No password, to get it from env variables use: `os.Getenv(&#34;ENV&#34;)`</span>
        <span style="color: #d8d8d8;background-color: #181818">DB</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">0</span> <span style="color: #585858">// default db</span>
    <span style="color: #d8d8d8">})</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mysql_handler">2. MySQL Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">database_handler</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">sql_url</span> <span style="color: #d8d8d8">:=</span> <span style="color: #a1b56c">&#34;root@localhost:3360&#34;</span>
    <span style="color: #d8d8d8;background-color: #181818">db</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">sql</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Open</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;mysql&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">sql_url</span><span style="color: #d8d8d8">)</span>
    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">pandic</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Error</span><span style="color: #d8d8d8">())</span>
    <span style="color: #d8d8d8">}</span>
    <span style="color: #ba8baf">defer</span> <span style="color: #d8d8d8;background-color: #181818">db</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Close</span><span style="color: #d8d8d8">()</span>
    <span style="color: #585858">/* continue */</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_unmarshal">3. JSON Parser - Unmarshal</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">type</span> <span style="color: #d8d8d8;background-color: #181818">Movie</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">Name</span> <span style="color: #dc9656">string</span> <span style="color: #a1b56c">`json:&#34;name&#34;`</span>
    <span style="color: #d8d8d8;background-color: #181818">Publisher</span> <span style="color: #dc9656">string</span> <span style="color: #a1b56c">`json:&#34;publisher&#34;`</span>
    <span style="color: #d8d8d8;background-color: #181818">Year</span> <span style="color: #dc9656">int</span> <span style="color: #a1b56c">`json:&#34;year&#34;`</span>
<span style="color: #d8d8d8">}</span>

<span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">HandleMovie</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #585858">// var target map[string]any /* not optimal */</span>
    <span style="color: #ba8baf">var</span> <span style="color: #d8d8d8;background-color: #181818">movie</span> <span style="color: #d8d8d8;background-color: #181818">Movie</span>

    <span style="color: #d8d8d8;background-color: #181818">input</span> <span style="color: #d8d8d8">:=</span> <span style="color: #a1b56c">`{
        &#34;name&#34;: &#34;Jocker&#34;,
        &#34;publisher&#34;: &#34;WB&#34;,
        &#34;year&#34;: 2019
    }`</span>

    <span style="color: #585858">// err := json.Unmarshal([]byte(input), &amp;target) /* not optimal */</span>
    <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Unmarshal</span><span style="color: #d8d8d8">([]</span><span style="color: #dc9656">byte</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">input</span><span style="color: #d8d8d8">),</span> <span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">movie</span><span style="color: #d8d8d8">)</span> <span style="color: #585858">/* not optimal */</span>
    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">log</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Fatalf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #585858">/* not optimal */</span>
    <span style="color: #585858">// for k, v := range target {</span>
    <span style="color: #585858">//    fmt.Printf(&#34;k: %s, v: %v\n&#34;, k, v)</span>
    <span style="color: #585858">// }</span>
    <span style="color: #d8d8d8;background-color: #181818">fmt</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Printf</span><span style="color: #d8d8d8">(</span>
        <span style="color: #a1b56c">&#34;Name: %s, Publisher: %s, Year: %d</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">movie</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Name</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">movie</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Publisher</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">movie</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Year</span><span style="color: #d8d8d8">,</span>
    <span style="color: #d8d8d8">)</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_complex_json">3.1. Complex JSON</h3>
<div class="listingblock">
<div class="title"><code>assets/complex.json</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="json"><span style="color: #d8d8d8">{</span><span style="color: #d8d8d8;background-color: #181818">
  </span><span style="color: #d8d8d8;background-color: #181818">&#34;name&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;James Peterson&#34;</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
  </span><span style="color: #d8d8d8;background-color: #181818">&#34;age&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">37</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
  </span><span style="color: #d8d8d8;background-color: #181818">&#34;address&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #d8d8d8">{</span><span style="color: #d8d8d8;background-color: #181818">
    </span><span style="color: #d8d8d8;background-color: #181818">&#34;line1&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Block 78 Woodgrove Avenue 5&#34;</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
    </span><span style="color: #d8d8d8;background-color: #181818">&#34;line2&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Unit #05-111&#34;</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
    </span><span style="color: #d8d8d8;background-color: #181818">&#34;postal&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;654378&#34;</span><span style="color: #d8d8d8;background-color: #181818">
  </span><span style="color: #d8d8d8">},</span><span style="color: #d8d8d8;background-color: #181818">
  </span><span style="color: #d8d8d8;background-color: #181818">&#34;pets&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #d8d8d8">[</span><span style="color: #d8d8d8;background-color: #181818">
    </span><span style="color: #d8d8d8">{</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;name&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Lex&#34;</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;kind&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Dog&#34;</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;age&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">4</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;color&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Gray&#34;</span><span style="color: #d8d8d8;background-color: #181818">
    </span><span style="color: #d8d8d8">},</span><span style="color: #d8d8d8;background-color: #181818">
    </span><span style="color: #d8d8d8">{</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;name&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Faye&#34;</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;kind&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Cat&#34;</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;age&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">6</span><span style="color: #d8d8d8">,</span><span style="color: #d8d8d8;background-color: #181818">
      </span><span style="color: #d8d8d8;background-color: #181818">&#34;color&#34;</span><span style="color: #d8d8d8">:</span><span style="color: #d8d8d8;background-color: #181818"> </span><span style="color: #a1b56c">&#34;Orange&#34;</span><span style="color: #d8d8d8;background-color: #181818">
    </span><span style="color: #d8d8d8">}</span><span style="color: #d8d8d8;background-color: #181818">
  </span><span style="color: #d8d8d8">]</span><span style="color: #d8d8d8;background-color: #181818">
</span><span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><code>examples/complex_json/main.go</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">type</span> <span style="color: #d8d8d8">(</span>
    <span style="color: #d8d8d8;background-color: #181818">FullPerson</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">Address</span> <span style="color: #d8d8d8;background-color: #181818">Address</span>
        <span style="color: #d8d8d8;background-color: #181818">Name</span>    <span style="color: #dc9656">string</span>
        <span style="color: #d8d8d8;background-color: #181818">Pets</span>    <span style="color: #d8d8d8">[]</span><span style="color: #d8d8d8;background-color: #181818">Pet</span>
        <span style="color: #d8d8d8;background-color: #181818">Age</span>     <span style="color: #dc9656">int</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">Pet</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">Name</span>  <span style="color: #dc9656">string</span>
        <span style="color: #d8d8d8;background-color: #181818">Kind</span>  <span style="color: #dc9656">string</span>
        <span style="color: #d8d8d8;background-color: #181818">Color</span> <span style="color: #dc9656">string</span>
        <span style="color: #d8d8d8;background-color: #181818">Age</span>   <span style="color: #dc9656">int</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">Address</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">Line1</span>  <span style="color: #dc9656">string</span>
        <span style="color: #d8d8d8;background-color: #181818">Line2</span>  <span style="color: #dc9656">string</span>
        <span style="color: #d8d8d8;background-color: #181818">Postal</span> <span style="color: #dc9656">string</span>
    <span style="color: #d8d8d8">}</span>
<span style="color: #d8d8d8">)</span>


<span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">main</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">b</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">os</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">ReadFile</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;assets/complex.json&#34;</span><span style="color: #d8d8d8">)</span>
    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">log</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Fatalf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Unable to read file due to %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #ba8baf">var</span> <span style="color: #d8d8d8;background-color: #181818">person</span> <span style="color: #d8d8d8;background-color: #181818">FullPerson</span>

    <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Unmarshal</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">b</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">person</span><span style="color: #d8d8d8">)</span>
    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">log</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Fatalf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">litter</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Dump</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">person</span><span style="color: #d8d8d8">)</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_common_pitfalls_with_json_unmarshalling_in_go">3.2. Common pitfalls with JSON unmarshalling in Go</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Extra fields are omitted in the target struct</p>
</li>
<li>
<p>Missing fields fallback to zero values</p>
</li>
<li>
<p>Unmarshalling is case insensitive</p>
</li>
<li>
<p>Field names must match JSON keys exactly</p>
</li>
<li>
<p>Type aliases are preserved</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_marshal">4. JSON Parser - Marshal</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>json.Marshal()</code> method does the opposite of <code>Unmarshal()</code> by converting
a given data structure into a JSON.</p>
</div>
<div class="listingblock">
<div class="title">examples/basic_marshal/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">marshal</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">in</span> <span style="color: #d8d8d8;background-color: #181818">any</span><span style="color: #d8d8d8">)</span> <span style="color: #d8d8d8">[]</span><span style="color: #dc9656">byte</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">out</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Marshal</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">in</span><span style="color: #d8d8d8">)</span>

    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">log</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Fatalf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Unable to marshal due to %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #ba8baf">return</span> <span style="color: #d8d8d8;background-color: #181818">out</span>
<span style="color: #d8d8d8">}</span>

<span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">main</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">first</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">marshal</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">14</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8;background-color: #181818">second</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">marshal</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Hello world&#34;</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8;background-color: #181818">third</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">marshal</span><span style="color: #d8d8d8">([]</span><span style="color: #dc9656">float32</span><span style="color: #d8d8d8">{</span><span style="color: #a1b56c">1.66</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">6.86</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">10.1</span><span style="color: #d8d8d8">})</span>
    <span style="color: #d8d8d8;background-color: #181818">fourth</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">marshal</span><span style="color: #d8d8d8">(</span><span style="color: #ba8baf">map</span><span style="color: #d8d8d8">[</span><span style="color: #dc9656">string</span><span style="color: #d8d8d8">]</span><span style="color: #dc9656">int</span><span style="color: #d8d8d8">{</span><span style="color: #a1b56c">&#34;num&#34;</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">15</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">&#34;other&#34;</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">17</span><span style="color: #d8d8d8">})</span>
    <span style="color: #d8d8d8;background-color: #181818">fmt</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Printf</span><span style="color: #d8d8d8">(</span>
        <span style="color: #a1b56c">&#34;first: %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">second: %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">third: %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">fourth: %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">first</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">second</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">third</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">fourth</span><span style="color: #d8d8d8">,</span>
    <span style="color: #d8d8d8">)</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_structs">4.1. structs</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">main</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">p</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">Person</span><span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">Name</span><span style="color: #d8d8d8">:</span>  <span style="color: #a1b56c">&#34;John Jones&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">Age</span><span style="color: #d8d8d8">:</span>   <span style="color: #a1b56c">26</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">Email</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;johnjones@email.com&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">Phone</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;89910119&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">Hobbies</span><span style="color: #d8d8d8">:</span> <span style="color: #d8d8d8">[]</span><span style="color: #dc9656">string</span><span style="color: #d8d8d8">{</span>
            <span style="color: #a1b56c">&#34;Swimming&#34;</span><span style="color: #d8d8d8">,</span>
            <span style="color: #a1b56c">&#34;Badminton&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8">},</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">b</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Marshal</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">p</span><span style="color: #d8d8d8">)</span>
    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">log</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Fatalf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Unable to marshal due to %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">fmt</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Println</span><span style="color: #d8d8d8">(</span><span style="color: #dc9656">string</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">b</span><span style="color: #d8d8d8">))</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
If you wish to format the JSON object, you can use the <code>MarshalIndent()</code> method
which performs the same function as <code>Marshal()</code> but applies some indentation to
format the output.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_customizing_json_field_names_with_struct_tags">4.2. Customizing JSON field names with struct tags</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">type</span> <span style="color: #d8d8d8;background-color: #181818">Dog</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">Breed</span>         <span style="color: #dc9656">string</span>
    <span style="color: #d8d8d8;background-color: #181818">Name</span>          <span style="color: #dc9656">string</span>
    <span style="color: #d8d8d8;background-color: #181818">FavoriteTreat</span> <span style="color: #dc9656">string</span>
    <span style="color: #d8d8d8;background-color: #181818">Age</span>           <span style="color: #dc9656">int</span>
<span style="color: #d8d8d8">}</span>

<span style="color: #ba8baf">var</span> <span style="color: #d8d8d8;background-color: #181818">dog</span> <span style="color: #d8d8d8">=</span> <span style="color: #d8d8d8;background-color: #181818">Dog</span><span style="color: #d8d8d8">{</span>
  <span style="color: #d8d8d8;background-color: #181818">Breed</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;Golden Retriever&#34;</span><span style="color: #d8d8d8">,</span>
  <span style="color: #d8d8d8;background-color: #181818">Age</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">8</span><span style="color: #d8d8d8">,</span>
  <span style="color: #d8d8d8;background-color: #181818">Name</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;Paws&#34;</span><span style="color: #d8d8d8">,</span>
  <span style="color: #d8d8d8;background-color: #181818">FavoriteTreat</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;Kibble&#34;</span><span style="color: #d8d8d8">,</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">type</span> <span style="color: #d8d8d8;background-color: #181818">Dog</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">Breed</span>         <span style="color: #dc9656">string</span> <span style="color: #a1b56c">`json:&#34;breed&#34;`</span>
    <span style="color: #d8d8d8;background-color: #181818">Name</span>          <span style="color: #dc9656">string</span> <span style="color: #a1b56c">`json:&#34;name&#34;`</span>
    <span style="color: #d8d8d8;background-color: #181818">FavoriteTreat</span> <span style="color: #dc9656">string</span> <span style="color: #a1b56c">`json:&#34;favorite_treat&#34;`</span>
    <span style="color: #d8d8d8;background-color: #181818">Age</span>           <span style="color: #dc9656">int</span>    <span style="color: #a1b56c">`json:&#34;age&#34;`</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">main</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">input</span> <span style="color: #d8d8d8">:=</span> <span style="color: #a1b56c">`{
      &#34;name&#34;: &#34;Coffee&#34;,
      &#34;breed&#34;: &#34;Toy Poodle&#34;,
      &#34;age&#34;: 5,
      &#34;favorite_treat&#34;: &#34;Kibble&#34;
    }`</span>

    <span style="color: #ba8baf">var</span> <span style="color: #d8d8d8;background-color: #181818">coffee</span> <span style="color: #d8d8d8;background-color: #181818">Dog</span>

    <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Unmarshal</span><span style="color: #d8d8d8">([]</span><span style="color: #dc9656">byte</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">input</span><span style="color: #d8d8d8">),</span> <span style="color: #d8d8d8">&amp;</span><span style="color: #d8d8d8;background-color: #181818">coffee</span><span style="color: #d8d8d8">)</span>
    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">log</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Fatalf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">litter</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Dump</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">coffee</span><span style="color: #d8d8d8">)</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_uses_of_struct_tags">4.3. Other uses of struct tags</h3>
<div class="listingblock">
<div class="title">Omit an empty field (one with its zero value in Go)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">type</span> <span style="color: #d8d8d8;background-color: #181818">User</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">Username</span> <span style="color: #dc9656">string</span>   <span style="color: #a1b56c">`json:&#34;username&#34;`</span>
    <span style="color: #d8d8d8;background-color: #181818">Password</span> <span style="color: #dc9656">string</span>   <span style="color: #a1b56c">`json:&#34;-&#34;`</span>

    <span style="color: #d8d8d8;background-color: #181818">Email</span>    <span style="color: #dc9656">string</span>   <span style="color: #a1b56c">`json:&#34;email&#34;`</span>
    <span style="color: #d8d8d8;background-color: #181818">Hobbies</span>  <span style="color: #d8d8d8">[]</span><span style="color: #dc9656">string</span> <span style="color: #a1b56c">`json:&#34;hobbies,omitempty&#34;`</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_validating_json_data">5. Validating JSON data</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">main</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">good</span> <span style="color: #d8d8d8">:=</span> <span style="color: #a1b56c">`{&#34;name&#34;: &#34;John Doe&#34;}`</span>
    <span style="color: #d8d8d8;background-color: #181818">bad</span> <span style="color: #d8d8d8">:=</span> <span style="color: #a1b56c">`{name: &#34;John Doe&#34;}`</span>

    <span style="color: #d8d8d8;background-color: #181818">fmt</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Println</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Valid</span><span style="color: #d8d8d8">([]</span><span style="color: #dc9656">byte</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">good</span><span style="color: #d8d8d8">)))</span>
    <span style="color: #d8d8d8;background-color: #181818">fmt</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Println</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Valid</span><span style="color: #d8d8d8">([]</span><span style="color: #dc9656">byte</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">bad</span><span style="color: #d8d8d8">)))</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_defining_custom_behavior_marshal_unmarshal_data">6. Defining custom behavior - Marshal / Unmarshal data</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Go, you can define custom behavior for marshalling data by implementing the
<code>json.Marshaler</code> interface. This interface defines a single method,
<code>MarshalJSON()</code> which takes no arguments and returns a byte slice and an
error.</p>
</div>
<div class="paragraph">
<p>To implement the <code>json.Marshaler</code> interface, you need to define a new type that
wraps the original type you want to marshal. This new type should have a method
named <code>MarshalJSON()</code> that returns a byte slice and an error.</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">type</span> <span style="color: #d8d8d8">(</span>
    <span style="color: #d8d8d8;background-color: #181818">CustomTime</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">time</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Time</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">Baby</span> <span style="color: #ba8baf">struct</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">BirthDate</span> <span style="color: #d8d8d8;background-color: #181818">CustomTime</span> <span style="color: #a1b56c">`json:&#34;birth_date&#34;`</span>
        <span style="color: #d8d8d8;background-color: #181818">Name</span>      <span style="color: #dc9656">string</span>    <span style="color: #a1b56c">`json:&#34;name&#34;`</span>
        <span style="color: #d8d8d8;background-color: #181818">Gender</span>    <span style="color: #dc9656">string</span>    <span style="color: #a1b56c">`json:&#34;gender&#34;`</span>
    <span style="color: #d8d8d8">}</span>
<span style="color: #d8d8d8">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above snippet, we defined a new <code>CustomTime</code> type that wraps a
<code>time.Time</code> value. In is subsequently used in the <code>Baby</code> struct as the type of
the <code>BirthDate</code> value.</p>
</div>
<div class="paragraph">
<p>Here’s an example that marshals a value of type <code>Baby</code> below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8;background-color: #181818">main</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #d8d8d8;background-color: #181818">baby</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">Baby</span><span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">Name</span><span style="color: #d8d8d8">:</span>   <span style="color: #a1b56c">&#34;johnny&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">Gender</span><span style="color: #d8d8d8">:</span> <span style="color: #a1b56c">&#34;male&#34;</span><span style="color: #d8d8d8">,</span>
        <span style="color: #d8d8d8;background-color: #181818">BirthDate</span><span style="color: #d8d8d8">:</span> <span style="color: #d8d8d8;background-color: #181818">CustomTime</span><span style="color: #d8d8d8">{</span>
            <span style="color: #d8d8d8;background-color: #181818">time</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Date</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">2023</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">1</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">1</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">12</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">0</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">0</span><span style="color: #d8d8d8">,</span> <span style="color: #a1b56c">0</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">time</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Now</span><span style="color: #d8d8d8">()</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Location</span><span style="color: #d8d8d8">()),</span>
        <span style="color: #d8d8d8">},</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">b</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">:=</span> <span style="color: #d8d8d8;background-color: #181818">json</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Marshal</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">baby</span><span style="color: #d8d8d8">)</span>
    <span style="color: #ba8baf">if</span> <span style="color: #d8d8d8;background-color: #181818">err</span> <span style="color: #d8d8d8">!=</span> <span style="color: #f7ca88">nil</span> <span style="color: #d8d8d8">{</span>
        <span style="color: #d8d8d8;background-color: #181818">log</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Fatalf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;Unable to marshal due to %s</span><span style="color: #a16946">\n</span><span style="color: #a1b56c">&#34;</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">err</span><span style="color: #d8d8d8">)</span>
    <span style="color: #d8d8d8">}</span>

    <span style="color: #d8d8d8;background-color: #181818">fmt</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Println</span><span style="color: #d8d8d8">(</span><span style="color: #dc9656">string</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">b</span><span style="color: #d8d8d8">))</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice how the <code>birth_date</code> presented in the RFC 3339 format. You can now
define the custom marshalling behavior that will return a different format for
<code>CustomTime</code> values (such as <code>DD-MM-YYYY</code>) instead of the default RFC 3339
timestamp format.</p>
</div>
<div class="paragraph">
<p>You only need to define a <code>MarshalJSON()</code> method for the type as shown below:</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d8d8d8;background-color: #181818"><code data-lang="go"><span style="color: #ba8baf">func</span> <span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">ct</span> <span style="color: #d8d8d8;background-color: #181818">CustomTime</span><span style="color: #d8d8d8">)</span> <span style="color: #d8d8d8;background-color: #181818">MarshalJSON</span><span style="color: #d8d8d8">()</span> <span style="color: #d8d8d8">([]</span><span style="color: #dc9656">byte</span><span style="color: #d8d8d8">,</span> <span style="color: #dc9656">error</span><span style="color: #d8d8d8">)</span> <span style="color: #d8d8d8">{</span>
    <span style="color: #ba8baf">return</span> <span style="color: #d8d8d8">[]</span><span style="color: #dc9656">byte</span><span style="color: #d8d8d8">(</span><span style="color: #d8d8d8;background-color: #181818">fmt</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Sprintf</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">`%q`</span><span style="color: #d8d8d8">,</span> <span style="color: #d8d8d8;background-color: #181818">ct</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Time</span><span style="color: #d8d8d8">.</span><span style="color: #d8d8d8;background-color: #181818">Format</span><span style="color: #d8d8d8">(</span><span style="color: #a1b56c">&#34;02-01-2006&#34;</span><span style="color: #d8d8d8">))),</span> <span style="color: #f7ca88">nil</span>
<span style="color: #d8d8d8">}</span></code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
