<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Notes on Hossein Esmail</title>
    <link>https://hossein-lap.github.io/notes/</link>
    <description>Recent content in Notes on Hossein Esmail</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hossein Esmail</copyright>
    <lastBuildDate>Tue, 08 Oct 2024 09:41:28 +0330</lastBuildDate><atom:link href="https://hossein-lap.github.io/notes/index.xml" rel="self" type="application/rss+xml" /><icon>https://hossein-lap.github.io/images/ed/bar.png</icon>
    
    
    <item>
      <title>Makefile</title>
      <link>https://hossein-lap.github.io/notes/makefile/</link>
      <pubDate>Tue, 08 Oct 2024 09:41:28 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/makefile/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This Makefile serves two purposes. The first is to automate common admin tasks
(like running tests, checking for vulnerabilities, pushing changes to a remote
repository, and deploying to production), and the second is to provide short
aliases for Go commands that are long or difficult to remember.</p>
</div>
<div class="paragraph">
<p>The exact contents of the Makefile changes from project to project. It’s
generic enough that you should be able to use it as-is for almost all projects.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_gist">1. Gist</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre># Change these variables as necessary.
main_package_path = ./cmd/example
binary_name = example

# =========================================================================== #
# HELPERS
# =========================================================================== #

## help: print this help message
.PHONY: help
help:
    @echo &#39;Usage:&#39;
    @sed -n &#39;s/^##//p&#39; ${MAKEFILE_LIST} | column -t -s &#39;:&#39; |  sed -e &#39;s/^/ /&#39;

.PHONY: confirm
confirm:
    @echo -n &#39;Are you sure? [y/N] &#39; &amp;&amp; read ans &amp;&amp; [ $${ans:-N} = y ]

.PHONY: no-dirty
no-dirty:
    @test -z &#34;$(shell git status --porcelain)&#34;


# =========================================================================== #
# QUALITY CONTROL
# =========================================================================== #

## audit: run quality control checks
.PHONY: audit
audit: test
    go mod tidy -diff
    go mod verify
    test -z &#34;$(shell gofmt -l .)&#34;
    go vet ./...
    go run honnef.co/go/tools/cmd/staticcheck@latest -checks=all,-ST1000,-U1000 ./...
    go run golang.org/x/vuln/cmd/govulncheck@latest ./...

## test: run all tests
.PHONY: test
test:
    go test -v -race -buildvcs ./...

## test/cover: run all tests and display coverage
.PHONY: test/cover
test/cover:
    go test -v -race -buildvcs -coverprofile=/tmp/coverage.out ./...
    go tool cover -html=/tmp/coverage.out


# =========================================================================== #
# DEVELOPMENT
# =========================================================================== #

## tidy: tidy modfiles and format .go files
.PHONY: tidy
tidy:
    go mod tidy -v
    go fmt ./...

## build: build the application
.PHONY: build
build:
    # Include additional build steps, like TypeScript, SCSS or Tailwind compilation here...
    go build -o=/tmp/bin/${binary_name} ${main_package_path}

## run: run the  application
.PHONY: run
run: build
    /tmp/bin/${binary_name}

## run/live: run the application with reloading on file changes
.PHONY: run/live
run/live:
    go run github.com/cosmtrek/air@v1.43.0 \
        --build.cmd &#34;make build&#34; --build.bin &#34;/tmp/bin/${binary_name}&#34; --build.delay &#34;100&#34; \
        --build.exclude_dir &#34;&#34; \
        --build.include_ext &#34;go, tpl, tmpl, html, css, scss, js, ts, sql, jpeg, jpg, gif, png, bmp, svg, webp, ico&#34; \
        --misc.clean_on_exit &#34;true&#34;


# =========================================================================== #
# OPERATIONS
# =========================================================================== #

## push: push changes to the remote Git repository
.PHONY: push
push: confirm audit no-dirty
    git push

## production/deploy: deploy the application to production
.PHONY: production/deploy
production/deploy: confirm audit no-dirty
    GOOS=linux GOARCH=amd64 go build -ldflags=&#39;-s&#39; -o=/tmp/bin/linux_amd64/${binary_name} ${main_package_path}
    upx -5 /tmp/bin/linux_amd64/${binary_name}
    # Include additional deployment steps here...</pre>
</div>
</div>
<div class="paragraph">
<p>The Makefile is organized into several sections, each with its own set of targets:</p>
</div>
<div class="sect2">
<h3 id="_helpers">1.1. Helpers</h3>
<div class="ulist">
<ul>
<li>
<p><code>help</code>: Prints a help message for the Makefile, including a list of available
targets and their descriptions.</p>
</li>
<li>
<p><code>confirm</code>: Prompts the user to confirm an action with a &#34;y/N&#34; prompt.</p>
</li>
<li>
<p><code>no-dirty</code>: Checks that there there are no untracked files or uncommitted
changes to the tracked files in the current git repository.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_quality_control">1.2. Quality Control</h3>
<div class="ulist">
<ul>
<li>
<p><code>audit</code>: Runs quality control checks on the codebase, including using <code>go mod tidy
-diff</code> to check that the <code>go.mod</code> and <code>go.sum</code> files are up-to-date and
correctly formatted, verifying the dependencies with <code>go mod verify</code>, running
<code>test -z &#34;$(shell gofmt -l .)&#34;</code> to check that all <code>.go</code> files are correctly
formatted, running static analysis with go <code>vet</code> and <code>staticcheck</code>, checking
for vulnerabilities using <code>govulncheck</code>, and running all tests. Note that it
uses <code>go run</code> to execute the latest versions of the remote <code>staticcheck</code> and
<code>govulncheck</code> packages, meaning that you don’t need to install these tools
first.</p>
</li>
<li>
<p><code>test</code>: Runs all tests. Note that we enable the race detector and embed build
info in the test binary.</p>
</li>
<li>
<p><code>test/cover</code>: Runs all tests and outputs a coverage report in HTML format.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_development">1.3. Development</h3>
<div class="ulist">
<ul>
<li>
<p><code>tidy</code>: Updates the dependencies and formats the <code>go.mod</code> and go.sum using
<code>go mod tidy</code>, and formats all <code>.go</code> files using <code>go fmt</code>.</p>
</li>
<li>
<p><code>build</code>: Builds the package at <code>main_package_path</code> and outputs a binary at
<code>/tmp/bin/{binary_name}</code>.</p>
</li>
<li>
<p><code>run</code>: Calls the <code>build</code> target and then runs the binary. Note that my main
reason for not using <code>go run</code> here is that <code>go run</code> doesn’t embed build info
in the binary.</p>
</li>
<li>
<p><code>run/live</code>: Use the <code>air</code> tool to run the application with live reloading
enabled. When changes are made to any files with the specified extensions,
the application is rebuilt and the binary is re-run.</p>
</li>
<li>
<p><strong>Depending on the project</strong> you might want to add more to this section, such
as targets for connecting to a development database instance and managing SQL
migrations.</p>
</li>
</ul>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Example: Makefile targets for working with sqlite</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="Makefile">## db/connect: create to the local database
.PHONY: db/connect
db/connect:
	sqlite3 db.sqlite

## db/migrations/new name=$1: create a new migration
.PHONY: db/migrations/new
db/migrations/new:
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest create -seq -ext=.sql -dir=./resources/migrations ${name}

## db/migrations/up: apply all up migrations
.PHONY: db/migrations/up
db/migrations/up:
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; up

## db/migrations/down: apply all down migrations
.PHONY: db/migrations/down
db/migrations/down: confirm
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; down

## db/migrations/goto version=$1: migrate to a specific version number
.PHONY: db/migrations/goto
db/migrations/goto: confirm
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; goto ${version}

## db/migrations/force version=$1: force database migration version number
.PHONY: db/migrations/force
db/migrations/force: confirm
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; force ${version}

## db/migrations/version: print the current migration version
.PHONY: db/migrations/version
db/migrations/version:
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; version</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_operations">1.4. Operations</h3>
<div class="ulist">
<ul>
<li>
<p><code>push</code>: Push changes to the remote Git repository. This asks for y/N
confirmation first, and automatically runs the <code>audit</code> and <code>no-dirty</code> targets
to make sure that all audit checks are passing and there are no uncommitted
changes in the repository before the push is executed.</p>
</li>
<li>
<p><code>production/deploy</code>: Builds the a binary for linux/amd64 architecture,
compress it using <code>upx</code>, and then run any deployment steps. Note that this
target asks for y/N confirmation before anything is executed, and also runs
the <code>audit</code> and <code>no-dirty</code> checks too.</p>
</li>
<li>
<p><strong>Depending on the project</strong> I often add more to this section too. For example,
a <code>staging/deploy</code> rule for deploying to a staging server,
<code>production/connect</code> for SSHing into a production server, <code>production/log</code>
for viewing production logs, <code>production/db</code> for connecting to the production
database, and <code>production/upgrade</code> for updating and upgrading software on a
production server.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_usage">2. Usage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each of these targets can be executed by running <code>make</code> followed by the target
name in your terminal. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">make tidy</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>go mod tidy -v
go fmt ./...</pre>
</div>
</div>
<div class="paragraph">
<p>If you run <code>make help</code> (or the naked <code>make</code> command without specifiying a
target) then you’ll get a description of the available targets.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">make <span style="color: #d0d0d0;background-color: #151515">help</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>Usage:
  help                print this help message
  tidy                tidy modfiles and format .go files
  audit               run quality control checks
  test                run all tests
  test/cover          run all tests and display coverage
  build               build the application
  run                 run the  application
  run/live            run the application with reloading on file changes
  push                push changes to the remote Git repository
  production/deploy   deploy the application to production</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reference">3. Reference</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://www.alexedwards.net/blog/a-time-saving-makefile-for-your-go-projects" class="bare">https://www.alexedwards.net/blog/a-time-saving-makefile-for-your-go-projects</a></p>
</li>
</ul>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Bash</title>
      <link>https://hossein-lap.github.io/notes/bash/</link>
      <pubDate>Mon, 07 Oct 2024 15:10:23 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/bash/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_add_colors">1. Add Colors</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash"><span style="color: #505050">#!/bin/sh</span>
<span style="color: #505050"># colors</span>
<span style="color: #d0d0d0;background-color: #151515">blue</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 4<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">cyan</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 6<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">magenta</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 5<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">yellow</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 3<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">green</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 2<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">red</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 1<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">normal</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput sgr0<span style="color: #8f5536">)</span>

check<span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0">[</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0">?</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#39;0&#39;</span> <span style="color: #d0d0d0">]</span><span style="color: #d0d0d0">;</span> <span style="color: #aa759f">then
        </span><span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">green</span><span style="color: #aa759f">}</span><span style="color: #90a959">Done</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">normal</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
        <span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#39;\n&#39;</span>
    <span style="color: #aa759f">else
        </span><span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">red</span><span style="color: #aa759f">}</span><span style="color: #90a959">Fail</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">normal</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
        <span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#39;\n&#39;</span>
    <span style="color: #aa759f">fi</span>
<span style="color: #d0d0d0">}</span>

check</code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Accessing K8S pods</title>
      <link>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</link>
      <pubDate>Fri, 31 May 2024 18:50:32 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><a href="/pdfs/notes/k8s-ingress-loadbalancer.pdf">Download this note as a PDF</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_forwarding_a_local_network_port_to_a_port_in_the_pod">1. Forwarding a Local Network Port to a Port in The Pod</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you want to talk to a specific pod without going through a service (for
debugging or other reasons), Kubernetes allows you to configure port forwarding
to the pod.</p>
</div>
<div class="paragraph">
<p>This is done through the <code>kubectl port-forward</code> command. The following command
will forward your machine’s local port <code>8888</code> to port <code>8080</code> of your
e.g <code>kubia-manual</code> pod.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl port-forward kubia-manual 8888:8080</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>... Forwarding from 127.0.0.1:8888 -&gt; 8080
... Forwarding from [::1]:8888 -&gt; 8080</pre>
</div>
</div>
<div class="sect2">
<h3 id="_connecting_to_the_pod_through_the_port_forwarder">1.1. Connecting to The Pod Through the Port Forwarder</h3>
<div class="paragraph">
<p>In a different terminal, you can now use curl to send an HTTP request to your pod
through the <code>kubectl port-forward</code> proxy running on <code>localhost:8888</code>.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>curl localhost:8888</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-manual</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_service_object">2. Service Object</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each pod gets its own IP address, but this address is internal to the cluster
and isn’t accessible from outside of it. To make the pod accessible from the
outside, you’ll expose it through a Service object. You’ll create a special
service of type <code>LoadBalancer</code>, because if you create a regular service (a
<code>ClusterIP</code> service), like the pod, it would also only be accessible from
inside the cluster. By creating a <code>LoadBalancer</code> type service, an external load
balancer will be created and you can connect to the pod through the load
balancer’s public IP.</p>
</div>
<div class="sect2">
<h3 id="_creating_a_service_object">2.1. Creating a Service Object</h3>
<div class="paragraph">
<p>To create the service, you’ll tell Kubernetes to expose the ReplicationController you
created:</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using YAML file</div>
<div class="listingblock">
<div class="title">Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span> <span style="color: #505050"># service&#39;s port</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span> <span style="color: #505050"># the forward-to port by service</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span> <span style="color: #505050"># all pods labeled `kubia` will follow/select this service</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Apply the service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl create <span style="color: #f4bf75">-f</span> kubia-srv.yaml</code></pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using kubectl CLI options</div>
<div class="listingblock">
<div class="title">Template:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl expose rc &lt;rep-controller-name&gt; <span style="color: #f4bf75">--type</span><span style="color: #d0d0d0">=</span>LoadBalancer <span style="color: #f4bf75">--name</span> &lt;lb-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Expose:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl expose rc kubia <span style="color: #f4bf75">--type</span><span style="color: #d0d0d0">=</span>LoadBalancer <span style="color: #f4bf75">--name</span> kubia-http</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>service &#34;kubia-http&#34; exposed</pre>
</div>
</div>
</div>
</div>
<div class="ulist">
<div class="title">Remotely Executing Commands in Running Containers:</div>
<ul>
<li>
<p>You’ll also need to obtain the cluster IP of your service
(using <code>kubectl get svc</code>, for example)</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl <span style="color: #d0d0d0;background-color: #151515">exec </span>kubia-7nog1 <span style="color: #f4bf75">--</span> curl <span style="color: #f4bf75">-s</span> http://10.111.249.153</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-gzwli</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_session_affinity_on_the_service">2.2. Session Affinity on the Service</h3>
<div class="paragraph">
<p>If you execute the same command a few more times, you should hit a different
pod with every invocation, because the service proxy normally forwards each
connection to a randomly selected backing pod, even if the connections are
coming from the same client.</p>
</div>
<div class="paragraph">
<p>If, on the other hand, you want all requests made by a certain client to be
redirected to the same pod every time, you can set the service’s
<code>sessionAffinity</code> property to <code>ClientIP</code> (instead of <code>None</code>, which is the
default), as shown in the following listing.</p>
</div>
<div class="listingblock">
<div class="title">Service with <code>ClientIP</code> Session Affinity Manifest</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">sessionAffinity</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">ClientIP</span>
  <span style="color: #90a959">...</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Kubernetes supports only two types of service session affinity: <code>None</code> and
<code>ClientIP</code>.</p>
</li>
<li>
<p>Kubernetes services don’t operate at the HTTP level. Services deal with TCP
and UDP packets and don’t care about the payload they carry. Because cookies
are a construct of the HTTP protocol, services don’t know about them, which
explains why session affinity cannot be based on cookies.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_ports_in_the_same_service">2.3. Exposing Multiple Ports in the Same Service</h3>
<div class="listingblock">
<div class="title">Manifest</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">443</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8443</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_named_ports">2.4. Using Named Ports</h3>
<div class="paragraph">
<p>You can give a name to each pod’s port and refer to it by name in the service spec.</p>
</div>
<div class="listingblock">
<div class="title">Specifying port names in a pod definition Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Pod</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">containers</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
    <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
      <span style="color: #6a9fb5">containerPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span>
      <span style="color: #6a9fb5">containerPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8443</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Referring to named ports in a service Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">443</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_connecting_to_services_living_outside_the_cluster">3. Connecting to services living outside the cluster</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Instead of having the service redirect connections to pods in the cluster, you
want it to redirect to external IP(s) and port(s).</p>
</div>
<div class="paragraph">
<p>This allows you to take advantage of both service load balancing and service
discovery. Client pods running in the cluster can connect to the external
service like they connect to internal services.</p>
</div>
<div class="sect2">
<h3 id="_service_endpoints">3.1. Service Endpoints</h3>
<div class="paragraph">
<p>Services don’t link to pods directly. Instead, a resource sits in between—the
Endpoints resource. You may have already noticed endpoints if you used the
<code>kubectl describe</code> command on your service.</p>
</div>
<div class="listingblock">
<div class="title">Full details of a service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl describe svc kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>Name:             kubia
Namespace:        default
Labels:           &lt;none&gt;
Selector:         app=kubia
Type:             ClusterIP
IP:               10.111.249.153
Port:             &lt;unset&gt; 80/TCP
Endpoints:        10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080
Session           Affinity: None
No events.</pre>
</div>
</div>
<div class="paragraph">
<p>An Endpoints resource (yes, plural) is a list of IP addresses and ports
exposing a service. The Endpoints resource is like any other Kubernetes
resource, so you can display its basic info with kubectl get.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get endpoints kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME     ENDPOINTS                                           AGE
kubia    10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080     1h</pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Manually Configuring Service Endpoints</div>
<div class="ulist">
<ul>
<li>
<p>having the service’s endpoints decoupled from the service allows them to be
configured and updated manually.</p>
</li>
<li>
<p>If you create a service without a pod selector, Kubernetes won’t even create
the Endpoints resource</p>
<div class="ulist">
<ul>
<li>
<p>after all, without a selector, it can’t know which pods to include in the
service</p>
</li>
</ul>
</div>
</li>
<li>
<p>To create a service with manually managed endpoints, you need to create both
a Service and an Endpoints resource</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A service without a pod selector: <code>external-service.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">external-service</span> <span style="color: #505050"># must match the endpoints name</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Endpoints are a separate resource and not an attribute of a service</p>
</li>
<li>
<p>Because you created the service without a selector, the corresponding
Endpoints resource hasn’t been created automatically</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A manually created Endpoints resource: <code>external-service-endpoints.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Endpoints</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">external-service</span> <span style="color: #505050"># must match the service name</span>
<span style="color: #6a9fb5">subsets</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">addresses</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">ip</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">11.11.11.11</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">ip</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">22.22.22.22</span>
    <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span> <span style="color: #505050"># target port of endpoints</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_to_external_clients">4. Exposing services to external clients</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Few ways to make a service accessible externally.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>NodePort</code> Service Type</p>
<div class="ulist">
<ul>
<li>
<p>Each cluster node opens a port on the node itself (hence the name) and
redirects traffic received on that port to the underlying service.</p>
</li>
<li>
<p>The service isn’t accessible only at the internal cluster IP and port, but
also through a dedicated port on all nodes.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>LoadBalancer</code> Service Type, an extention of <code>NodePort</code> type</p>
<div class="ulist">
<ul>
<li>
<p>This makes the service accessible through a dedicated load balancer,
provisioned from the cloud infrastructure Kubernetes is running on.</p>
</li>
<li>
<p>The load balancer redirects traffic to the node port across all the nodes.
Clients connect to the service through the load balancer’s IP.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Create <code>Ingress</code> Resource, radically different mechanism for exposing
multiple services through a single IP address</p>
<div class="ulist">
<ul>
<li>
<p>It operates at the HTTP level (network layer 7) and can thus offer more
features than layer 4 services can</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_using_a_nodeport_service">4.1. Using a NodePort service</h3>
<div class="paragraph">
<p>By creating a <code>NodePort</code> service, you make Kubernetes reserve a port on all its
nodes (the same port number is used across all of them) and forward incoming
connections to the pods that are part of the service.</p>
</div>
<div class="paragraph">
<p>This is similar to a regular service (their actual type is <code>ClusterIP</code>), but a
<code>NodePort</code> service can be accessed not only through the service’s internal
cluster IP, but also through any node’s IP and the reserved node port.</p>
</div>
<div class="paragraph">
<p>This will make more sense when you try interacting with a <code>NodePort</code> service.</p>
</div>
<div class="listingblock">
<div class="title">A NodePort service definition: <code>kubia-svc-nodeport.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia-nodeport</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">type</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">NodePort</span> <span style="color: #505050"># service type</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span> <span style="color: #505050"># service&#39;s internal cluster IP port</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span> <span style="color: #505050"># target port of the backing pods</span>
    <span style="color: #6a9fb5">nodePort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">30123</span> <span style="color: #505050"># service will listen on port 30123, each cluster nodes</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Examine the NodePort Service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get svc kubia-nodeport</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME             CLUSTER-IP       EXTERNAL-IP    PORT(S)          AGE
kubia-nodeport   10.111.254.223   &lt;nodes&gt;        80:30123/TCP     2m</pre>
</div>
</div>
<div class="paragraph">
<p><code>EXTERNAL-IP</code> column shows <code>&lt;nodes&gt;</code>, indicating the service is accessible
through the IP address of any cluster node. The <code>PORT(S)</code> column shows both the
internal port of the cluster IP (<code>80</code>) and the node port (<code>30123</code>). The service
is accessible at the following addresses:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>10.11.254.223:80</code></p>
</li>
<li>
<p><code>&lt;1st node’s IP&gt;:30123</code></p>
</li>
<li>
<p><code>&lt;2nd node’s IP&gt;:30123</code></p>
</li>
<li>
<p>and so on</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Using JSONPath to get the IPs of all your nodes</div>
<p>You can find the IP in the JSON or YAML descriptors of the nodes. But instead
of sifting through the relatively large JSON, you can tell <code>kubectl</code> to print
out only the node IP instead of the whole service definition</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get nodes <span style="color: #f4bf75">-o</span> <span style="color: #8f5536">\</span>
<span style="color: #d0d0d0;background-color: #151515">  jsonpath=&#39;{.items[*].status.addresses[?(@.type==&#34;ExternalIP&#34;)].address}&#39;</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>130.211.97.55 130.211.99.206</pre>
</div>
</div>
<div class="paragraph">
<p>Once you know the IPs of your nodes, you can try accessing your service through
them.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>curl http://130.211.97.55:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-ym8or</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>curl http://130.211.99.206:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-xueq1</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_a_service_through_an_external_load_balancer">4.2. Exposing a service through an external load balancer</h3>
<div class="paragraph">
<p>Kubernetes clusters running on cloud providers usually support the automatic
provision of a load balancer from the cloud infrastructure. All you need to do
is set the service’s type to <code>LoadBalancer</code> instead of <code>NodePort</code>. The load
balancer will have its own unique, publicly accessible IP address and will
redirect all connections to your service. You can thus access your service
through the load balancer’s IP address.</p>
</div>
<div class="paragraph">
<p>If Kubernetes is running in an environment that doesn’t support <code>LoadBalancer</code>
services, the load balancer will not be provisioned, but the service will still
behave like a <code>NodePort</code> service. That’s because a <code>LoadBalancer</code> service is an
extension of a <code>NodePort</code> service. You’ll run this example on Google Kubernetes
Engine, which supports <code>LoadBalancer</code> services. Minikube doesn’t, at least not
as of this writing.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Creating a Loadbalancer Service</div>
<div class="listingblock">
<div class="title">A LoadBalancer-type service: <code>kubia-svc-loadbalancer.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia-loadbalancer</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">type</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">LoadBalancer</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The service type is set to LoadBalancer instead of NodePort. You’re not
specifying a specific node port, although you could (you’re letting
Kubernetes choose one instead).</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Connecting to the Service Through the Load Balancer</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get svc kubia-loadbalancer</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output</div>
<div class="content">
<pre>NAME                CLUSTER-IP       EXTERNAL-IP       PORT(S)       AGE
kubia-loadbalancer  10.111.241.153   130.211.53.173    80:32143/TCP  1m</pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Session affinity and web browsers</div>
<div class="paragraph">
<p>Because your service is now exposed externally, you may try accessing it with
your web browser. You’ll see something that may strike you as odd—the browser
will hit the exact same pod every time. Did the service’s session affinity
change in the meantime? With <code>kubectl explain</code>, you can double-check that the
service’s session affinity is still set to <code>None</code>, so why don’t different
browser requests hit different pods, as is the case when using <code>curl</code>?</p>
</div>
<div class="paragraph">
<p>Let me explain what’s happening. The browser is using keep-alive connections
and sends all its requests through a single connection, whereas <code>curl</code> opens a
new connection every time. Services work at the connection level, so when a
connection to a service is first opened, a random pod is selected and then all
network packets belonging to that connection are all sent to that single pod.
Even if session affinity is set to <code>None</code>, users will always hit the same pod
(until the connection is closed).</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_understanding_the_peculiarities_of_external_connections">4.3. Understanding the peculiarities of external connections</h3>
<div class="paragraph">
<p>You must be aware of several things related to externally originating connections to
services.</p>
</div>
<div class="paragraph">
<div class="title">Understanding and Preventing Unnecessary Network Hops</div>
<p>When an external client connects to a service through the node port (this also
includes cases when it goes through the load balancer first), the randomly chosen
pod may or may not be running on the same node that received the connection. An
additional network hop is required to reach the pod, but this may not always be
desirable.</p>
</div>
<div class="paragraph">
<p>You can prevent this additional hop by configuring the service to redirect external
traffic only to pods running on the node that received the connection. This is done by
setting the <code>externalTrafficPolicy</code> field in the service’s <code>spec</code> section</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">externalTrafficPolicy</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Local</span>
  <span style="color: #90a959">...</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Being Aware of the non-preservation of the Client’s IP</div>
<p>Usually, when clients inside the cluster connect to a service, the pods backing
the service can obtain the client’s IP address. But when the connection is
received through a node port, the packets&#39; source IP is changed, because Source
Network Address Translation (SNAT) is performed on the packets.</p>
</div>
<div class="paragraph">
<p>The backing pod can’t see the actual client’s IP, which may be a problem for
some applications that need to know the client’s IP. In the case of a web
server, for example, this means the access log won’t show the browser’s IP.</p>
</div>
<div class="paragraph">
<p>The <code>Local</code> external traffic policy described in the previous section affects
the preservation of the client’s IP, because there’s no additional hop between
the node receiving the connection and the node hosting the target pod (SNAT
isn’t performed).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_externally_through_an_ingress_resource">5. Exposing services externally through an Ingress resource</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You must be aware of several things related to externally originating
connections to services.</p>
</div>
<div class="ulist">
<div class="title">Understanding Why Ingresses are Needed</div>
<ul>
<li>
<p>each LoadBalancer service requires its own load balancer with its own public
IP address, whereas an Ingress only requires one, even when providing access
to dozens of services</p>
</li>
<li>
<p>When a client sends an HTTP request to the Ingress, the host and path in the
request determine which service the request is forwarded to</p>
</li>
<li>
<p>Ingresses operate at the application layer of the network stack (HTTP) and
can provide features such as cookie-based session affinity and the like,
which services can’t</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Understanding that an Ingress Controller is Required</div>
<p>To make Ingress resources work, an Ingress controller needs to be running in
the cluster.</p>
</div>
<div class="sect2">
<h3 id="_creating_an_ingress_resource">5.1. Creating an Ingress resource</h3>
<div class="listingblock">
<div class="title">An Ingress resource definition: <code>kubia-ingress.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">extensions/v1beta1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Ingress</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">rules</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">host</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia.example.com</span> <span style="color: #505050">#  maps the domain name to your service</span>
  <span style="color: #6a9fb5">http</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">paths</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">path</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">/</span>                        <span style="color: #505050"># All requests will be sent to port 80</span>
      <span style="color: #6a9fb5">backend</span><span style="color: #d0d0d0">:</span>                       <span style="color: #505050"># of the kubia-nodeport service.</span>
        <span style="color: #6a9fb5">serviceName</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia-nodeport</span>  <span style="color: #505050">#</span>
        <span style="color: #6a9fb5">servicePort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>              <span style="color: #505050">#</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This defines an Ingress with a single rule, which makes sure all HTTP requests
received by the Ingress controller, in which the host <code>kubia.example.com</code> is
requested, will be sent to the <code>kubia-nodeport</code> service on port <code>80</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Ingress controllers on cloud providers (in GKE, for example) require the
Ingress to point to a <code>NodePort</code> service. But that’s not a requirement of
Kubernetes itself.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_the_service_through_the_ingress">5.2. Accessing the service through the Ingress</h3>
<div class="paragraph">
<p>To access your service through <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a>, you’ll need to make sure
the domain name resolves to the IP of the Ingress controller</p>
</div>
<div class="listingblock">
<div class="title">Obtaining the ip Address of the Ingress:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get ingresses</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME      HOSTS                ADDRESS            PORTS       AGE
kubia     kubia.example.com    192.168.99.100     80          29m</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>When running on cloud providers, the address may take time to appear,
because the Ingress controller provisions a load balancer behind the scenes.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="ulist">
<ul>
<li>
<p>The IP is shown in the <code>ADDRESS</code> column.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Once you know the IP, you can then either configure your DNS servers to resolve
kubia.example.com to that IP or you can setup hosts: add the following line to
<code>/etc/hosts</code> (or <code>C:\windows\system32\drivers\etc\hosts</code> on Windows):</p>
</div>
<div class="listingblock">
<div class="title"><code>/etc/hosts</code></div>
<div class="content">
<pre>192.168.99.100		kubia.example.com</pre>
</div>
</div>
<div class="paragraph">
<p>So you can access the service at <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a> using a browser or
<code>curl</code></p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_understading_how_ingress_work">5.2.1. Understading how Ingress work</h4>
<div class="ulist">
<ul>
<li>
<p>The client first performed a DNS lookup of kubia.example.com, and the DNS
server (or the local operating system) returned the IP of the Ingress
controller</p>
</li>
<li>
<p>The client then sent an HTTP request to the Ingress controller and specified
<code>kubia.example.com</code> in the <code>Host</code> header</p>
<div class="ulist">
<ul>
<li>
<p>From that header, the controller determined which service the client is
trying to access, looked up the pod IPs through the Endpoints object
associated with the service, and forwarded the client’s request to one of
the pods.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The Ingress controller don’t forward the request to the service</p>
<div class="ulist">
<ul>
<li>
<p>It only use it to select a pod</p>
</li>
<li>
<p>Most, if not all, controllers work like this</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_services_through_the_same_ingress">5.3. Exposing multiple services through the same Ingress</h3>
<div class="paragraph">
<p>Both <code>rules</code> and <code>paths</code> are arrays, so they can contain multiple items</p>
</div>
<div class="sect3">
<h4 id="_mapping_different_services_to_different_paths_of_the_same_host">5.3.1. Mapping different services to different paths of the same host</h4>

</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Webserver</title>
      <link>https://hossein-lap.github.io/notes/webserver/</link>
      <pubDate>Fri, 31 May 2024 16:47:17 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/webserver/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>We need <code>&#34;net/http&#34;</code> module to create webserver and listen to the specified port.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">import</span> <span style="color: #d0d0d0">(</span>
    <span style="color: #90a959">&#34;net/http&#34;</span>
<span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>we also might need these modules as well:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&#34;encoding/json&#34;</code> too for parsing JSON data</p>
</li>
<li>
<p><code>&#34;database/sql&#34;</code> and <code>&#34;github.com/go-sql-driver/mysql&#34;</code> to handle (my)sql/mariadb part</p>
</li>
<li>
<p><code>&#34;github.com/redi/go-redis/v9&#34;</code> to handle redis-cache</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We need a request handler struct for the http server to be able to work.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">RequestHandler</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>And now we define the http server. it needs a <code>ServeHTTP()</code> function and paths
that needs to be handled (HTTP requests goes to the specified paths)</p>
</div>
<div class="listingblock">
<div class="title">main funcion</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">NewServeMx</span><span style="color: #d0d0d0">()</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path1&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path1/&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path2&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path2/&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #505050">/* continue */</span>
    <span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ListenAndServe</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;:8080&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">serve function</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">h</span> <span style="color: #d0d0d0">*</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0;background-color: #151515">ServeHTTP</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">w</span> <span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ResponseWriter</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">r</span> <span style="color: #d0d0d0">*</span><span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Requset</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">request_type</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Method</span>
    <span style="color: #d0d0d0;background-color: #151515">tmp</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">strings</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">SplitN</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">URL</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">String</span><span style="color: #d0d0d0">(),</span> <span style="color: #90a959">&#34;/&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">3</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">section</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">tmp</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">]</span> <span style="color: #505050">// path</span>
    <span style="color: #d0d0d0;background-color: #151515">key</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">tmp</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">]</span> <span style="color: #505050">// add data after the path</span>
    <span style="color: #d0d0d0;background-color: #151515">params</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">URL</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Query</span><span style="color: #d0d0d0">()</span>
    <span style="color: #d0d0d0;background-color: #151515">value</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">params</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Get</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">key</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">body</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">io</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ReadAll</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Body</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">// values from curl&#39;s `--data` flag (spected to be JSON)</span>
    <span style="color: #505050">/* continue */</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_redis_handler">1. Redis Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">cache_handler</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">client</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">redis</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">NewClient</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">redis</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Options</span><span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Addr</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;localhost:6349&#34;</span>
        <span style="color: #d0d0d0;background-color: #151515">Password</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;&#34;</span> <span style="color: #505050">// No password, to get it from env variables use: `os.Getenv(&#34;ENV&#34;)`</span>
        <span style="color: #d0d0d0;background-color: #151515">DB</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">0</span> <span style="color: #505050">// default db</span>
    <span style="color: #d0d0d0">})</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mysql_handler">2. MySQL Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">database_handler</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">sql_url</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">&#34;root@localhost:3360&#34;</span>
    <span style="color: #d0d0d0;background-color: #151515">db</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">sql</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Open</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;mysql&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">sql_url</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">pandic</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Error</span><span style="color: #d0d0d0">())</span>
    <span style="color: #d0d0d0">}</span>
    <span style="color: #aa759f">defer</span> <span style="color: #d0d0d0;background-color: #151515">db</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Close</span><span style="color: #d0d0d0">()</span>
    <span style="color: #505050">/* continue */</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_unmarshal">3. JSON Parser - Unmarshal</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">Movie</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Name</span> <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;name&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Publisher</span> <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;publisher&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Year</span> <span style="color: #d28445">int</span> <span style="color: #90a959">`json:&#34;year&#34;`</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">HandleMovie</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #505050">// var target map[string]any /* not optimal */</span>
    <span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">movie</span> <span style="color: #d0d0d0;background-color: #151515">Movie</span>

    <span style="color: #d0d0d0;background-color: #151515">input</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{
        &#34;name&#34;: &#34;Jocker&#34;,
        &#34;publisher&#34;: &#34;WB&#34;,
        &#34;year&#34;: 2019
    }`</span>

    <span style="color: #505050">// err := json.Unmarshal([]byte(input), &amp;target) /* not optimal */</span>
    <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Unmarshal</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #d0d0d0">),</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">/* not optimal */</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #505050">/* not optimal */</span>
    <span style="color: #505050">// for k, v := range target {</span>
    <span style="color: #505050">//    fmt.Printf(&#34;k: %s, v: %v\n&#34;, k, v)</span>
    <span style="color: #505050">// }</span>
    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Printf</span><span style="color: #d0d0d0">(</span>
        <span style="color: #90a959">&#34;Name: %s, Publisher: %s, Year: %d</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Publisher</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Year</span><span style="color: #d0d0d0">,</span>
    <span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_complex_json">3.1. Complex JSON</h3>
<div class="listingblock">
<div class="title"><code>assets/complex.json</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="json"><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;name&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;James Peterson&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;age&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">37</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;address&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0;background-color: #151515">&#34;line1&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Block 78 Woodgrove Avenue 5&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0;background-color: #151515">&#34;line2&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Unit #05-111&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0;background-color: #151515">&#34;postal&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;654378&#34;</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0">},</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;pets&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #d0d0d0">[</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;name&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Lex&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;kind&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Dog&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;age&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;color&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Gray&#34;</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">},</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;name&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Faye&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;kind&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Cat&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;age&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">6</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;color&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Orange&#34;</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">}</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0">]</span><span style="color: #d0d0d0;background-color: #151515">
</span><span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><code>examples/complex_json/main.go</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0">(</span>
    <span style="color: #d0d0d0;background-color: #151515">FullPerson</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Address</span> <span style="color: #d0d0d0;background-color: #151515">Address</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span>    <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Pets</span>    <span style="color: #d0d0d0">[]</span><span style="color: #d0d0d0;background-color: #151515">Pet</span>
        <span style="color: #d0d0d0;background-color: #151515">Age</span>     <span style="color: #d28445">int</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">Pet</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Kind</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Color</span> <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Age</span>   <span style="color: #d28445">int</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">Address</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Line1</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Line2</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Postal</span> <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">)</span>


<span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">os</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ReadFile</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;assets/complex.json&#34;</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to read file due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">person</span> <span style="color: #d0d0d0;background-color: #151515">FullPerson</span>

    <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Unmarshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">person</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">litter</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Dump</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">person</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_common_pitfalls_with_json_unmarshalling_in_go">3.2. Common pitfalls with JSON unmarshalling in Go</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Extra fields are omitted in the target struct</p>
</li>
<li>
<p>Missing fields fallback to zero values</p>
</li>
<li>
<p>Unmarshalling is case insensitive</p>
</li>
<li>
<p>Field names must match JSON keys exactly</p>
</li>
<li>
<p>Type aliases are preserved</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_marshal">4. JSON Parser - Marshal</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>json.Marshal()</code> method does the opposite of <code>Unmarshal()</code> by converting
a given data structure into a JSON.</p>
</div>
<div class="listingblock">
<div class="title">examples/basic_marshal/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">in</span> <span style="color: #d0d0d0;background-color: #151515">any</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">[]</span><span style="color: #d28445">byte</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">out</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">in</span><span style="color: #d0d0d0">)</span>

    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #aa759f">return</span> <span style="color: #d0d0d0;background-color: #151515">out</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">first</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">14</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">second</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Hello world&#34;</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">third</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">float32</span><span style="color: #d0d0d0">{</span><span style="color: #90a959">1.66</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">6.86</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">10.1</span><span style="color: #d0d0d0">})</span>
    <span style="color: #d0d0d0;background-color: #151515">fourth</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #aa759f">map</span><span style="color: #d0d0d0">[</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">]</span><span style="color: #d28445">int</span><span style="color: #d0d0d0">{</span><span style="color: #90a959">&#34;num&#34;</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">15</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">&#34;other&#34;</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">17</span><span style="color: #d0d0d0">})</span>
    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Printf</span><span style="color: #d0d0d0">(</span>
        <span style="color: #90a959">&#34;first: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">second: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">third: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">fourth: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">first</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">second</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">third</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">fourth</span><span style="color: #d0d0d0">,</span>
    <span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_structs">4.1. structs</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">p</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">Person</span><span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">:</span>  <span style="color: #90a959">&#34;John Jones&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Age</span><span style="color: #d0d0d0">:</span>   <span style="color: #90a959">26</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Email</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;johnjones@email.com&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Phone</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;89910119&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Hobbies</span><span style="color: #d0d0d0">:</span> <span style="color: #d0d0d0">[]</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">{</span>
            <span style="color: #90a959">&#34;Swimming&#34;</span><span style="color: #d0d0d0">,</span>
            <span style="color: #90a959">&#34;Badminton&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0">},</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">p</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">))</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If you wish to format the JSON object, you can use the <code>MarshalIndent()</code> method
which performs the same function as <code>Marshal()</code> but applies some indentation to
format the output.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_customizing_json_field_names_with_struct_tags">4.2. Customizing JSON field names with struct tags</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Breed</span>         <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0;background-color: #151515">Name</span>          <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0;background-color: #151515">FavoriteTreat</span> <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0;background-color: #151515">Age</span>           <span style="color: #d28445">int</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">dog</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span><span style="color: #d0d0d0">{</span>
  <span style="color: #d0d0d0;background-color: #151515">Breed</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;Golden Retriever&#34;</span><span style="color: #d0d0d0">,</span>
  <span style="color: #d0d0d0;background-color: #151515">Age</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8</span><span style="color: #d0d0d0">,</span>
  <span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;Paws&#34;</span><span style="color: #d0d0d0">,</span>
  <span style="color: #d0d0d0;background-color: #151515">FavoriteTreat</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;Kibble&#34;</span><span style="color: #d0d0d0">,</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Breed</span>         <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;breed&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Name</span>          <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;name&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">FavoriteTreat</span> <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;favorite_treat&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Age</span>           <span style="color: #d28445">int</span>    <span style="color: #90a959">`json:&#34;age&#34;`</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">input</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{
      &#34;name&#34;: &#34;Coffee&#34;,
      &#34;breed&#34;: &#34;Toy Poodle&#34;,
      &#34;age&#34;: 5,
      &#34;favorite_treat&#34;: &#34;Kibble&#34;
    }`</span>

    <span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">coffee</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span>

    <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Unmarshal</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #d0d0d0">),</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">coffee</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">litter</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Dump</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">coffee</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_uses_of_struct_tags">4.3. Other uses of struct tags</h3>
<div class="listingblock">
<div class="title">Omit an empty field (one with its zero value in Go)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">User</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Username</span> <span style="color: #d28445">string</span>   <span style="color: #90a959">`json:&#34;username&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Password</span> <span style="color: #d28445">string</span>   <span style="color: #90a959">`json:&#34;-&#34;`</span>

    <span style="color: #d0d0d0;background-color: #151515">Email</span>    <span style="color: #d28445">string</span>   <span style="color: #90a959">`json:&#34;email&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Hobbies</span>  <span style="color: #d0d0d0">[]</span><span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;hobbies,omitempty&#34;`</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_validating_json_data">5. Validating JSON data</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">good</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{&#34;name&#34;: &#34;John Doe&#34;}`</span>
    <span style="color: #d0d0d0;background-color: #151515">bad</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{name: &#34;John Doe&#34;}`</span>

    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Valid</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">good</span><span style="color: #d0d0d0">)))</span>
    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Valid</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">bad</span><span style="color: #d0d0d0">)))</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_defining_custom_behavior_marshal_unmarshal_data">6. Defining custom behavior - Marshal / Unmarshal data</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Go, you can define custom behavior for marshalling data by implementing the
<code>json.Marshaler</code> interface. This interface defines a single method,
<code>MarshalJSON()</code> which takes no arguments and returns a byte slice and an
error.</p>
</div>
<div class="paragraph">
<p>To implement the <code>json.Marshaler</code> interface, you need to define a new type that
wraps the original type you want to marshal. This new type should have a method
named <code>MarshalJSON()</code> that returns a byte slice and an error.</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0">(</span>
    <span style="color: #d0d0d0;background-color: #151515">CustomTime</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Time</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">Baby</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">BirthDate</span> <span style="color: #d0d0d0;background-color: #151515">CustomTime</span> <span style="color: #90a959">`json:&#34;birth_date&#34;`</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span>      <span style="color: #d28445">string</span>    <span style="color: #90a959">`json:&#34;name&#34;`</span>
        <span style="color: #d0d0d0;background-color: #151515">Gender</span>    <span style="color: #d28445">string</span>    <span style="color: #90a959">`json:&#34;gender&#34;`</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above snippet, we defined a new <code>CustomTime</code> type that wraps a
<code>time.Time</code> value. In is subsequently used in the <code>Baby</code> struct as the type of
the <code>BirthDate</code> value.</p>
</div>
<div class="paragraph">
<p>Here’s an example that marshals a value of type <code>Baby</code> below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">baby</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">Baby</span><span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">:</span>   <span style="color: #90a959">&#34;johnny&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Gender</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;male&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">BirthDate</span><span style="color: #d0d0d0">:</span> <span style="color: #d0d0d0;background-color: #151515">CustomTime</span><span style="color: #d0d0d0">{</span>
            <span style="color: #d0d0d0;background-color: #151515">time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Date</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">2023</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">12</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Now</span><span style="color: #d0d0d0">()</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Location</span><span style="color: #d0d0d0">()),</span>
        <span style="color: #d0d0d0">},</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">baby</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">))</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice how the <code>birth_date</code> presented in the RFC 3339 format. You can now
define the custom marshalling behavior that will return a different format for
<code>CustomTime</code> values (such as <code>DD-MM-YYYY</code>) instead of the default RFC 3339
timestamp format.</p>
</div>
<div class="paragraph">
<p>You only need to define a <code>MarshalJSON()</code> method for the type as shown below:</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">ct</span> <span style="color: #d0d0d0;background-color: #151515">CustomTime</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0;background-color: #151515">MarshalJSON</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">,</span> <span style="color: #d28445">error</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">return</span> <span style="color: #d0d0d0">[]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Sprintf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">`%q`</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">ct</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Format</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;02-01-2006&#34;</span><span style="color: #d0d0d0">))),</span> <span style="color: #f4bf75">nil</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
