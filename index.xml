<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Hossein Esmail</title>
    <link>https://hossein-lap.github.io/</link>
    <description>Recent content on Hossein Esmail</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hossein Esmail</copyright>
    <lastBuildDate>Tue, 08 Oct 2024 09:41:28 +0330</lastBuildDate><atom:link href="https://hossein-lap.github.io/index.xml" rel="self" type="application/rss+xml" /><icon>https://hossein-lap.github.io/images/ed/foo.png</icon>
    
    
    <item>
      <title>Makefile</title>
      <link>https://hossein-lap.github.io/notes/makefile/</link>
      <pubDate>Tue, 08 Oct 2024 09:41:28 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/makefile/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This Makefile serves two purposes. The first is to automate common admin tasks
(like running tests, checking for vulnerabilities, pushing changes to a remote
repository, and deploying to production), and the second is to provide short
aliases for Go commands that are long or difficult to remember.</p>
</div>
<div class="paragraph">
<p>The exact contents of the Makefile changes from project to project. It’s
generic enough that you should be able to use it as-is for almost all projects.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_gist">1. Gist</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre># Change these variables as necessary.
main_package_path = ./cmd/example
binary_name = example

# =========================================================================== #
# HELPERS
# =========================================================================== #

## help: print this help message
.PHONY: help
help:
    @echo &#39;Usage:&#39;
    @sed -n &#39;s/^##//p&#39; ${MAKEFILE_LIST} | column -t -s &#39;:&#39; |  sed -e &#39;s/^/ /&#39;

.PHONY: confirm
confirm:
    @echo -n &#39;Are you sure? [y/N] &#39; &amp;&amp; read ans &amp;&amp; [ $${ans:-N} = y ]

.PHONY: no-dirty
no-dirty:
    @test -z &#34;$(shell git status --porcelain)&#34;


# =========================================================================== #
# QUALITY CONTROL
# =========================================================================== #

## audit: run quality control checks
.PHONY: audit
audit: test
    go mod tidy -diff
    go mod verify
    test -z &#34;$(shell gofmt -l .)&#34;
    go vet ./...
    go run honnef.co/go/tools/cmd/staticcheck@latest -checks=all,-ST1000,-U1000 ./...
    go run golang.org/x/vuln/cmd/govulncheck@latest ./...

## test: run all tests
.PHONY: test
test:
    go test -v -race -buildvcs ./...

## test/cover: run all tests and display coverage
.PHONY: test/cover
test/cover:
    go test -v -race -buildvcs -coverprofile=/tmp/coverage.out ./...
    go tool cover -html=/tmp/coverage.out


# =========================================================================== #
# DEVELOPMENT
# =========================================================================== #

## tidy: tidy modfiles and format .go files
.PHONY: tidy
tidy:
    go mod tidy -v
    go fmt ./...

## build: build the application
.PHONY: build
build:
    # Include additional build steps, like TypeScript, SCSS or Tailwind compilation here...
    go build -o=/tmp/bin/${binary_name} ${main_package_path}

## run: run the  application
.PHONY: run
run: build
    /tmp/bin/${binary_name}

## run/live: run the application with reloading on file changes
.PHONY: run/live
run/live:
    go run github.com/cosmtrek/air@v1.43.0 \
        --build.cmd &#34;make build&#34; --build.bin &#34;/tmp/bin/${binary_name}&#34; --build.delay &#34;100&#34; \
        --build.exclude_dir &#34;&#34; \
        --build.include_ext &#34;go, tpl, tmpl, html, css, scss, js, ts, sql, jpeg, jpg, gif, png, bmp, svg, webp, ico&#34; \
        --misc.clean_on_exit &#34;true&#34;


# =========================================================================== #
# OPERATIONS
# =========================================================================== #

## push: push changes to the remote Git repository
.PHONY: push
push: confirm audit no-dirty
    git push

## production/deploy: deploy the application to production
.PHONY: production/deploy
production/deploy: confirm audit no-dirty
    GOOS=linux GOARCH=amd64 go build -ldflags=&#39;-s&#39; -o=/tmp/bin/linux_amd64/${binary_name} ${main_package_path}
    upx -5 /tmp/bin/linux_amd64/${binary_name}
    # Include additional deployment steps here...</pre>
</div>
</div>
<div class="paragraph">
<p>The Makefile is organized into several sections, each with its own set of targets:</p>
</div>
<div class="sect2">
<h3 id="_helpers">1.1. Helpers</h3>
<div class="ulist">
<ul>
<li>
<p><code>help</code>: Prints a help message for the Makefile, including a list of available
targets and their descriptions.</p>
</li>
<li>
<p><code>confirm</code>: Prompts the user to confirm an action with a &#34;y/N&#34; prompt.</p>
</li>
<li>
<p><code>no-dirty</code>: Checks that there there are no untracked files or uncommitted
changes to the tracked files in the current git repository.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_quality_control">1.2. Quality Control</h3>
<div class="ulist">
<ul>
<li>
<p><code>audit</code>: Runs quality control checks on the codebase, including using <code>go mod tidy
-diff</code> to check that the <code>go.mod</code> and <code>go.sum</code> files are up-to-date and
correctly formatted, verifying the dependencies with <code>go mod verify</code>, running
<code>test -z &#34;$(shell gofmt -l .)&#34;</code> to check that all <code>.go</code> files are correctly
formatted, running static analysis with go <code>vet</code> and <code>staticcheck</code>, checking
for vulnerabilities using <code>govulncheck</code>, and running all tests. Note that it
uses <code>go run</code> to execute the latest versions of the remote <code>staticcheck</code> and
<code>govulncheck</code> packages, meaning that you don’t need to install these tools
first.</p>
</li>
<li>
<p><code>test</code>: Runs all tests. Note that we enable the race detector and embed build
info in the test binary.</p>
</li>
<li>
<p><code>test/cover</code>: Runs all tests and outputs a coverage report in HTML format.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_development">1.3. Development</h3>
<div class="ulist">
<ul>
<li>
<p><code>tidy</code>: Updates the dependencies and formats the <code>go.mod</code> and go.sum using
<code>go mod tidy</code>, and formats all <code>.go</code> files using <code>go fmt</code>.</p>
</li>
<li>
<p><code>build</code>: Builds the package at <code>main_package_path</code> and outputs a binary at
<code>/tmp/bin/{binary_name}</code>.</p>
</li>
<li>
<p><code>run</code>: Calls the <code>build</code> target and then runs the binary. Note that my main
reason for not using <code>go run</code> here is that <code>go run</code> doesn’t embed build info
in the binary.</p>
</li>
<li>
<p><code>run/live</code>: Use the <code>air</code> tool to run the application with live reloading
enabled. When changes are made to any files with the specified extensions,
the application is rebuilt and the binary is re-run.</p>
</li>
<li>
<p><strong>Depending on the project</strong> you might want to add more to this section, such
as targets for connecting to a development database instance and managing SQL
migrations.</p>
</li>
</ul>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Example: Makefile targets for working with sqlite</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="Makefile">## db/connect: create to the local database
.PHONY: db/connect
db/connect:
	sqlite3 db.sqlite

## db/migrations/new name=$1: create a new migration
.PHONY: db/migrations/new
db/migrations/new:
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest create -seq -ext=.sql -dir=./resources/migrations ${name}

## db/migrations/up: apply all up migrations
.PHONY: db/migrations/up
db/migrations/up:
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; up

## db/migrations/down: apply all down migrations
.PHONY: db/migrations/down
db/migrations/down: confirm
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; down

## db/migrations/goto version=$1: migrate to a specific version number
.PHONY: db/migrations/goto
db/migrations/goto: confirm
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; goto ${version}

## db/migrations/force version=$1: force database migration version number
.PHONY: db/migrations/force
db/migrations/force: confirm
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; force ${version}

## db/migrations/version: print the current migration version
.PHONY: db/migrations/version
db/migrations/version:
	go run -tags &#39;sqlite3&#39; github.com/golang-migrate/migrate/v4/cmd/migrate@latest -path=./resources/migrations -database=&#34;sqlite3://db.sqlite&#34; version</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_operations">1.4. Operations</h3>
<div class="ulist">
<ul>
<li>
<p><code>push</code>: Push changes to the remote Git repository. This asks for y/N
confirmation first, and automatically runs the <code>audit</code> and <code>no-dirty</code> targets
to make sure that all audit checks are passing and there are no uncommitted
changes in the repository before the push is executed.</p>
</li>
<li>
<p><code>production/deploy</code>: Builds the a binary for linux/amd64 architecture,
compress it using <code>upx</code>, and then run any deployment steps. Note that this
target asks for y/N confirmation before anything is executed, and also runs
the <code>audit</code> and <code>no-dirty</code> checks too.</p>
</li>
<li>
<p><strong>Depending on the project</strong> I often add more to this section too. For example,
a <code>staging/deploy</code> rule for deploying to a staging server,
<code>production/connect</code> for SSHing into a production server, <code>production/log</code>
for viewing production logs, <code>production/db</code> for connecting to the production
database, and <code>production/upgrade</code> for updating and upgrading software on a
production server.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_usage">2. Usage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each of these targets can be executed by running <code>make</code> followed by the target
name in your terminal. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">make tidy</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>go mod tidy -v
go fmt ./...</pre>
</div>
</div>
<div class="paragraph">
<p>If you run <code>make help</code> (or the naked <code>make</code> command without specifiying a
target) then you’ll get a description of the available targets.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">make <span style="color: #d0d0d0;background-color: #151515">help</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>Usage:
  help                print this help message
  tidy                tidy modfiles and format .go files
  audit               run quality control checks
  test                run all tests
  test/cover          run all tests and display coverage
  build               build the application
  run                 run the  application
  run/live            run the application with reloading on file changes
  push                push changes to the remote Git repository
  production/deploy   deploy the application to production</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reference">3. Reference</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://www.alexedwards.net/blog/a-time-saving-makefile-for-your-go-projects" class="bare">https://www.alexedwards.net/blog/a-time-saving-makefile-for-your-go-projects</a></p>
</li>
</ul>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Bash</title>
      <link>https://hossein-lap.github.io/notes/bash/</link>
      <pubDate>Mon, 07 Oct 2024 15:10:23 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/bash/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_add_colors">1. Add Colors</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash"><span style="color: #505050">#!/bin/sh</span>
<span style="color: #505050"># colors</span>
<span style="color: #d0d0d0;background-color: #151515">blue</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 4<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">cyan</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 6<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">magenta</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 5<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">yellow</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 3<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">green</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 2<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">red</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput setaf 1<span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">normal</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>tput sgr0<span style="color: #8f5536">)</span>

check<span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0">[</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0">?</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#39;0&#39;</span> <span style="color: #d0d0d0">]</span><span style="color: #d0d0d0">;</span> <span style="color: #aa759f">then
        </span><span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">green</span><span style="color: #aa759f">}</span><span style="color: #90a959">Done</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">normal</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
        <span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#39;\n&#39;</span>
    <span style="color: #aa759f">else
        </span><span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">red</span><span style="color: #aa759f">}</span><span style="color: #90a959">Fail</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">normal</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
        <span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#39;\n&#39;</span>
    <span style="color: #aa759f">fi</span>
<span style="color: #d0d0d0">}</span>

check</code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Git</title>
      <link>https://hossein-lap.github.io/notes/git/</link>
      <pubDate>Thu, 26 Sep 2024 09:54:32 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/git/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_init">1. init</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This will create a <strong>local</strong> git repository.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git init</code></pre>
</div>
</div>
<div class="paragraph">
<p>Also you can git it an <strong>initial branch name</strong>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git init <span style="color: #f4bf75">--initial-branch</span><span style="color: #d0d0d0">=</span>trunk</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_config">2. config</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can configure git to behave how you like it to do.</p>
</div>
<div class="listingblock">
<div class="title">Some popular options are:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">user.name <span style="color: #d0d0d0">=</span> Your name        <span style="color: #505050"># critical</span>
user.email <span style="color: #d0d0d0">=</span> your@email.com  <span style="color: #505050"># critical</span>
core.editor <span style="color: #d0d0d0">=</span> vim      <span style="color: #505050"># default git&#39;s text editor</span>
core.autocrlf <span style="color: #d0d0d0">=</span> input  <span style="color: #505050"># for fixing EOL character across multiple OSs</span>
commit.gpgsign <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">true</span>  <span style="color: #505050"># signed commits using GPG</span>
tag.gpgSign <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">true</span>     <span style="color: #505050">#   //   tags     //   //</span>
merge.ff <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">true</span>        <span style="color: #505050"># fast-forward only when merging/pulling/etc..</span>
init.defaultBranch <span style="color: #d0d0d0">=</span> master  <span style="color: #505050"># default branch for `git init`</span>
color.pager <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">true</span>           <span style="color: #505050"># colored output e.g `git log --oneline`</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">If you’re wondering How to apply these settings on the command line:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git config <span style="color: #f4bf75">--global</span> user.name <span style="color: #90a959">&#34;Your Name&#34;</span>
git config <span style="color: #f4bf75">--global</span> user.email you@email.com
git config <span style="color: #f4bf75">--global</span> merge.ff <span style="color: #d0d0d0;background-color: #151515">true</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_staging_area">3. staging area</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Middle stage between <em>Untracked</em> files and <em>Tracked</em> files.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git add <span style="color: #d0d0d0;background-color: #151515">.</span>
git add &lt;path/to/file&gt;</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>To see or do anything on files in the staging area (beside committing them),
you need to pass <code>--cached</code> argument to the git <em>subcommand</em>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git <span style="color: #d0d0d0;background-color: #151515">rm</span> <span style="color: #f4bf75">--cached</span> &lt;file-name&gt;
git diff <span style="color: #f4bf75">--cached</span> .</code></pre>
</div>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_status">4. status</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Show the status of files in current repository.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git status</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>On branch notes/git
Changes not staged for commit:
  (use &#34;git add &lt;file&gt;...&#34; to update what will be committed)
  (use &#34;git restore &lt;file&gt;...&#34; to discard changes in working directory)
	modified:   git.adoc

Untracked files:
  (use &#34;git add &lt;file&gt;...&#34; to include in what will be committed)
	.session.vim/
	asciidoctor-theme.yml
	git.pdf

no changes added to commit (use &#34;git add&#34; and/or &#34;git commit -a&#34;)</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Short version:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git status <span style="color: #f4bf75">-s</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre> M git.adoc
?? .session.vim/
?? asciidoctor-theme.yml
?? git.pdf</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="ulist">
<ul>
<li>
<p><code>??</code>: Untracked files</p>
</li>
<li>
<p><code>M</code> : Modified tracked files</p>
</li>
<li>
<p><code>A</code> : Files in staging area but not committed</p>
</li>
<li>
<p><code>UU</code>: Files having <em>conflicts</em> which needs extra manual/automated work</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="title">If you want to see the status from the current working directory:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git status <span style="color: #f4bf75">-s</span> .</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre> M git.adoc
?? .session.vim/
?? asciidoctor-theme.yml
?? git.pdf</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_commit">5. commit</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Look at <strong>commit</strong> as adding changes to the <em>git history</em>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git commit</code></pre>
</div>
</div>
<div class="paragraph">
<p>The command above will open the <em>git’s text editor</em> for you to write a <em>commit
message</em> for the changes you’ve made. To avoid that you can give the message
at the command line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git commit <span style="color: #f4bf75">-m</span> <span style="color: #90a959">&#39;my very obvious commit message&#39;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Some extra flags for commit:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash"><span style="color: #f4bf75">--no-gpg-sign</span>  <span style="color: #505050"># don&#39;t sign the commit, just for this one</span>
<span style="color: #f4bf75">--amend</span>        <span style="color: #505050"># apply changes to the last commit, no new commit</span>
               <span style="color: #505050"># Warning: be careful with this, it can mess things up</span>
<span style="color: #f4bf75">--no-edit</span>      <span style="color: #505050"># used with `--amend`, don&#39;t change commit message</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_authenticate">5.1. authenticate</h3>
<div class="paragraph">
<p>For committing you need to be authenticated. You can this in a global scope
(which is recommended for most users) or do it in a per-repo basis:</p>
</div>
<div class="listingblock">
<div class="title">Global</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git config <span style="color: #f4bf75">--global</span> user.name <span style="color: #90a959">&#39;You Name&#39;</span>
git config <span style="color: #f4bf75">--global</span> user.email <span style="color: #90a959">&#39;you@email.com&#39;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Per Repository, inside the local repository</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git config user.name <span style="color: #90a959">&#39;You Name&#39;</span>
git config user.email <span style="color: #90a959">&#39;you@email.com&#39;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Keep that in mind for working with services like <strong>github.com</strong> and <strong>gitlab.com</strong>,
the email you provide to the git, must be the same email as the one which you
gave these services.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_log">6. log</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Shows information about the current repository such as <strong>branches</strong>, <strong>commits</strong>,
HEAD position, etc.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git log</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>commit f80c36530015cb932a4d60c06f94f93cf22570cf
Author: Hossein Esmail &lt;hosteam01@gmail.com&gt;
Date:   Sun Oct 13 23:38:50 2024 +0330

    more / better notes for docker

commit 6e057f8ee426d75045693f417d9769c8ff2093bd
Author: Hossein Esmail &lt;hosteam01@gmail.com&gt;
Date:   Fri Oct 11 15:17:28 2024 +0330

    import contents

commit a9555db8084619a61b2da3c51ae04c972a242f94
Author: Hos Es &lt;62862610+hossein-lap@users.noreply.github.com&gt;
Date:   Wed Oct 9 20:13:41 2024 +0330

    Initial commit</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Some extra flags</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash"><span style="color: #f4bf75">--oneline</span>  <span style="color: #505050"># show short commit hash and only the commit message</span>
<span style="color: #f4bf75">--all</span>      <span style="color: #505050"># show all branches</span>
<span style="color: #f4bf75">--graph</span>    <span style="color: #505050"># draw the graph for branches</span>
<span style="color: #f4bf75">--stat</span>     <span style="color: #505050"># show changed files</span>
<span style="color: #f4bf75">--show-signature</span>  <span style="color: #505050"># show gpg signature</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git log <span style="color: #f4bf75">--all</span> <span style="color: #f4bf75">--oneline</span> <span style="color: #f4bf75">--graph</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>* afd0009 (notes/perl, origin/notes/perl) Add array section
* f80c365 (HEAD -&gt; notes/git, origin/notes/git) more docker notes
* 6e057f8 import contents
* a9555db Initial commit</pre>
</div>
</div>
<div class="paragraph">
<div class="title">What is <strong>HEAD</strong>?</div>
<p><strong>HEAD</strong> is a name which points to your <strong>current working area</strong>&#39;s position in the
git repository. In the above output, inside the parentheses on the second line
you can see <code>HEAD -&gt; notes/git</code>, that mean <strong>HEAD is pointing at notes/git
branch</strong>. <code>notes/git</code> is the name of the branch that I’m writing this document
inside of it that will be merged later with <code>master</code> branch of this repository.</p>
</div>
<div class="paragraph">
<p>Now that we know HEAD is the current position, let’s be a little more proactive
shall we? Okay, what about pointing at <strong>one previous position</strong> or
<strong>two previous</strong>? Easy, <code>HEAD~1</code> and <code>HEAD~2</code> are for that.</p>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>HEAD~&lt;number&gt;</code> means <code>&lt;number&gt;</code> times before the <strong>current position of HEAD</strong>.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_remotes">7. remotes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The remote URL(s) that you are/will be working with. Most of the time it’s
called <strong>origin</strong> but remember, it’s just a name which points to an URL.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git remote</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>origin</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Verbose output</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git remote <span style="color: #f4bf75">-v</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>origin	git@github.com:hossein-lap/blog.posts.git (fetch)
origin	git@github.com:hossein-lap/blog.posts.git (push)</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Working with remotes</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git remote add &lt;name&gt; &lt;url&gt;  <span style="color: #505050"># add new remote URL</span>
git remote remove &lt;name&gt;     <span style="color: #505050"># remove existing remote URL</span></code></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>remote URL can be another directory/folder on the same machine. git does
not care.</p>
</li>
<li>
<p>If you want to connect a local repository to a remote one, you need to create
the remote yourself</p>
</li>
</ol>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Let’s say you are working on a project on your local machine and now you’ve
decided to share it on github, you go create the repository on github, and
create a remote using <code>git remote add &lt;name&gt; &lt;url&gt;</code> command.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="_ssh_vs_https">7.1. ssh vs https</h3>
<div class="paragraph">
<p>Most developers prefer using <code>ssh</code> when it comes to working with remote
repositories. <code>ssh</code> has a SHA-256 hash-based key authentication method.
Unlike <code>https</code> which requires username and password each time for the
authentication.</p>
</div>
<div class="listingblock">
<div class="title">Generate ssh key</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">ssh-keygen</code></pre>
</div>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
<div class="paragraph">
<p>After creating a ssh key-pair, you need to add the <strong>public</strong> pair of the key to
your github/gitlab account. Look for a <code>*.pub</code> file in your <code>~/.ssh</code> directory.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="literalblock">
<div class="title">ssh remote URL:</div>
<div class="content">
<pre>origin	git@github.com:hossein-lap/blog.posts.git (fetch)
origin	git@github.com:hossein-lap/blog.posts.git (push)</pre>
</div>
</div>
<div class="literalblock">
<div class="title">https remote URL:</div>
<div class="content">
<pre>origin	https://github.com/hossein-lap/blog.posts (fetch)
origin	https://github.com/hossein-lap/blog.posts (push)</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_clone">8. clone</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Cloning a repository is like downloading it from your local machine but with or
without the commit histories.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git clone &lt;url&gt;
git clone https://github.com/hossein-lap/blog.posts
git clone git@github.com:hossein-lap/blog.posts.git</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Some extra flags</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash"><span style="color: #f4bf75">--depth</span> &lt;number&gt;   <span style="color: #505050"># depths of previous commit history</span>
<span style="color: #f4bf75">--branch</span> &lt;name&gt;    <span style="color: #505050"># move HEAD to the &lt;name&gt; branch after clone</span>
<span style="color: #f4bf75">--origin</span> &lt;name&gt;    <span style="color: #505050"># use &lt;name&gt; instead of default `origin` for remote</span>
<span style="color: #f4bf75">--bare</span>             <span style="color: #505050"># clone the bare repo (useful but very advanced)</span>
                   <span style="color: #505050"># see the last section for more information.</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fetch">9. fetch</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Synchronize the local repository with the remote repository. This does not change
anything in the current working area. Just synchronizing.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git fetch <span style="color: #f4bf75">--all</span>        <span style="color: #505050"># fetch all changes from all branches</span>
git fetch <span style="color: #f4bf75">--unshallow</span>  <span style="color: #505050"># fetch all the missing contents from remote</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_push">10. push</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Upload the git history from local to the remote.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git push &lt;remote-name&gt; &lt;branch-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git push origin master</code></pre>
</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="title">Forced push</div>
<div class="paragraph">
<p>You need to use <code>--force</code> flag if you want to have used <code>--amend</code> flag
(you’ve amended a commit) when pushing to a <strong>unprotected</strong> remote branch.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git commit <span style="color: #f4bf75">--amend</span> <span style="color: #f4bf75">--no-edit</span>
git push origin feature/new-module <span style="color: #f4bf75">--force</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Use this with caution</div>
<p>If the branch if <strong>protected</strong> you cannot use <code>--force</code> with.
You must remove it from <strong>protected branches</strong> first.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pull">11. pull</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Get the changes from remote repository to the local repository.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git pull origin master</code></pre>
</div>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Be careful what branch are you currently on and what branch are you pulling
from. This can mess things up very easily.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_branch">12. branch</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Working with branches.
Branches are created from one point in the history which is you current branch</p>
</div>
<div class="listingblock">
<div class="title">Your current branch</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git branch</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>* notes/git</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Create new branch</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git switch <span style="color: #f4bf75">-C</span> &lt;new-branch-name&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Above command will create a new branch from your current position on the git
history (your current branch, your current commit) and switch to it.</p>
</div>
<div class="paragraph">
<p>Alternatively you can use <code>checkout</code> (sometimes you <strong>need</strong> to use <code>checkout</code>) but
the <code>checkout</code> command does a lot more than creating/switching branches.
<strong>It can be dangerous</strong>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git checkout <span style="color: #f4bf75">-b</span> &lt;new-branch-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Switch back to previous branch</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git checkout -
git switch -</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_stash">13. stash</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To be able to change branches your current working area must be clean. Now imagine
you’re middle of working on something and something new comes up which is
important, git won’t allow you to change your branch until you commit your
changes (make your working area clean) so what you’re gonna do? Apply a temp
commit? (you can do that on paper but it’s advised against doing this). Here
<code>stash</code> comes to save the day.</p>
</div>
<div class="paragraph">
<p><code>git stash</code> takes all your changes (on tracked files only) and temporarily
moves them on <strong>stash area</strong> so you can access it (move it back to your working
area) after you’ve did you explorations.</p>
</div>
<div class="paragraph">
<p>Let’s see how <code>git log</code> looks like before stashing the changes:</p>
</div>
<div class="listingblock">
<div class="title">Move changes to stash from working area</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git log <span style="color: #f4bf75">--oneline</span> <span style="color: #f4bf75">--all</span> <span style="color: #f4bf75">--graph</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>* afd0009 Add array section
* f80c365 more / better notes for docker
* 6e057f8 import contents
* a9555db Initial commit</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Stashing changes</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git stash push</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>Saved working directory and index state WIP on notes/git: f80c365 more / better notes for docker</pre>
</div>
</div>
<div class="paragraph">
<p>Let’s see how <code>git log</code> looks like at this point</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git log <span style="color: #f4bf75">--oneline</span> <span style="color: #f4bf75">--all</span> <span style="color: #f4bf75">--graph</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>*   aa604f7 WIP on notes/git: f80c365 more / better notes for docker
|\
| * 977460d index on notes/git: f80c365 more / better notes for docker
|/
| * afd0009 Add array section
|/
* f80c365 more / better notes for docker
* 6e057f8 import contents
* a9555db Initial commit</pre>
</div>
</div>
<div class="paragraph">
<p>See all the new forks and diversions from the commits?</p>
</div>
<div class="literalblock">
<div class="content">
<pre>*   aa604f7 WIP on notes/git: f80c365 more / better notes for docker
|\
| * 977460d index on notes/git: f80c365 more / better notes for docker
|/
| * afd0009 Add array section
|/
* f80c365 more / better notes for docker</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Move back changes to working area from stash</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git stash pop</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>On branch notes/git
Changes not staged for commit:
  (use &#34;git add &lt;file&gt;...&#34; to update what will be committed)
  (use &#34;git restore &lt;file&gt;...&#34; to discard changes in working directory)
        modified:   git.adoc

Untracked files:
  (use &#34;git add &lt;file&gt;...&#34; to include in what will be committed)
        .session.vim/
        asciidoctor-theme.yml
        git.pdf
        git.xml

no changes added to commit (use &#34;git add&#34; and/or &#34;git commit -a&#34;)
Dropped refs/stash@{0} (a5eec65b3011ad09cd73c9845646ea1b87659f9e)</pre>
</div>
</div>
<div class="paragraph">
<p>Now everything is exactly how it was before stashing:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git log <span style="color: #f4bf75">--oneline</span> <span style="color: #f4bf75">--all</span> <span style="color: #f4bf75">--graph</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>* afd0009 Add array section
* f80c365 more / better notes for docker
* 6e057f8 import contents
* a9555db Initial commit</pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>stash has a stack-like structure.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Alternatively you can use a <code>bare repo</code> with git’s <code>worktree</code> feature which
allows you to have multiple branches checked-out at the same time. But it can
add complexity to your workflow. You can take a look at the last section of
this
document.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rebase">14. rebase</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Rebasing a branch is pulling the point branch was forked (created from) to a
new point.</p>
</div>
<div class="literalblock">
<div class="title">git’s manpage does a good explanation about it:</div>
<div class="content">
<pre>Assume the following history exists and the current branch is &#34;topic&#34;:

              A---B---C topic
             /
        D---E---F---G master

From this point, the result of either of the following commands:

    git rebase master
    git rebase master topic

would be:

                      A&#39;--B&#39;--C&#39; topic
                     /
        D---E---F---G master</pre>
</div>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
<div class="paragraph">
<p>All the git manpages are available through either <code>git &lt;subcommand&gt; --help</code>
command or <code>man git-&lt;subcommand&gt;</code> command on the command line.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>git rebase --help
man git-rebase</pre>
</div>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_restore">15. restore</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Restores the state of file(s) to a previous or current state in git <strong>history</strong>.</p>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git restore <span style="color: #f4bf75">--source</span><span style="color: #d0d0d0">=</span>HEAD .</code></pre>
</div>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>The above command will remove all changes on the current working directory
which are not in neither staging area nor have been committed.</p>
</div>
<div class="paragraph">
<p>The <code>.</code> means <strong>current working directory</strong>. You can replace it with file name(s)
or (some) directory.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reset">16. reset</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Okay, now we are entering the <strong>DANGER</strong> zone. The reset command <strong>will remove
your commit history</strong>. Especially with the <code>--hard</code> flag.</p>
</div>
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git reset <span style="color: #f4bf75">--hard</span> HEAD~1
git reset <span style="color: #f4bf75">--hard</span> 6e057f8 <span style="color: #505050"># reset everything to a certain point</span>
                         <span style="color: #505050"># using commit hash</span></code></pre>
</div>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_patching">17. patching</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can get a diff file using <code>git diff</code> command and use it later.
These &#34;diff&#34; files contains all changes on file(s) which can be applied on same
files somewhere else.</p>
</div>
<div class="listingblock">
<div class="title">Get diff file</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git diff HEAD~1 HEAD <span style="color: #d0d0d0">&gt;</span> &lt;file-name&gt;
git diff HEAD~1 HEAD <span style="color: #d0d0d0">&gt;</span> test-changes.diff</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Apply the diff</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">patch <span style="color: #f4bf75">-p1</span> &lt; &lt;file-name&gt;
patch <span style="color: #f4bf75">-p1</span> &lt; test-changes.diff</code></pre>
</div>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Keep that in mind which the sequence of stages/commits must be <strong>older to newer</strong>
if you want to <strong>apply</strong> the changes and <strong>newer to older</strong> if you want to <strong>revert</strong>
the changes.
Reverts</p>
</div>
<div class="ulist horizontal">
<ul class="horizontal">
<li>
<p><strong>Older to newer</strong>: Applies changes</p>
</li>
<li>
<p><strong>Newer to older</strong>: Reverts changes</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This process is called <strong>patching</strong> or <strong>applying patch</strong>.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>When you are applying patch(es), you must be at the <strong>exact directory</strong> that
you’ve get the diff file from.</p>
</div>
<div class="paragraph">
<p>On the other words, applying patches only works when
you are applying them at the same <strong>root directory</strong> of getting the patch (diff
file).</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="title">A diff file</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git diff Makefile default-theme.yml</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="diff"><span style="color: #6a9fb5;background-color: #151515;font-weight: bold">diff --git a/Makefile b/Makefile
index 16ab52b..db20550 100644
</span><span style="color: #ac4142">--- a/Makefile
</span><span style="color: #90a959">+++ b/Makefile
</span><span style="color: #d0d0d0">@@ -1,6 +1,6 @@</span>
 NAME = ttr
<span style="color: #151515;background-color: #ac4142">
</span> all:
<span style="color: #ac4142">-	asciidoctor -a stylesheet=my-stylesheet.css ttr.adoc
-	# asciidoctor -a linkcss -a copycss README.adoc
</span><span style="color: #90a959">+	# asciidoctor -a stylesheet=my-stylesheet.css ttr.adoc
+	asciidoctor -a linkcss -a copycss ttr.adoc
</span> 	asciidoctor-pdf ttr.adoc --theme hos.yml
<span style="color: #6a9fb5;background-color: #151515;font-weight: bold">diff --git a/default-theme.yml b/default-theme.yml
index f23711b..889785a 100644
</span><span style="color: #ac4142">--- a/default-theme.yml
</span><span style="color: #90a959">+++ b/default-theme.yml
</span><span style="color: #d0d0d0">@@ -43,11 +43,11 @@</span> base:
   border_color: EEEEEE
   border_radius: 4
   border_width: 0.5
<span style="color: #ac4142">-base:
-  font:
-    color: #333333
-    family: Times-Roman
-    size: 12
</span><span style="color: #90a959">+# base:
+#   font:
+#     color: #333333
+#     family: Times-Roman
+#     size: 12
</span> role:
   lead:
     font_size: $base_font_size_large</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_git_worktree_and_bare_repos">18. git worktree and bare repos</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This section is a very advanced topic and is unique approach to solving some
problems like changing branches and checking them out at the same time.</p>
</div>
<div class="paragraph">
<p>In this approach, every branch is a separated directory. To changes branches
you need to change your current <strong>working directory</strong> (e.g
<code>cd ../&lt;branch-name&gt;</code>).</p>
</div>
<div class="listingblock">
<div class="title">Clone bare repo</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git clone <span style="color: #f4bf75">--bare</span> git@github.com:hossein-lap/blog.git blog.git</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Create worktree</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git worktree add &lt;branch-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">With new branch</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git worktree add <span style="color: #f4bf75">-b</span> &lt;new-branch-name&gt; &lt;new-directory-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Remove worktree</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">git worktree remove &lt;branch-name&gt;</code></pre>
</div>
</div>
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Cloning a repository bare, requires to add the <code>.git</code> at the end of URL.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
<div class="paragraph">
<p>You still can change (mess things up if you will) other branches while you are
on a different branch. Be careful with that.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="_wrapper_script">18.1. Wrapper script</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash"><span style="color: #505050">#!/usr/bin/env bash</span>
<span style="color: #d0d0d0;background-color: #151515">set</span> <span style="color: #f4bf75">-e</span>

<span style="color: #505050"># help function</span>
<span style="color: #d0d0d0;background-color: #151515">prompt</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span><span style="color: #d0d0d0;background-color: #151515">echo</span> <span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">0</span><span style="color: #aa759f">}</span> | <span style="color: #d0d0d0;background-color: #151515">awk</span> <span style="color: #f4bf75">-F</span> <span style="color: #90a959">&#39;/&#39;</span> <span style="color: #90a959">&#39;{print $NF;}&#39;</span><span style="color: #8f5536">)</span>
<span style="color: #d0d0d0;background-color: #151515">help</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
<span style="color: #d0d0d0;background-color: #151515">cat</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #f4bf75">EOF</span><span style="color: #90a959">
</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">prompt</span><span style="color: #aa759f">}</span><span style="color: #90a959">: setup git worktree and bare repo

usage: [-h] [-u url] [-d directory] [-a extra_args]

   • arguemts:
       -u --url      repo url (ssh)
       -d --dir      directory name
       -a --args     extra args (to pass to the git)
       -h --help     print this message

   • example:
       </span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">prompt</span><span style="color: #aa759f">}</span><span style="color: #90a959"> -u gitlab.com:hos-workflow/scripts -d test.git -a &#39;--depth 1&#39;

   • running without any arguments will show this message
</span><span style="color: #f4bf75">EOF
</span><span style="color: #d0d0d0">}</span>

<span style="color: #505050"># argument parsing</span>
<span style="color: #aa759f">while</span> <span style="color: #d0d0d0">[</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${#}</span><span style="color: #90a959">&#34;</span> <span style="color: #f4bf75">-gt</span> 0 <span style="color: #d0d0d0">]</span><span style="color: #d0d0d0">;</span> <span style="color: #aa759f">do
    case</span> <span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">1</span><span style="color: #aa759f">}</span> <span style="color: #aa759f">in</span>
        <span style="color: #f4bf75">-u</span><span style="color: #d0d0d0">|</span><span style="color: #f4bf75">--url</span><span style="color: #d0d0d0">)</span>
            <span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #d0d0d0">=</span><span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">2</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
            <span style="color: #d0d0d0;background-color: #151515">shift</span>
            <span style="color: #d0d0d0">;;</span>
        <span style="color: #f4bf75">-d</span><span style="color: #d0d0d0">|</span><span style="color: #f4bf75">--directory</span><span style="color: #d0d0d0">)</span>
            <span style="color: #d0d0d0;background-color: #151515">output</span><span style="color: #d0d0d0">=</span><span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">2</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
            <span style="color: #d0d0d0;background-color: #151515">shift</span>
            <span style="color: #d0d0d0">;;</span>
        <span style="color: #f4bf75">-h</span><span style="color: #d0d0d0">|</span><span style="color: #f4bf75">--help</span><span style="color: #d0d0d0">)</span>
            <span style="color: #d0d0d0;background-color: #151515">help
            exit </span>0
            <span style="color: #d0d0d0">;;</span>
        <span style="color: #f4bf75">-a</span><span style="color: #d0d0d0">|</span><span style="color: #f4bf75">--args</span><span style="color: #d0d0d0">)</span>
            <span style="color: #d0d0d0;background-color: #151515">args</span><span style="color: #d0d0d0">=</span><span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">args</span><span style="color: #aa759f">}</span><span style="color: #90a959"> </span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">2</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
            <span style="color: #d0d0d0;background-color: #151515">shift</span>
            <span style="color: #d0d0d0">;;</span>
        <span style="color: #aa759f">*</span><span style="color: #d0d0d0">)</span>
            <span style="color: #d0d0d0;background-color: #151515">echo</span> <span style="color: #90a959">&#34;Unknown parameter passed: </span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">1</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
            <span style="color: #d0d0d0;background-color: #151515">exit </span>1
            <span style="color: #d0d0d0">;;</span>
    <span style="color: #aa759f">esac</span>
    <span style="color: #d0d0d0;background-color: #151515">shift
</span><span style="color: #aa759f">done</span>

<span style="color: #505050"># checking args</span>
<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">[</span> <span style="color: #f4bf75">-z</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span> <span style="color: #d0d0d0">]</span><span style="color: #d0d0d0">;</span> <span style="color: #aa759f">then
    </span><span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #90a959">&#39;%s\n\n&#39;</span> <span style="color: #90a959">&#34;No url is specified&#34;</span> 1&gt;&amp;2
    <span style="color: #d0d0d0;background-color: #151515">help
    exit </span>1
<span style="color: #aa759f">fi

if</span> <span style="color: #d0d0d0">[</span> <span style="color: #f4bf75">-z</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">output</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span> <span style="color: #d0d0d0">]</span><span style="color: #d0d0d0">;</span> <span style="color: #aa759f">then
    </span><span style="color: #d0d0d0;background-color: #151515">printf</span> <span style="color: #8f5536">\</span>
        <span style="color: #90a959">&#34;No directory name is specified, &#34;</span> <span style="color: #8f5536">\</span>
        <span style="color: #90a959">&#34;Using default directory name..</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span> <span style="color: #8f5536">\</span>
        1&gt;&amp;2
    <span style="color: #d0d0d0;background-color: #151515">output</span><span style="color: #d0d0d0">=</span><span style="color: #90a959">&#34;</span><span style="color: #8f5536">$(</span><span style="color: #d0d0d0;background-color: #151515">echo</span> <span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #aa759f">}</span> | <span style="color: #d0d0d0;background-color: #151515">awk</span> <span style="color: #f4bf75">-F</span> <span style="color: #90a959">&#39;/&#39;</span> <span style="color: #90a959">&#39;{print $NF;}&#39;</span><span style="color: #8f5536">)</span><span style="color: #90a959">&#34;</span>
<span style="color: #aa759f">fi</span>

<span style="color: #505050"># start</span>
git clone <span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">args</span><span style="color: #aa759f">}</span> <span style="color: #f4bf75">--bare</span> git@<span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #aa759f">}</span> <span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">output</span><span style="color: #aa759f">}</span>
<span style="color: #d0d0d0;background-color: #151515">cd</span> <span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">output</span><span style="color: #aa759f">}</span>
<span style="color: #d0d0d0;background-color: #151515">mkdir</span> .bare
<span style="color: #d0d0d0;background-color: #151515">mv</span> <span style="color: #aa759f">*</span> .bare
<span style="color: #d0d0d0;background-color: #151515">echo</span> <span style="color: #90a959">&#34;gitdir: ./.bare&#34;</span> <span style="color: #d0d0d0">&gt;</span> .git

<span style="color: #d0d0d0;background-color: #151515">check_branch</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>git <span style="color: #f4bf75">--no-pager</span> branch | <span style="color: #d0d0d0;background-color: #151515">grep</span> <span style="color: #f4bf75">-v</span> <span style="color: #90a959">&#39;*\|+&#39;</span> | <span style="color: #d0d0d0;background-color: #151515">awk</span> <span style="color: #90a959">&#39;{print $1;}&#39;</span> | <span style="color: #d0d0d0;background-color: #151515">wc</span> <span style="color: #f4bf75">-l</span><span style="color: #8f5536">)</span>

<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">[</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">check_branch</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span> <span style="color: #f4bf75">-gt</span> 0 <span style="color: #d0d0d0">]</span><span style="color: #d0d0d0">;</span> <span style="color: #aa759f">then
    for </span>i <span style="color: #aa759f">in</span> <span style="color: #8f5536">$(</span>git <span style="color: #f4bf75">--no-pager</span> branch | <span style="color: #d0d0d0;background-color: #151515">sed</span> <span style="color: #90a959">&#39;s/^[*+]/ /&#39;</span> | <span style="color: #d0d0d0;background-color: #151515">awk</span> <span style="color: #90a959">&#39;{print $1;}&#39;</span><span style="color: #8f5536">)</span><span style="color: #d0d0d0">;</span> <span style="color: #aa759f">do
        </span>git worktree add <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">i</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">i</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
    <span style="color: #aa759f">done
else
	</span><span style="color: #d0d0d0;background-color: #151515">i</span><span style="color: #d0d0d0">=</span><span style="color: #8f5536">$(</span>git <span style="color: #f4bf75">--no-pager</span> branch | <span style="color: #d0d0d0;background-color: #151515">awk</span> <span style="color: #90a959">&#39;{print $NF;}&#39;</span><span style="color: #8f5536">)</span>
    git worktree add <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">i</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span> <span style="color: #90a959">&#34;</span><span style="color: #aa759f">${</span><span style="color: #d0d0d0;background-color: #151515">i</span><span style="color: #aa759f">}</span><span style="color: #90a959">&#34;</span>
<span style="color: #aa759f">fi</span>

<span style="color: #505050"># git config remote.origin.url &#34;git@${input}&#34;</span>
git config remote.origin.fetch <span style="color: #90a959">&#39;+refs/heads/*:refs/remotes/origin/*&#39;</span>
git fetch</code></pre>
</div>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Docker</title>
      <link>https://hossein-lap.github.io/notes/docker/</link>
      <pubDate>Sat, 14 Sep 2024 15:53:26 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/docker/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_intro">1. Intro</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Yeah I don’t like long intros either, but this one needs a little more digging.
Let’s begin.</p>
</div>
<div class="sect2">
<h3 id="_what_is_docker">1.1. What is Docker?</h3>
<div class="paragraph">
<p>Docker is a container management service. You may also hear it referred as
<em>container engine</em>. All it can do is <strong>create</strong>, <strong>run</strong> and <strong>manage</strong> containers.
Let’s go a little bit deeper.</p>
</div>
</div>
<div class="sect2">
<h3 id="_what_is_a_container">1.2. What is a container</h3>
<div class="paragraph">
<p>Let me put it this way, what you need to run a program? A computer (servers are
also computers) and what a computer (beside hardware) has? Software.
Now what software do you use to work with the computer’s hardware? <strong>Operating
System</strong>. Containers are just a small isolated things that emulates a Operating
System. In a different approach we can say: <strong>Using OS-level virtualization to
deliver software in packages called <em>containers</em></strong>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_containers_vs_virtual_machines">1.3. Containers VS. Virtual-Machines</h3>
<div class="paragraph">
<p>Every VM requires its own dedicated operating system (OS) is a major flaw.
Every OS consumes CPU, RAM and other resources that could otherwise be used to
power more applications. Every OS needs patching and monitoring. And in some
cases, every OS requires a license. All of this results in wasted time and
resources.</p>
</div>
<div class="paragraph">
<p>A major difference is that containers do not require their own full-blown OS.
In fact, all containers on a single host share the host’s OS. This frees up
huge amounts of system resources such as CPU, RAM, and storage. It also reduces
potential licensing costs and reduces the overhead of OS patching and other
maintenance.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="/images/notes/docker/vm-vs-container.png" alt="vm vs container"/>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_linux_containers">1.4. Linux containers</h3>
<div class="paragraph">
<p>Modern containers started in the Linux world and are the product of an immense
amount of work from a wide variety of people over a long period of time. Just
as one example, Google LLC has contributed many container-related technologies
to the Linux kernel. Without these, and other contributions, we wouldn’t have
modern containers today.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>There are many operating system virtualization technologies similar to
containers that pre-date Docker and modern containers. Some even date back to
System/360 on the Mainframe. BSD Jails and Solaris Zones are some other
well-known examples of Unix-type container technologies.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_basics">2. Basics</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="title">Pulling an image</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">docker image pull ubuntu:latest</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_dockerfile">2.1. Dockerfile</h3>
<div class="paragraph">
<p>You can create your own Docker image from a file called <code>Dockerfile</code>.
This file includes instructions to build an application. Instructions like
installing dependencies, copying files, running compile / build commands and
so on. <em>Things that needs to be done for preparing the environment that you app
will run in it</em>.</p>
</div>
<div class="listingblock">
<div class="title">Dockerfile — Simple webapp</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="dockerfile"><span style="color: #aa759f">FROM</span><span style="color: #90a959"> alpine</span>
<span style="color: #aa759f">LABEL</span><span style="color: #90a959"> maintainer=&#34;example@mail.com&#34;</span>
<span style="color: #aa759f">RUN </span>apk add <span style="color: #f4bf75">--update</span> nodejs nodejs-npm
<span style="color: #aa759f">COPY</span><span style="color: #90a959"> . /src</span>
<span style="color: #aa759f">WORKDIR</span><span style="color: #90a959"> /src</span>
<span style="color: #aa759f">RUN </span>npm <span style="color: #d0d0d0;background-color: #151515">install</span>
<span style="color: #aa759f">EXPOSE</span><span style="color: #90a959"> 8080</span>
<span style="color: #aa759f">ENTRYPOINT</span><span style="color: #90a959"> [&#34;node&#34;, &#34;./app.js&#34;]</span></code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 1. Keywords</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>FROM</code>: The <strong>base</strong> image to use</p>
</li>
<li>
<p><code>LABEL</code>: Image’s metadata</p>
</li>
<li>
<p><code>RUN</code>: Command to run inside the image at build time</p>
</li>
<li>
<p><code>COPY</code>: Copy files from <code>&lt;local&gt;</code> to <code>&lt;image&gt;</code></p>
</li>
<li>
<p><code>WORKDIR</code>: Change the working directory</p>
<div class="ulist">
<ul>
<li>
<p>Note that if the directory does not exists, it will be created</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>EXPOSE</code>: The port that will be exposed</p>
<div class="ulist">
<ul>
<li>
<p>available to the host/other images</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>ENTRYPOINT</code>: The command that will be run at the end</p>
<div class="ulist">
<ul>
<li>
<p>The actual app; all the previous commands are just a preparation for this command/section</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="title">Dockerfile — Build image</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">docker buildx build <span style="color: #f4bf75">-f</span> Dockerfile <span style="color: #f4bf75">-t</span> test-name .</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>[+] Building 35.5s (10/10) FINISHED                                                  docker:default
 =&gt; [internal] load build definition from Dockerfile                                           0.0s
 =&gt; =&gt; transferring dockerfile: 363B                                                           0.0s
 =&gt; [internal] load .dockerignore                                                              0.0s
 =&gt; =&gt; transferring context: 2B                                                                0.0s
 =&gt; [internal] load metadata for docker.io/library/alpine:latest                               0.0s
 =&gt; [1/5] FROM docker.io/library/alpine                                                        0.0s
 =&gt; [internal] load build context                                                              0.0s
 =&gt; =&gt; transferring context: 36.77kB                                                           0.0s
 =&gt; [2/5] RUN apk add --update nodejs npm curl                                                 9.2s
 =&gt; [3/5] COPY . /src                                                                          0.0s
 =&gt; [4/5] WORKDIR /src                                                                         0.0s
 =&gt; [5/5] RUN npm install                                                                     26.0s
 =&gt; exporting to image                                                                         0.2s
 =&gt; =&gt; exporting layers                                                                        0.2s
 =&gt; =&gt; writing image sha256:1825da98372a937a095e523f71f59dcd6a4c41f6f0f573ed1bfe118fae8d50ed   0.0s
 =&gt; =&gt; naming to docker.io/library/test                                                        0.0s</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Docker CLI — Get list of images</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">docker image <span style="color: #d0d0d0;background-color: #151515">ls</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>REPOSITORY             TAG               IMAGE ID       CREATED         SIZE
test                   latest            1825da98372a   6 minutes ago   95.4MB</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Docker CLI — Run an image/container</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">docker container run <span style="color: #f4bf75">-d</span> <span style="color: #f4bf75">--name</span> web1 <span style="color: #f4bf75">--publish</span> 8080:8080 <span style="color: #d0d0d0;background-color: #151515">test</span>:latest</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>63e334d59c7d937c99f6cbe6e5628c3b180ab26cb4b3f7e3d2cdd007cfd78f37</pre>
</div>
</div>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="title">Docker CLI — Get list of running images/containers</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">docker ps</code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>CONTAINER ID   IMAGE         COMMAND           CREATED          STATUS          PORTS                                       NAMES
63e334d59c7d   test:latest   &#34;node ./app.js&#34;   14 seconds ago   Up 13 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   web1</pre>
</div>
</div>
</div>
</div>
<div class="paragraph">
<p>You can also use multiple images inside one container:</p>
</div>
<div class="listingblock">
<div class="title">Multi-stage Dockerfile</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="docker"><span style="color: #505050"># pull golang image to build the app</span>
<span style="color: #aa759f">FROM</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">golang:alpine</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #aa759f">as</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">builder</span>
<span style="color: #505050"># add a label</span>
<span style="color: #aa759f">LABEL</span><span style="color: #90a959"> maintainer=&#34;Hossein Esmailzadeh &lt;hosteam01@gmail.com&gt;&#34;</span>

<span style="color: #505050">## inside golang:alpine image</span>
<span style="color: #505050"># change the working directory</span>
<span style="color: #aa759f">WORKDIR</span><span style="color: #90a959"> /app</span>

<span style="color: #505050"># copy golang&#39;s related files (checksum and module files)</span>
<span style="color: #aa759f">COPY</span><span style="color: #90a959"> go.mod go.sum ./</span>
<span style="color: #505050"># get the needed modules</span>
<span style="color: #aa759f">RUN </span>go mod download
<span style="color: #505050"># copy the source code</span>
<span style="color: #aa759f">COPY</span><span style="color: #90a959"> . .</span>

<span style="color: #505050"># compile the app</span>
<span style="color: #aa759f">RUN </span><span style="color: #d0d0d0;background-color: #151515">CGO_ENABLED</span><span style="color: #d0d0d0">=</span>0 <span style="color: #d0d0d0;background-color: #151515">GOOS</span><span style="color: #d0d0d0">=</span>linux go build <span style="color: #f4bf75">-a</span> <span style="color: #f4bf75">-installsuffix</span> cgo <span style="color: #f4bf75">-o</span> main .

<span style="color: #505050">## inside our image</span>
<span style="color: #505050"># use a alpine (very small OS) image as base</span>
<span style="color: #aa759f">FROM</span><span style="color: #90a959"> alpine:latest</span>

<span style="color: #505050"># install dependencies</span>
<span style="color: #aa759f">RUN </span>apk <span style="color: #f4bf75">--no-cache</span> add ca-certificates
<span style="color: #505050"># change the working directory</span>
<span style="color: #aa759f">WORKDIR</span><span style="color: #90a959"> /root/</span>
<span style="color: #505050"># copy the built binary from the golang:alpine image inside our container</span>
<span style="color: #aa759f">COPY</span><span style="color: #90a959"> --from=builder /app/main .</span>

<span style="color: #505050"># let port 9090 to be accessible for others</span>
<span style="color: #aa759f">EXPOSE</span><span style="color: #90a959"> 9090</span>

<span style="color: #505050"># run the binary at the end</span>
<span style="color: #aa759f">CMD</span><span style="color: #90a959"> [&#34;./main&#34;]</span></code></pre>
</div>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Perl</title>
      <link>https://hossein-lap.github.io/notes/perl/</link>
      <pubDate>Wed, 11 Sep 2024 15:04:10 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/perl/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="listingblock">
<div class="title">Hello World!</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Hello world!</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><code>use warnings;</code> is called <em>pragma</em> in Perl. This pragma instructs Perl to turn
on additional warning reporting.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_syntax">1. Perl Syntax</h2>
<div class="sectionbody">
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>Basic <strong>Perl syntax</strong> to get started with Perl language quickly including
variables, expressions, statements, block, comments, whitespaces, and keywords.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_values_and_variables">1.1. Values and Variables</h3>
<div class="paragraph">
<p>You develop Perl programs to manipulate some kinds of data. The data can be
either <a href="doc/03-perl-numbers.html#_Perl_numbers">numbers</a>,
<a href="doc/04-perl-strings.html#_Perl_strings">strings</a>, or more complex such as a
<a href="doc/06-perl-list.html#_Perl_list">list</a>. Data is held as value.</p>
</div>
<div class="listingblock">
<div class="title">Some values</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #90a959">10</span>
<span style="color: #90a959">20.2</span>
<span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Perl Syntax</span><span style="color: #d0d0d0">&#34;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To hold a piece of data, you need <strong>variables</strong>. You use a variable to store a
value. And through the name of the variable, you can process the value.</p>
</div>
<div class="paragraph">
<p>The following illustrates some variables in Perl:</p>
</div>
<div class="listingblock">
<div class="title">Define variables</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$y</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Perl string</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We have two integer variables (<code>$x</code> and <code>$y</code>) and one string variable (<code>$s</code>).
For more information on Perl variables, check it out the
<a href="doc/02-perl-variables.html#_Perl_variables">Perl variables</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_expressions">1.2. Expressions</h3>
<div class="paragraph">
<p>In Perl, an expression is anything that returns a value.</p>
</div>
<div class="paragraph">
<p>The expression can be used in a larger expression or a statement. The expression can be a literal
<a href="doc/03-perl-numbers.html#_Perl_numbers">number</a>, complex expression with
<a href="doc/05-perl-operators.html#_Perl_operators">operators</a>, or a
<a href="doc/20-perl-subroutine.html#_Perl_subroutine">function (aka subroutine)</a>, call.</p>
</div>
<div class="paragraph">
<p>For example, 3 is an expression that returns a value of 3. The <code>$a + $b</code> is an
expression that returns the sum of two variables: <code>$a</code> and <code>$b</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_statements">1.3. Statements</h3>
<div class="paragraph">
<p>A statement is made up of expressions. A statement is executed by Perl at run-time.</p>
</div>
<div class="paragraph">
<p>Each Perl statement must end with a semicolon (<code>;</code>). The following example
shows the statements in Perl:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">+</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_blocks">1.4. Blocks</h3>
<div class="paragraph">
<p>A block is made up of statements wrapped in curly braces <code>{}</code>. You use blocks
to organize statements in the program.</p>
</div>
<div class="paragraph">
<p>The following example illustrates a block in Perl:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">{</span>
	<span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
	<span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
	<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Any variable declared inside a block has its own scope.</p>
</div>
<div class="paragraph">
<p>It means the variables declared inside a block only last as long as the block
is executed.</p>
</div>
</div>
<div class="sect2">
<h3 id="_comments">1.5. Comments</h3>
<div class="paragraph">
<p>In Perl, a comment begins with a hash (<code>#</code>) character. Perl interpreter ignores
comments at both compile-time and runtime.</p>
</div>
<div class="paragraph">
<p>Typically, you use comments to document the logic of your code. The code tells
you what it does however comments provides information on why the code does so.</p>
</div>
<div class="paragraph">
<p>Comments are very important and useful to you as a programmer in order to
understand the code later. They’re also useful to other programmers who will
read and maintain your programs in the future.</p>
</div>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">1.05</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>What the code does is to increase the value of the variable <code>$salary</code> 5%.
However, why it does so was not documented.</p>
</div>
<div class="paragraph">
<p>Therefore the following code with comment is much clearer.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050"># increase salary %5 for employees who achieve KPI</span>
<span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$salary</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">1.05</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl also allows you to place a comment on the same line as the statement. See
the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># reset the counter</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is important to use comments properly to make your code easier to
understand.</p>
</div>
</div>
<div class="sect2">
<h3 id="_whitespace">1.6. Whitespace</h3>
<div class="paragraph">
<p>Whitespaces are spaces, tabs, and newlines. Perl is very flexible in terms of
whitespaces usages. Consider the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$y</span><span style="color: #d0d0d0">=</span><span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Both lines of code work perfectly. We surrounded the assignment operator (<code>=</code>)
with whitespace in the first statement, but not in the second one.</p>
</div>
<div class="paragraph">
<p>Perl really doesn’t care about the whitespace. However, it is a good practice
to use whitespace to make the code more readable.</p>
</div>
</div>
<div class="sect2">
<h3 id="_keywords">1.7. Keywords</h3>
<div class="paragraph">
<p>Perl has a set of keywords that have special meanings to its language.</p>
</div>
<div class="paragraph">
<p>Perl keywords fall into some categories such as built-in function and control
keywords.</p>
</div>
<div class="paragraph">
<p>You should always avoid using keywords to name variables, functions,
<a href="doc/21-perl-modules.html#_Perl_modules">modules</a>, and other objects. Check it
out the <a href="http://learn.perl.org/docs/keywords.html">Perl keywords</a>.</p>
</div>
<div class="paragraph">
<p>Sometimes, it is fine to use a variable name such as <code>$print</code>, which is similar
to the built-in <code>print()</code> function. However, this may lead to confusion. In
addition, if the program has an issue, it’s more difficult to troubleshoot.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_variables">2. Perl Variables</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To manipulate data in your program, you use variables.</p>
</div>
<div class="paragraph">
<p>Perl provides three types of variables: scalars, lists, and hashes to help you
manipulate the corresponding data types including scalars, lists, and hashes.</p>
</div>
<div class="paragraph">
<p>We’ll focus on the scalar variable in this section.</p>
</div>
<div class="sect2">
<h3 id="_naming_variables">2.1. Naming variables</h3>
<div class="paragraph">
<p>You use scalar variables to manipulate scalar data such as
<a href="doc/03-perl-numbers.html#_Perl_numbers">numbers</a> and
<a href="doc/04-perl-strings.html#_Perl_strings">strings</a>,</p>
</div>
<div class="paragraph">
<p>A scalar variable starts with a dollar sign (<code>$</code>), followed by a letter or
underscore, after that, any combination of numbers, letters, and underscores.
The name of a variable can be up to 255 characters.</p>
</div>
<div class="paragraph">
<p>Perl is case-sensitive. The <code>$variable</code> and <code>$Variable</code> are different variables.</p>
</div>
<div class="paragraph">
<p>Perl uses the dollar sign (<code>$</code>) as a prefix for the scalar variables because of
the <code>$</code> looks like the character S in the scalar. You can use this tip to
remember when you want to declare a scalar variable.</p>
</div>
<div class="listingblock">
<div class="title">Valid variables:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl]">$gate = 10;
$_port = 20;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Invalid variables:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl]">$4whatever = 20; # no letter or underscore found after dollar sign ($)
$email-address = &#34;zen@example.com&#34;; # special character (-) found
$home url = &#34;http://localhost/perltutorial&#34;; # space is not allowed</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_declaring_variables">2.2. Declaring variables</h3>
<div class="paragraph">
<p>Perl doesn’t require you to declare a variable before using it.</p>
</div>
<div class="paragraph">
<p>For example, you can introduce a variable in your program and use it right away
as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">+</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In some cases, using a variable without declaring it explicitly may lead to
problems. Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Your favorite color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$colour</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The expected output was <code>Your favorite color is red</code>.</p>
</div>
<div class="paragraph">
<p>However, in this case, you got <code>Your favorite color is</code>, because the <code>$color</code>
and <code>$colour</code> are different variables. The mistake was made because of the
<em>different variable names</em>.</p>
</div>
<div class="paragraph">
<p>To prevent such cases, Perl provides a <em>pragma</em> called <code>strict</code> that requires you
to declare variable explicitly before using it.</p>
</div>
<div class="paragraph">
<p>In this case, if you use the <code>my</code> keyword to declare a variable and try to run
the script, Perl will issue an error message indicating that a compilation
error occurred due to the <code>$colour</code> variable must be declared explicitly.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Your favorite color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$colour</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>A variable declared with the <code>my</code> keyword is a <em>lexically scoped</em> variable.</p>
</div>
<div class="paragraph">
<p>It means the variable is only accessible inside the enclosing block or all
blocks nested inside the enclosing block. In other words, the variable is local
to the enclosing block.</p>
</div>
<div class="paragraph">
<p>Now, you’ll learn a very important concept in programming called variable
scopes.</p>
</div>
</div>
<div class="sect2">
<h3 id="_perl_variable_scopes">2.3. Perl variable scopes</h3>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">my favorite #1 color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #505050"># another block</span>
<span style="color: #d0d0d0">{</span>
	<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">blue</span><span style="color: #d0d0d0">&#39;;</span>
	<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">my favorite #2 color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span><span style="color: #151515;background-color: #ac4142">  </span>
<span style="color: #d0d0d0">}</span>
<span style="color: #505050"># for checking</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">my favorite #1 color is </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">In the example above</div>
<div class="ulist">
<ul>
<li>
<p>First, declared a global variable named <code>$color</code></p>
</li>
<li>
<p>Then, displayed the favorite color by referring to the <code>$color</code> variable. As
expected, we get the red color in this case</p>
</li>
<li>
<p>Next, created a new block and declared a variable with the same name <code>$color</code>
using the <code>my</code> keyword. The <code>$color</code> variable is lexical. It is a local
variable and only visible inside the enclosing block</p>
</li>
<li>
<p>After that, inside the block, we displayed the favorite color and we got the
<code>blue</code> color. The local variable takes priority in this case</p>
</li>
<li>
<p>Finally, following the block, we referred to the <code>$color</code> variable and Perl
referred to the <code>$color</code> global variable</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>If you want to declare global variables that are visible throughout your
program or from external packages, you can use <code>our</code> keyword as shown in the
following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">our</span> <span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_variable_interpolation">2.4. Perl variable interpolation</h3>
<div class="paragraph">
<p>Perl interpolates variables in double-quoted strings. It means if you place a
variable inside a double-quoted string, you’ll get the value of the variable
instead of its name.</p>
</div>
<div class="paragraph">
<p>Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$amount</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The amount is </span><span style="color: #8f5536">$amount</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl interpolates the value of <code>$amount</code> into the string which is 20.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Perl only interpolates scalar variables and
<a href="doc/07-perl-array.html#_Perl_array">array</a>, not
<a href="doc/07-perl-hash.html#_Perl_hash">hashes</a>. In addition, the interpolation is
only applied to the double-quoted string, but not the single-quoted string</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_numbers">3. Perl Numbers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl has two kinds of numbers: integer and floating-point numbers.</p>
</div>
<div class="sect2">
<h3 id="_perl_integers">3.1. Perl integers</h3>
<div class="paragraph">
<p>Integers are whole numbers that have no digits after the decimal points i.e
<code>10</code>, <code>-20</code> or <code>100</code>.</p>
</div>
<div class="paragraph">
<p>In Perl, integers are often expressed as decimal integers, base 10. The
following illustrates some integer numbers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$y</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">100</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">$z</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">-</span><span style="color: #90a959">200</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When the integer number is big, you often use a comma as a separator to make it
easier to read e.g., 123,763,213.</p>
</div>
<div class="paragraph">
<p>However, Perl already uses a comma (<code>,</code>) as a separator in the list so for
integer numbers Perl uses an underscore character (<code>_</code>) instead. In this case,
<code>123,763,213</code> is written in Perl as <code>123_763_213</code>.</p>
</div>
<div class="paragraph">
<p>Take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">123_763_213</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># 123763213</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the output of the example above, Perl uses no comma or underscore as the
separator.</p>
</div>
<div class="paragraph">
<p>Besides the decimal format, Perl also supports other formats including binary,
octal, and hexadecimal.</p>
</div>
<div class="paragraph">
<p>The following table shows you prefixes for formatting with binary, octal, and
hexadecimal integers.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Number</th>
<th class="tableblock halign-left valign-top">Format</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0b123</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Binary integer using a prefix of 0b</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0255</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Octal integer using a prefix of 0</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">0xABC</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Hexadecimal integer using a prefix of 0x</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>All the following integer numbers are 12 in Perl:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>12
0b1100
014
0xC</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_floating_point_numbers">3.2. Perl floating-point numbers</h3>
<div class="paragraph">
<p>You use floating-point numbers to store real numbers. Perl represents
floating-point numbers in two forms:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Fixed point</strong>: the decimal point is fixed in the number to denote fractional
part starts e.g., <code>100.25</code></p>
</li>
<li>
<p><strong>Scientific</strong>: consists of a significand with the actual number value and an
exponent representing the power of 10 that the significand is multiplied by,
for example, <code>+1.0025e2</code> or  <code>-1.0025E2</code> is <code>100.25.</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The floating-point number holds 8 bytes, with 11 bits reserved for the exponent
and 53 bits for significand.</p>
</div>
<div class="paragraph">
<p>The range of floating-point numbers is essentially determined by the standard C
library of the underlying platform where Perl is running.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_string">4. Perl String</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl’s built-in string functions to manipulate strings.</p>
</div>
<div class="sect2">
<h3 id="_introduction_to_perl_strings">4.1. Introduction to Perl strings</h3>
<div class="paragraph">
<p>In Perl, a string is a sequence of characters surrounded by some kind of
quotation marks. A string can contain ASCII, UNICODE, and escape sequences
characters such as <code>\n</code>.</p>
</div>
<div class="paragraph">
<p>A Perl string has a length that depends on the amount of memory in your system,
which is theoretically unlimited.</p>
</div>
<div class="paragraph">
<p>The following example demonstrates single and double-quoted strings.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s1</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">string with doubled-quotes</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s2</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">string with single quote</span><span style="color: #d0d0d0">&#39;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is important to remember that the double-quoted string replaces variables
inside it by their values, while the single-quoted string treats them as text.
This is known as variable interpolation in Perl.</p>
</div>
</div>
<div class="sect2">
<h3 id="_perl_string_alternative_delimiters">4.2. Perl string alternative delimiters</h3>
<div class="paragraph">
<p>Besides the single and double quotes, Perl also allows you to use quote-like
operators such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>q//</code> acts like a single-quoted string.</p>
</li>
<li>
<p>The <code>qq//</code> acts like double-quoted string</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can choose any non-alphabetic and non-numeric characters as the delimiters,
not only just characters <code>//</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">=</span> <span style="color: #90a959">q/&#34;Are you learning Perl String today?&#34; We asked./</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$name</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Jack</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s2</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qq/&#34;Are you learning Perl String today?&#34;$name asked./</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s2</span> <span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, defined a single-quoted string variable with the quote-like operator
<code>q/</code>. The string  <code>$s</code> ends with <code>/</code></p>
</li>
<li>
<p>Second, defined a double-quoted string with the quote-like operator <code>qq/</code>. In
this case, we used the <code>$name</code> variable inside a string and it is replaced by
its value, <code>Jack</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following example demonstrates string with the <code>^</code> delimiter.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">q^A string with different delimiter ^</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_string_functions">4.3. Perl string functions</h3>
<div class="paragraph">
<p>Perl provides a set of functions that allow you to manipulate strings
effectively. We cover the most commonly used string functions in the following
section for your reference.</p>
</div>
<div class="paragraph">
<div class="title">Perl string length</div>
<p>To find the number of characters in a string, you use the <code>length()</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">This is a string</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">length</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050">#17</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Changing cases of string</div>
<p>To change the cases of a string you use a pair of functions <code>lc()</code> and <code>uc()</code>
that returns the lowercase and uppercase versions of a string.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Change cases of a string</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">To upper case:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">uc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">To lower case:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">lc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Search for a substring inside a string</div>
<p>To search for a substring inside a string, you use <code>index()</code> and <code>rindex()</code>
functions.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>index()</code> function searches for a substring inside a string from a
specified position and returns the position of the first occurrence of the
substring in the searched string. If the position is omitted, it searches
from the beginning of the string.</p>
</li>
<li>
<p>The <code>rindex()</code> function works like the <code>index()</code> function except it searches
from the end of the string instead of from the beginning.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The following example demonstrates how to use the <code>index()</code> and <code>rindex()</code>
functions:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Learning Perl is easy</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$sub</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Perl</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$p</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">index</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">$sub</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># rindex($s,$sub);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">qq\The substring &#34;$sub&#34; found at position &#34;$p&#34; in string &#34;$s&#34;\</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Get or modify substring inside a string</div>
<p>To extract a substring out of a string, you use the <code>substr()</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #505050"># extract substring</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Green is my favorite color</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #151515;background-color: #ac4142"> </span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">substr</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">);</span><span style="color: #151515;background-color: #ac4142">     </span> <span style="color: #505050"># Green</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$end</span><span style="color: #151515;background-color: #ac4142">   </span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">substr</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">-</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">);</span><span style="color: #151515;background-color: #ac4142">       </span> <span style="color: #505050"># color</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$end</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #90a959">:</span><span style="color: #d0d0d0">&#34;,</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #505050"># replace substring</span>
<span style="color: #d0d0d0;background-color: #151515">substr</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Red</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050">#Red is my favorite color</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Other useful Perl string functions</div>
<p>The following table illustrates other useful Perl string functions with their
descriptions:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Function</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>chr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Return ASCII or UNICODE character of a number</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>crypt</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Encrypts passwords in one way fashion</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>hex</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Converts a hexadecimal string to the corresponding value</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>index</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Searches for a substring inside a string returns position where the first occurrence of the substring found</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>lc</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns a lowercase version of the string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>length</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the number of characters of a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>oct</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Converts a string to an octal number</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ord</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the numeric value of the first character of a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>q/string/</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates single-quoted strings</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>qq/string/</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates double-quoted strings</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reverse</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reverses a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>rindex</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Searches for a substring from right to left</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>sprintf</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Formats string to be used with print()</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>substr</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Gets or modifies a substring in a string</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>uc</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the uppercase version of the string</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_operator">5. Perl Operator</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl operators including numeric operators, string operators, and logical operators.</p>
</div>
<div class="sect2">
<h3 id="_numeric_operators">5.1. Numeric operators</h3>
<div class="paragraph">
<p>Perl provides numeric operators to help you operate on numbers including
arithmetic, Boolean and bitwise operations. Let’s examine the different kinds
of operators in more detail.</p>
</div>
<div class="paragraph">
<div class="title">Arithmetic operators</div>
<p>Perl arithmetic operators deal with basic math such as adding, subtracting,
multiplying, diving, etc. To add (<code>+</code>) or subtract (<code>-</code>) numbers, you would do
something as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 30</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">20</span> <span style="color: #d0d0d0">-</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 10</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To multiply or divide numbers, you use divide (<code>/</code>) and multiply (<code>*</code>) operators as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 200</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">20</span> <span style="color: #d0d0d0">/</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 2</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>When you combine adding, subtracting, multiplying, and dividing operators
together, Perl will perform the calculation in an order, which is known as
operator precedence.</p>
</div>
<div class="paragraph">
<p>The multiply and divide operators have higher precedence than add and subtract
operators, therefore, Perl performs multiplying and dividing before adding and
subtracting. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">/</span><span style="color: #90a959">2</span> <span style="color: #d0d0d0">-</span> <span style="color: #90a959">5</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span> <span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 10</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl performs 20/2 and 5*2 first, therefore you will get 10 + 10 – 10 = 10.</p>
</div>
<div class="paragraph">
<p>You can use brackets <code>()</code> to force Perl to perform calculations based on the
precedence you want as shown in the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #d0d0d0">(((</span><span style="color: #90a959">10</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">/</span> <span style="color: #90a959">2</span> <span style="color: #d0d0d0">-</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># 20;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To raise one number to the power of another number, you use the exponentiation
operator.</p>
</div>
<div class="listingblock">
<div class="title">Exponentiation operators:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">**</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># = 2 * 2 * 2 = 8.</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">3</span><span style="color: #d0d0d0">**</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># = 3 * 3 * 3 * 3 = 81.</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To get the remainder of the division of one number by another, you use the modulo operator (<code>%</code>).</p>
</div>
<div class="paragraph">
<p>It is handy to use the modulo operator (<code>%</code>) to check if a number is odd or even
by dividing it by 2 to get the remainder. If the remainder is zero, the number
is even, otherwise, the number is odd. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #90a959">4</span> <span style="color: #d0d0d0">%</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 0 even</span>
<span style="color: #aa759f">print</span> <span style="color: #90a959">5</span> <span style="color: #d0d0d0">%</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># 1 odd</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Bitwise Operators</div>
<p>Bitwise operators allow you to operate on numbers one bit at a time. Think of a
number as a series of bits e.g., <code>125</code> can be represented in binary form as
<code>1111101</code>. Perl provides all basic bitwise operators including and (<code>&amp;</code>), or
(<code>|</code>), exclusive or (<code>^</code>) , not (<code>~</code>) operators, shift right (<code>&gt;&gt;</code>), and shift
left (<code>&lt;&lt;</code>) operators.</p>
</div>
<div class="paragraph">
<p>The bitwise operators perform from right to left. In other words, bitwise
operators perform from the rightmost bit to the leftmost bit.</p>
</div>
<div class="listingblock">
<div class="title">Bitwise operations</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0b0101</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 5</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0b0011</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 3</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&amp;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0001 or 1</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">|</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0111 or 7</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">^</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0110 or 6</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">~</span><span style="color: #d0d0d0;background-color: #151515">$a</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 11111111111111111111111111111010 (64bits computer) or 4294967290</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&gt;&gt;</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0101 shift right 1 bit, 010 or 2</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;&lt;</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># 0101 shift left 1 bit, 1010 or 10</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$c</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 1. Comparison operators for numbers</caption>
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Equality</th>
<th class="tableblock halign-left valign-top">Operators</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>==</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Not Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>!=</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Comparison</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;⇒</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&gt;</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>⇐</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&gt;=</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>All the operators in the table above are obvious except the number comparison
operator <code>&lt;⇒</code> which is also known as spaceship operator.</p>
</div>
<div class="paragraph">
<p>The number comparison operator is often used in sorting numbers. See the code
below:</p>
</div>
$a &lt;=&gt; $b
<div class="ulist">
<ul>
<li>
<p><strong>1</strong> if <code>$a</code> is greater than <code>$b</code></p>
</li>
<li>
<p><strong>0</strong> if <code>$a</code> and <code>$b</code> are equal</p>
</li>
<li>
<p><strong>-1</strong> if <code>$a</code> is lower than <code>$b</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_string_operators">5.2. String operators</h3>
<table class="tableblock frame-all grid-all stretch">
<caption class="title">Table 2. Comparison operators</caption>
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Equality</th>
<th class="tableblock halign-left valign-top">Operators</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>eq</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Not Equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ne</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Comparison</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>cmp</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>lt</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>gt</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Less than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>le</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Greater than or equal</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ge</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<div class="title">Concatenation operators</div>
<p>Perl provides the concatenation (<code>.</code>) and repetition (<code>x</code>) operators that allow
you to manipulate strings</p>
</div>
<div class="listingblock">
<div class="title">Concatenation operator (<code>.</code>)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">This is</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959"> concatenation operator</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0">.</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Repetition operators (<code>x</code>)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a message </span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">x</span> <span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">The chomp() operator</div>
<p>The <code>chomp()</code> operator (or function) removes the last character in a string and
returns a number of characters that were removed. The <code>chomp()</code> operator is
very useful when dealing with the user’s input because it helps you remove the
new line character \n from the string that the user entered.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0;background-color: #151515">$s</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
The <code>&lt;STDIN&gt;</code> is used to get input from users.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_logical_operators">5.3. Logical operators</h3>
<div class="paragraph">
<p>Logical operators are often used in control statements such as
<a href="doc/09-perl-if-statement.html#_Perl_if_Statement">if</a>,
<a href="doc/13-perl-while-loop.html#_Perl_while_Loop">while</a>,
<a href="doc/11-perl-given.html#_Perl_given">given</a>,
etc., to control the flow of the program. The following are logical operators in Perl:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>$a &amp;&amp; $b</code> performs the logic <code>AND</code> of two variables or expressions. The
logical <code>&amp;&amp;</code> operator checks if both variables or expressions are true.</p>
</li>
<li>
<p><code>$a || $b</code> performs the logic <code>OR</code> of two variables or expressions. The
logical <code>||</code> operator checks whether a variable or expression is true.</p>
</li>
<li>
<p><code>!$a</code> performs the logic <code>NOT</code> of the variable or expression. The logic <code>!</code>
operator inverts the value of the following variable or expression. In the
other words, it converts <code>true</code> to <code>false</code> or <code>false</code> to <code>true</code>.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_perl_list">6. Perl List</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl list and how to manipulate list elements using various techniques such as
list slicing, ranging and qw() function.</p>
</div>
<div class="paragraph">
<p>A Perl list is a sequence of
<a href="doc/02-perl-variables.html#_perl_variables">scalar</a>
values. You use parenthesis and comma operators to construct a list. Each value
is the list is called list element. List elements are indexed and ordered. You
can refer to each element by its position.</p>
</div>
<div class="sect2">
<h3 id="_simple_perl_list">6.1. Simple Perl list</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">();</span>
<span style="color: #d0d0d0">(</span><span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">30</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">this</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">is</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #90a959">list</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">In the example above:</div>
<ul>
<li>
<p>The first list <code>()</code> is an empty list.</p>
</li>
<li>
<p>The second list <code>(10,20,30)</code> is a list of integers.</p>
</li>
<li>
<p>The third list <code>(&#34;this&#34;, &#34;is&#34;, &#34;a&#34;,&#34;list&#34;)</code> is a list of strings.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Each element in the list is separated by a comma <code>(,)</code>. The print` operator is
a list operator. So let’s display our lists above with the <code>print</code> operator to
see how it works:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(());</span> <span style="color: #505050"># display nothing</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">10</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">20</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">30</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># display 102030</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">this</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">is</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #90a959">list</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># display: thisisalist</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>We passed several lists to the <code>print</code> operator to display their elements. All
the lists that we have seen so far contain an element with the same data type.
These lists are called simple lists.</p>
</div>
</div>
<div class="sect2">
<h3 id="_complex_perl_list">6.2. Complex Perl list</h3>
<div class="paragraph">
<p>A Perl list may contain elements that have different data types. This kind of
list is called a complex list. Let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">a string</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">complex list</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0;background-color: #151515">$x</span> <span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$s</span> <span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_qw_function">6.3. Using qw function</h3>
<div class="paragraph">
<p>Perl provides the <code>qw()</code> function that allows you to get a list by extracting
words out of a string using the space as a delimiter. The <code>qw</code> stands for quote
word. The two lists below are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">red</span><span style="color: #d0d0d0">&#39;,&#39;</span><span style="color: #90a959">green</span><span style="color: #d0d0d0">&#39;,&#39;</span><span style="color: #90a959">blue</span><span style="color: #d0d0d0">&#39;);</span> <span style="color: #505050"># redgreenblue</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">qw(red green blue)</span><span style="color: #d0d0d0">);</span> <span style="color: #505050"># redgreenblue</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Similar to the <code>q/</code> and <code>q//</code> operators, you can use any non-alphanumeric
character as a delimiter. The following lists are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #90a959">qw\this is a list\</span><span style="color: #d0d0d0">;</span>
<span style="color: #90a959">qw{this is a list}</span><span style="color: #d0d0d0">;</span>
<span style="color: #90a959">qw[this is a list]</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_flattening_list">6.4. Flattening list</h3>
<div class="paragraph">
<p>If you put a list, called an internal list, inside another list, Perl
automatically flattens the internal list. The following lists are the same:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">(</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,(</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">))</span>
<span style="color: #d0d0d0">(</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">((</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">),</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_list_element">6.5. Accessing list element</h3>
<div class="paragraph">
<p>You can access elements of a list by using the zero-based index. To access the
n<sup>th</sup> element, you put (n – 1) index inside square brackets.</p>
</div>
<div class="listingblock">
<div class="title">Let’s take a look at the following example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span>
     <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">)[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">]</span> <span style="color: #505050"># 1 first element</span>
<span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># new line</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span>
     <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">)[</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">]</span> <span style="color: #505050"># 3 third element</span>
<span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #505050"># new line</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>To get multiple elements of a list at a time, you can put a list inside square
brackets. This feature is called list slice. You can omit the parenthesis of
the list inside the square bracket.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">)[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">]</span> <span style="color: #505050"># (1,3,4)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The above code returns a list of three elements <code>(1, 3, 4)</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ranges">6.6. Ranges</h3>
<div class="paragraph">
<p>Perl allows you to build a list based on a range of numbers or characters e.g.,
a list of numbers from 1 to 100, a list of characters from a to z. The
following example defines two lists:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">100</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">a</span><span style="color: #d0d0d0">..</span><span style="color: #d0d0d0;background-color: #151515">z</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_array">7. Array</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl array and how to use arrays effectively in your program and techniques to
manipulate array’s elements.</p>
</div>
<div class="paragraph">
<p>A
<a href="doc/02-perl-variables.html#_perl_list">list</a>
is immutable so you cannot change it directly. In order to change a
list, you need to store it in an array
<a href="doc/02-perl-variables.html#_perl_variables">variable</a>.</p>
</div>
<div class="paragraph">
<p>By definition, an array is a variable that provides dynamic storage for a list.</p>
</div>
<div class="paragraph">
<p>In Perl, the terms array and
<a href="doc/02-perl-variables.html#_perl_list">list</a>
are used interchangeably, but you have to
note an important difference: a list is immutable whereas an array is mutable.
In other words, you can modify the array’s elements, grow or shrink the array,
but not a list.</p>
</div>
<div class="paragraph">
<p>A
<a href="doc/02-perl-variables.html#_perl_variables">scalar variable</a>
begins with the dollar sign (<code>$</code>), however, an array variable begins with an
at-sign (<code>@</code>).</p>
</div>
<div class="listingblock">
<div class="title">How to declare an array variable</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@days</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>$</code> sign looks like <code>S</code> in the word scalar. And <code>@</code> looks like <code>a</code> in the
word array, which is a simple trick to remember what type of variables you are
working with.</p>
</div>
<div class="sect2">
<h3 id="_accessing_perl_array_elements">7.1. Accessing Perl array elements</h3>
<div class="paragraph">
<p>Like a list, you can access array elements using square brackets <code>[]</code> and indices.</p>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$days</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">]);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If you take a look at the code carefully, you will see that we used <code>$days[0]</code>
instead of <code>@days[0]</code>.</p>
</div>
<div class="paragraph">
<p>This is because an array element is a scalar, you have to use the scalar prefix
(<code>$</code>). In Perl, the rule is that the prefix represents what you want to get,
not what you’ve got.</p>
</div>
<div class="paragraph">
<p>Perl also allows you to access array elements using negative indices. Perl
returns an element referred to by a negative index from the end of the array.
For example, <code>$days[-1]</code> returns the last element of the array <code>@days</code>.</p>
</div>
<div class="paragraph">
<p>You can access multiple array elements at a time using the same technique as
the list slice.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@weekend</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">[</span><span style="color: #d0d0d0">-</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">..-</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">];</span> <span style="color: #505050"># SatSun</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #151515;background-color: #ac4142">“</span><span style="color: #d0d0d0;background-color: #151515">@weekend</span><span style="color: #151515;background-color: #ac4142">”</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_counting_perl_array_elements">7.2. Counting Perl array elements</h3>
<div class="paragraph">
<p>If you treat an array as a scalar, you will get the number of elements in the
array.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$count</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This code causes an error in case you don’t really want to count it but
accidentally assign an array to a scalar. To be safe, use the <code>scalar()</code>
function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$count</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">scalar</span> <span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$count</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The operator <code>$#</code> returns the highest index of an array.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$last</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$#days</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$last</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050">#&#34; 6</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_modifying_perl_array_elements">7.3. Modifying Perl array elements</h3>
<div class="paragraph">
<p>To change the value of an element, you access the element using the index and
assign it a new value. Perl also allows you to change the values of multiple
elements at a time.</p>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@days</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Mon Tue Wed Thu Fri Sat Sun)</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0;background-color: #151515">$days</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Monday</span><span style="color: #d0d0d0">&#39;;</span>

<span style="color: #d0d0d0;background-color: #151515">@days</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(Tuesday Wednesday Thursday Friday Saturday Sunday)</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@days</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_perl_array_operations">7.4. Perl array operations</h3>
<div class="paragraph">
<p>Perl provides several useful functions and operators to help you manipulate
arrays effectively. We will cover the most important ones in the following
sections.</p>
</div>
<div class="paragraph">
<div class="title">Perl array as a stack with push() and pop() functions</div>
<p>Both functions treat an array as a stack. A stack works based on the last in
first out (LIFO) philosophy. It works exactly the same as a stack of books. The
<code>push()</code> function appends one or more elements to the end of the array, while
the <code>pop()</code> function removes the last element from the end of the array.</p>
</div>
<div class="listingblock">
<div class="title">How to use <code>push()</code> and <code>pop()</code> functions</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@stack</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">();</span> <span style="color: #505050"># empty array</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">push 1 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">push 2 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">push 3 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #151515;background-color: #ac4142">“</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #151515;background-color: #ac4142">”</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@stack</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Perl array as a queue with <code>unshift()</code> and <code>pop()</code> functions</div>
<p>If the <code>push()</code> and pop()` treat an array as a stack, the <code>unshift()</code> and
<code>pop()</code> functions treat an array as a queue. A queue works based on the first
in first out (FIFO) philosophy. It works like a queue of visitors. The
<code>unshift()</code> function adds one or more elements to the front of the array, while
the <code>pop()</code> function removes the last element of the array.</p>
</div>
<div class="listingblock">
<div class="title">How to use <code>unshift()</code> and <code>pop()</code> functions</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@queue</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">();</span> <span style="color: #505050"># empty queue</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">enqueue 1 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">unshift</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">enqueue 2 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">unshift</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">);</span>

<span style="color: #d0d0d0;background-color: #151515">printf</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">enqueue 3 to array</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">unshift</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">,</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@queue</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># 3 2 1</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #d0d0d0;background-color: #151515">$elem</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">pop</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@queue</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">element: </span><span style="color: #8f5536">$elem</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Sorting Perl arrays</div>
<p>Perl provides the <code>sort()</code> function that allows you to sort an array in
alphabetical or numerical order.</p>
</div>
<div class="listingblock">
<div class="title">Sorting an array of strings alphabetically</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@fruits</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(oranges apples mango cucumber)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@sorted</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">sort</span> <span style="color: #d0d0d0;background-color: #151515">@fruits</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">@sorted</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># apples cucumber mango oranges</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>sort()</code> function also accepts a block of code that allows you to change
the sort algorithm. If you want to sort an array in numerical order, you need
to change the default sorting algorithm.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">qw(3 2 1 4 7 6)</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">unsorted: </span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">@a</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># unsorted: 3 2 1 4 7 6</span>
<span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">sort</span> <span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=&gt;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">}</span> <span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">sorted:</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">@a</span><span style="color: #d0d0d0">&#34;,</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># sorted: 1 2 3 4 6 7</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">In the example above:</div>
<ul>
<li>
<p>First, we had an unsorted array <code>@a</code>, and we displayed the <code>@a</code> array to make
sure that it is unsorted.</p>
</li>
<li>
<p>Second, we used the <code>sort()</code> function to sort the <code>@a</code> array. We passed a
block of code <code>{$a &lt;⇒$b}</code> and the <code>@a</code> array to the sort function. The <code>$a</code>
and <code>$b</code> are global variables defined by the <code>sort()</code> function for sorting.
The operator <code>&lt;⇒</code> is used to compare two numbers. The code block <code>{$a &lt;⇒
$b}</code> returns -1 if <code>$a</code> &lt; <code>$b</code>, 0 if <code>$a</code> = <code>$b</code>, and 1 if <code>$a</code> &gt; <code>$b</code>.</p>
</li>
<li>
<p>Third, we displayed the elements of the sorted array @a.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For more information on the <code>sort()</code> function, check out the
Perl sort function
<a href="doc/02-perl-variables.html#_perl_sort">Perl sort function</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hash">8. Hash</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Another compound data type called Perl hash and how to manipulate hash elements
effectively.</p>
</div>
<div class="paragraph">
<p>A Perl hash is defined by key-value pairs. Perl stores elements of a hash in
such an optimal way that you can look up its values based on keys very fast.</p>
</div>
<div class="paragraph">
<p>With the array, you use indices to access its elements. However, you must use
descriptive keys to access hash element. A hash is sometimes referred to as an
associative array.</p>
</div>
<div class="paragraph">
<p>Like a scalar or an array variable, a hash variable has its own prefix. A hash
variable must begin with a percent sign (<code>%</code>). The prefix <code>%</code> looks like
key/value pair so remember this trick to name the hash variables.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">%data</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">John Paul</span><span style="color: #d0d0d0">&#39;,</span> <span style="color: #90a959">45</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Lisa</span><span style="color: #d0d0d0">&#39;,</span> <span style="color: #90a959">30</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Kumar</span><span style="color: #d0d0d0">&#39;,</span> <span style="color: #90a959">40</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl provides the <code>⇒</code> operator as an alternative to a comma (<code>,</code>). It helps
differentiate between keys and values and makes the code more elegant.</p>
</div>
<div class="paragraph">
<p>When you see the <code>⇒</code> operator, you know that you are dealing with a hash, not
a list or an array.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%countries</span> <span style="color: #d0d0d0">=</span>  <span style="color: #d0d0d0">(</span> <span style="color: #90a959">England</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">English</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">France</span>  <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">French</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">Spain</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Spanish</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">China</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Chinese</span><span style="color: #d0d0d0">&#39;,</span>
                   <span style="color: #90a959">Germany</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">German</span><span style="color: #d0d0d0">&#39;);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl requires the keys of a hash to be strings, meanwhile, the values can be
any scalars. If you use non-string values as the keys, you may get an
unexpected result.</p>
</div>
<div class="paragraph">
<p>In addition, a hash key must be unique. If you try to add a new key-value pair
with the key that already exists, <strong>the value of the existing key will be
over-written</strong>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>You can omit the quotation in the keys of the hash.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect2">
<h3 id="_hash_operations">8.1. Hash Operations</h3>
<div class="paragraph">
<p>The most commonly used operation in the hash.</p>
</div>
<div class="paragraph">
<div class="title">Look up Perl hash values</div>
<p>Use a hash key inside curly brackets <code>{}</code> to look up a hash value.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #505050"># defines country =&gt; language hash</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%langs</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span> <span style="color: #90a959">England</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">English</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">France</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">French</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Spain</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Spanish</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">China</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Chinese</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Germany</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">German</span><span style="color: #d0d0d0">&#39;);</span>
<span style="color: #505050"># get language of England</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$lang</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">England</span><span style="color: #d0d0d0">&#39;};</span> <span style="color: #505050"># English</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$lang</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Add new element</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">Italy</span><span style="color: #d0d0d0">&#39;}</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Italian</span><span style="color: #d0d0d0">&#39;;</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Remove a single key/value pair</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">delete</span> <span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">China</span><span style="color: #d0d0d0">&#39;};</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Modify hash elements</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050"># add new key value pair</span>
<span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">India</span><span style="color: #d0d0d0">&#39;}</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Many languages</span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #505050"># modify official language of India</span>
<span style="color: #d0d0d0;background-color: #151515">$langs</span><span style="color: #d0d0d0">{&#39;</span><span style="color: #90a959">India</span><span style="color: #d0d0d0">&#39;}</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Hindi</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #505050">#</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Loop over Perl hash elements</div>
<p>Perl provides the <code>keys()</code> function that allows you to get a list of keys in
scalars. You can use the <code>keys()</code> function in a <code>for</code> loop statement to iterate
the hash elements:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #505050"># defines country =&gt; language hash</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%langs</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span> <span style="color: #90a959">England</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">English</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">France</span>  <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">French</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Spain</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Spanish</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">China</span>   <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Chinese</span><span style="color: #d0d0d0">&#39;,</span>
              <span style="color: #90a959">Germany</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">German</span><span style="color: #d0d0d0">&#39;);</span>

<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">keys</span> <span style="color: #d0d0d0;background-color: #151515">%langs</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Official Language of </span><span style="color: #8f5536">$_</span><span style="color: #90a959"> is </span><span style="color: #8f5536">$langs</span><span style="color: #90a959">{</span><span style="color: #8f5536">$_</span><span style="color: #90a959">}</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>keys()</code> function returns a list of hash keys. The <code>for</code> loop visits each
key and assigns it to a special variable <code>$<em></em></code><em>. Inside the loop, we access the
value of a hash element via its key as <code>$langs{$</code></em><code>}</code>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_if_statement">9. <strong><em>if</em></strong> Statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl <code>if</code> statement allows you to control the execution of your code based on
conditions. The simplest form of the <code>if</code> statement is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In this form, you can put the <code>if</code> statement after another statement. Let’s
take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Welcome to Perl if tutorial</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span> <span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The message is only displayed if the expression <code>$a == 1</code> evaluates to <code>true</code>.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">How Perl defines <strong><em>true</em></strong> and <strong><em>false</em></strong>?</div>
<div class="ulist">
<ul>
<li>
<p>Both number 0 and string “0” are <code>false</code>.</p>
</li>
<li>
<p>The <code>undefined</code> value is <code>false</code>.</p>
</li>
<li>
<p>The empty list <code>()</code> is <code>false</code>.</p>
</li>
<li>
<p>The empty string <code>&#34;&#34;</code> is <code>false</code>.</p>
</li>
<li>
<p>Everything else is <code>true</code>.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="title">Execute multiple statements based on a condition</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
   <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span>
   <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span>
   <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The curly braces <code>{}</code> are required even if you have a single statement to
execute</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<div class="title"><strong><em>if..else</em></strong> Statement</div>
<p>Perl provides the <code>if else</code> statement that allows you to execute a code block
if the expression evaluates to <code>true</code>, otherwise, the code block inside the
<code>else</code> branch will execute.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
   <span style="color: #75b5aa">//</span> <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
   <span style="color: #75b5aa">//</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">==</span> <span style="color: #d0d0d0;background-color: #151515">$b</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a and b are equal</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a and b are not equal</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The code block in the else branch will execute because $a and $b are not equal.</p>
</div>
<div class="paragraph">
<div class="title"><strong><em>if..elsif</em></strong> statement</div>
<p>In some cases, you want to test more than one condition:</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>If <code>$a</code> and <code>$b</code> are equal, then do this.</p>
</li>
<li>
<p>If <code>$a</code> is greater than <code>$b</code> then do that.</p>
</li>
<li>
<p>Otherwise, do something else.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>Perl provides the if elsif statement for checking multiple conditions and
executing the corresponding code block:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression2</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expression3</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_a_simple_program">10. A Simple Program</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We are going to apply what we have learned so far to create a simple program
called currency converter.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>We will use a hash to store the exchange rates.</p>
</li>
<li>
<p>To get the inputs from users via the command line, we will use <code>&lt;STDIN&gt;</code>. We
use the <code>chomp()</code> function to remove the newline character (\n) from the
user’s inputs.</p>
</li>
<li>
<p>We convert the amount from local currency to foreign currency if the
currencies are supported.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$l_amount</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$f_amount</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">%rates</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span>
     <span style="color: #90a959">USD</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">YPY</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">82.25</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">EUR</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">0.78</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">GBP</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">0.62</span><span style="color: #d0d0d0">,</span>
     <span style="color: #90a959">CNY</span> <span style="color: #d0d0d0">=&gt;</span> <span style="color: #90a959">6.23</span>
<span style="color: #d0d0d0">);</span>

<span style="color: #505050"># print supported currencies</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Supported currency:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">keys</span> <span style="color: #d0d0d0;background-color: #151515">%rates</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
	<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">uc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$_</span><span style="color: #d0d0d0">),&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #505050"># get inputs from users:</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Enter local currency:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$l_curr</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Enter foreign currency:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$f_curr</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Enter amount:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$l_amount</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">$l_amount</span><span style="color: #d0d0d0">);</span>

<span style="color: #505050"># check user&#39;s inputs.</span>
<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">not</span> <span style="color: #d0d0d0;background-color: #151515">exists</span> <span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">})</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Local currency is not supported</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">not</span> <span style="color: #d0d0d0;background-color: #151515">exists</span> <span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">})</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Foreign currency is not supported</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #505050"># convert from local currency to foreign currency</span>
     <span style="color: #d0d0d0;background-color: #151515">$f_amount</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$f_curr</span><span style="color: #d0d0d0">}</span> <span style="color: #d0d0d0">/</span> <span style="color: #d0d0d0;background-color: #151515">$rates</span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">$l_curr</span><span style="color: #d0d0d0">})</span> <span style="color: #d0d0d0">*</span> <span style="color: #d0d0d0;background-color: #151515">$l_amount</span><span style="color: #d0d0d0">;</span>

     <span style="color: #505050"># print out the result</span>
     <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$l_amount</span><span style="color: #90a959"> </span><span style="color: #8f5536">$l_curr</span><span style="color: #90a959"> = </span><span style="color: #8f5536">$f_amount</span><span style="color: #90a959"> </span><span style="color: #8f5536">$f_curr</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unless_statement">11. <strong><em>unless</em></strong> Statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before discussing the unless statement, let’s revisit Perl’s philosophy:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>There is more than one way to do it.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Perl always provides you with an alternative way to achieve what you need to do.
In programming, you often hear something like this:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If it’s not true, then do this (use <code>if</code> not statement).</p>
</li>
<li>
<p>or unless it’s true, then do this (use <code>unless</code> statement).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The effect is the same but the philosophy is different. That’s why Perl
invented the <code>unless</code> statement to increase the readability of code when you
use it properly.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>the Perl <code>unless</code> statement is equivalent to the <code>if not</code> statement</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="listingblock">
<div class="title"><strong><em>unless</em></strong> statement</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">statement</span> <span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Perl executes the statement from right to left, if the condition is <code>false</code>,
Perl executes the statement that precedes the <code>unless</code>. If the condition is
<code>true</code>, Perl skips the statement.</p>
</div>
<div class="paragraph">
<p>If you have more than one statement to execute, you can use the following form
of the Perl unless statement:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If the <code>condition</code> evaluates to <code>false</code>, Perl executes the code block,
otherwise, it skips the code block.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">unless</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">){</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is greater than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>unless..else</em></strong> statement</div>
<p>Sometimes you want to say unless the condition is <code>true</code>, then do this,
otherwise do that.</p>
</div>
<div class="paragraph">
<p>This is where the <code>unless…​else</code> statement comes into play. See the following
<code>unless else</code> statement:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">unless</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If the condition is <code>false</code>, Perl will execute the <code>unless</code> code block,
otherwise, Perl will execute the <code>else</code> code block.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&gt;=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is less than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is greater than or equal 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="content">
<pre>a is greater than or equal 0</pre>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>unless..elsif..else</em></strong> statement</div>
<p>If you have more than one condition for checking with the <code>unless</code> statement,
you can use the <code>unless elsif else</code> statement as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition_1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">unless</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition_2</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>You can have many <code>elsif</code> clauses in the <code>unless elsif</code> statement.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is less than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">elsif</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">a is greater than 0</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title"><strong><em>unless</em></strong> statement guidelines</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>You should use the <code>unless</code> statement with a simple condition to improve the
code readability, especially when used as a postfix after another statement
like the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">unless used with a very simple condition ONLY.</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span> <span style="color: #aa759f">unless</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>You should avoid using the <code>unless</code> statement when the condition is complex and
requires <code>else</code> and/or <code>elsif</code> clauses.</p>
</div>
<div class="paragraph">
<p>If you take a look at the following code, it is difficult to interpret the
meaning of the condition.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">unless</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$a</span> <span style="color: #d0d0d0">&lt;</span> <span style="color: #90a959">0</span> <span style="color: #d0d0d0">&amp;&amp;</span> <span style="color: #d0d0d0;background-color: #151515">$b</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">10</span> <span style="color: #d0d0d0">&amp;&amp;</span> <span style="color: #d0d0d0;background-color: #151515">$c</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">unless used with a very complex condition</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_given_statement">12. <strong><em>given</em></strong> Statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl <code>given</code> statement, is similar to the switch case statement in other
languages.</p>
</div>
<div class="paragraph">
<p>The <code>given</code> statement works like a series of if statements that allow you to
match an expression or variable against different values, depending on the
matched value, Perl will execute statements in the corresponding <code>when</code> clause.</p>
</div>
<div class="paragraph">
<div class="title">Pragma for using given statement</div>
<p>Perl introduced the <code>given</code> statement since version 5.10. In order to use the
Perl <code>given</code> statement, you must use the following pragma:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">v5</span><span style="color: #90a959">.10</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Or use the following pragma:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">feature</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">switch</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Perl <strong><em>given</em></strong> Syntax</div>
<p>There are several new keywords introduced along with the <code>given</code> such as:
<code>when</code>, <code>break</code> and <code>continue</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
     <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0">}</span>
     <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0">}</span>
     <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">expr1</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">statement</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0">}</span>
     <span style="color: #d0d0d0">...</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title"><strong><em>given</em></strong> statement in greater detail</div>
<div class="ulist">
<ul>
<li>
<p>Both given and <code>when</code> accept arguments in a scalar context.</p>
</li>
<li>
<p>The type of argument you pass to the <code>given</code> clause determines the kind of
pattern matching that Perl will use to perform matching. If the argument
appears to be a <code>Boolean</code> expression, Perl evaluates it directly. Otherwise,
Perl will use the smart match operator to evaluate the argument, something
like <code>$_ ~~ expr</code></p>
</li>
<li>
<p>To break out a <code>when</code> block, you use the <code>break</code> statement. Perl uses <code>break</code>
statement implicitly for all <code>when</code> blocks so you don’t have to explicitly
specify it.</p>
</li>
<li>
<p>To fall through from one case to the next, you use the <code>continue</code> statement.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="ulist">
<ul>
<li>
<p>From version 5.12 you can use <code>when</code> as a statement modifier.</p>
</li>
<li>
<p>From version 5.14, the <code>given</code> statement returns the last evaluated
expression if no condition is <code>true</code> or the last evaluated expression of the
<code>default</code> clause. The <code>given</code> statement also returns an empty list when the
break statement is encountered or no condition is matched.</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<div class="title"><strong><em>given</em></strong> statement examples</div>
<p>The following program asks the user to input an RGB (red, green, blue) color and returns its color code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">v5</span><span style="color: #90a959">.10</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># at least for Perl 5.10</span>
<span style="color: #505050">#use feature &#34;switch&#34;;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$code</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Please enter a RGB color to get its code:</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;</span><span style="color: #d0d0d0;background-color: #151515">STDIN</span><span style="color: #d0d0d0">&gt;</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0;background-color: #151515">$color</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">uc</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">);</span>

<span style="color: #d0d0d0;background-color: #151515">given</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">){</span>
    <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">RED</span><span style="color: #d0d0d0">&#39;)</span> <span style="color: #d0d0d0">{</span>  <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#FF0000</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">GREEN</span><span style="color: #d0d0d0">&#39;)</span> <span style="color: #d0d0d0">{</span>  <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#00FF00</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">BLUE</span><span style="color: #d0d0d0">&#39;)</span> <span style="color: #d0d0d0">{</span>  <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#0000FF</span><span style="color: #d0d0d0">&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;&#39;;</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span>
<span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">ne</span> <span style="color: #d0d0d0">&#39;&#39;)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">code of </span><span style="color: #8f5536">$color</span><span style="color: #90a959"> is </span><span style="color: #8f5536">$code</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span> <span style="color: #aa759f">else</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$color</span><span style="color: #90a959"> is not RGB color</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">How program works</div>
<div class="ulist">
<ul>
<li>
<p>First, we declared the <code>pragma use v5.10;</code> in order to use the <code>given</code>
statement.</p>
</li>
<li>
<p>Second, we asked the user for a color, we removed the newline by using the
<code>chomp()</code> function and made the input color upper case so that whatever
format of color the user entered is accepted e.g., Red, rEd or RED is the red
color.</p>
</li>
<li>
<p>Third, we used the <code>given</code> statement to check. If no color is found, then we
set the color code to blank in the default clause. Based on the user’s input,
we got the corresponding color code and display it.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p>From Perl version 5.12, you can use the <code>when</code> statement as a statement
modifier like the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#FF0000</span><span style="color: #d0d0d0">&#39;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">RED</span><span style="color: #d0d0d0">&#39;;</span>
    <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#00FF00</span><span style="color: #d0d0d0">&#39;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">GREEN</span><span style="color: #d0d0d0">&#39;;</span>
    <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">#0000FF</span><span style="color: #d0d0d0">&#39;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">BLUE</span><span style="color: #d0d0d0">&#39;;</span>
    <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0;background-color: #151515">$code</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&#39;&#39;;</span> <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In addition, the given statement returns a value that is the result of the last
expression.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">print</span> <span style="color: #aa759f">do</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$color</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">#FF0000</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">RED</span><span style="color: #d0d0d0">&#39;;</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">#00FF00</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">GREEN</span><span style="color: #d0d0d0">&#39;;</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">#0000FF</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span> <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">BLUE</span><span style="color: #d0d0d0">&#39;;</span>
        <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0">&#39;&#39;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>More complex example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">v5</span><span style="color: #90a959">.12</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#39;</span><span style="color: #90a959">Enter something: </span><span style="color: #d0d0d0">&#39;;</span>
<span style="color: #d0d0d0;background-color: #151515">chomp</span><span style="color: #d0d0d0">(</span> <span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$input</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;&gt;</span> <span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span> <span style="color: #aa759f">do</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">given</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$input</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The input has numbers</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span>  <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #75b5aa">/\d/</span><span style="color: #d0d0d0">;</span>
        <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The input has letters</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;</span>  <span style="color: #d0d0d0;background-color: #151515">when</span> <span style="color: #75b5aa">/[a-zA-Z]/</span><span style="color: #d0d0d0">;</span>
        <span style="color: #d0d0d0;background-color: #151515">default</span> <span style="color: #d0d0d0">{</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">The input has neither number nor letter</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span> <span style="color: #d0d0d0">}</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">How the program works</div>
<div class="ulist">
<ul>
<li>
<p>The program asks the user to enter anything that can be numbers, letters, or
both.</p>
</li>
<li>
<p>In the <code>when</code> clause, we used a very special expression that is known as a
regular expression. The <code>/\d/</code> matches any string that contains only numbers,
The <code>/[a-zA-Z]/</code> expression matches the string that contains only letters. In
this case, the <code>given</code> statement can do more advanced matches.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_for_loop">13. <strong><em>for</em></strong> Loop</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl for loop statement to loop over elements of a list.</p>
</div>
<div class="paragraph">
<div class="title"><strong><em>for</em></strong> and <strong><em>foreach</em></strong> statements</div>
<p>The Perl <code>for</code> loop statement allows you to loop over elements of a list. In
each iteration, you can process each element of the list separately. This is
why the <code>for</code> loop statement is sometimes referred to as <code>foreach</code> loop.</p>
</div>
<div class="paragraph">
<p>In Perl, the <code>for</code> and <code>foreach</code> loop are interchangeable, therefore, you can
use the <code>foreach</code> keyword in where you use the <code>for</code> keyword.</p>
</div>
<div class="listingblock">
<div class="title">Loop over elements of an array</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$_</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, we defined an array of 9 integers <code>@a</code></p>
</li>
<li>
<p>Second, we used <code>for</code> loop statement to loop over elements of the <code>@a</code> array.</p>
</li>
<li>
<p>Third, inside the loop, we displayed element’s value using default variable
<code>$_</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you replace the <code>for</code> keyword by the <code>foreach</code> keyword in the above example,
it works the same.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">foreach</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$_</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>for</em></strong> loop iterator</div>
<p>If we don’t supply an explicit iterator to the loop, Perl will use a special
variable called default variable with the name <code>$_</code> as the iterator. In each
iteration, Perl assigns each element of the array <code>@a</code> to the default variable
<code>$_</code>.</p>
</div>
<div class="paragraph">
<div class="title">Explicit Perl for loop iterator</div>
<p>If you want to specify an explicit iterator for the loop, you can declare it in
the <code>for</code> loop statement as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$i</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>$i</code> is the iterator of the <code>for</code> loop in this example. In each iteration, Perl
assigns the corresponding element of the array to the <code>$i</code> iterator. Notice
that the <code>$i</code> variable exists only during the execution of the loop.</p>
</div>
<div class="paragraph">
<p>If you declare an iterator before entering the loop, Perl will restore its
original value after the loop is terminated. Take a look at the following
example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">20</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">for</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@a</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$i</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#39;</span><span style="color: #90a959">iterator $i is </span><span style="color: #d0d0d0">&#39;,&#34;</span><span style="color: #8f5536">$i</span><span style="color: #d0d0d0">&#34;,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span> <span style="color: #505050"># 20</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, we declared variable <code>$i</code> before the loop and initialized its value to
<code>20</code>.</p>
</li>
<li>
<p>Second, we used a variable <code>$i</code> as the iterator; its value changes in each
iteration of the loop.</p>
</li>
<li>
<p>Third, after the loop, we displayed the value of <code>$i</code>. Perl restored its
original value, which is <code>20</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Perl for loop iterator: value or alias</div>
<p>In each iteration of the loop, Perl creates an alias instead of a value. In
other words, if you make any changes to the iterator, the changes also reflect
in the elements of the array. See the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@b</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">);</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Before the loop: </span><span style="color: #8f5536">@b</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>

<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@b</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">$_</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">$_</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">After the loop: </span><span style="color: #8f5536">@b</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, we declared an array <code>@b</code> with 5 elements from 1 to 5. We displayed
the array <code>@b</code> elements using <code>print</code> function</p>
</li>
<li>
<p>Second, we iterated elements of the array. We multiplied each element with
<code>2</code> through the iterator <code>$_</code></p>
</li>
<li>
<p>Third, outside of the loop, we displayed the elements of the array again</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">C-style <strong><em>for</em></strong> loop</div>
<p>Perl also supports for loop in C-style. However, it is not a good practice to
use the C-style for loop because to code will become less readable.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">initialization</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">test</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">step</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #75b5aa">//</span> <span style="color: #d0d0d0;background-color: #151515">code</span> <span style="color: #d0d0d0;background-color: #151515">block</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">There are three control parts:</div>
<ul>
<li>
<p>Initialization. Perl executes the initialization once when the loop is
entered. We often use initialization to initialize a loop counter variable.</p>
</li>
<li>
<p>Test. Perl evaluates the <code>test</code> expression at the beginning of each iteration
and executes the code block inside the loop body as long as the test
expression evaluates to false.</p>
</li>
<li>
<p>Step. Perl executes <code>step</code> at the end of each iteration. You often use the
step to modify the loop counter.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">C-style for loop:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">&lt;=</span> <span style="color: #d0d0d0;background-color: #151515">$#c</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">$i</span><span style="color: #d0d0d0">++</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$c</span><span style="color: #90a959">[</span><span style="color: #8f5536">$i</span><span style="color: #90a959">] </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>It is much more readable if you Perl’s for loop style</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">..</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">);</span>
<span style="color: #aa759f">for</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@c</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$_</span><span style="color: #90a959"> </span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_while_loop_statement">14. <strong><em>while</em></strong> loop statement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Perl <code>while</code> loop statement executes a code block repeatedly as long as the
test condition remains <code>true</code>. The test condition is checked at the beginning
of each iteration.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #aa759f">while</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">condition</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #505050"># code block</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If the <code>condition</code> evaluates to <code>true</code>, the code block inside <code>while</code> loop
executes.</p>
</div>
<div class="paragraph">
<p>At the beginning of each iteration, the <code>condition</code> is reevaluated. The loop is
terminated if the <code>condition</code> evaluates to <code>false</code>.</p>
</div>
<div class="paragraph">
<p>At some point in the loop, you have to change some variables that make the
condition <code>false</code> to stop the loop. Otherwise, you will have an indefinite loop
that makes your program execute until the stack overflow error occurs.</p>
</div>
<div class="paragraph">
<p>The <code>while</code> loop statement has an optional block: <code>continue</code>, which executes
after each current iteration. In practice, the <code>continue</code> block is rarely used.</p>
</div>
<div class="paragraph">
<p>If you want to execute a code block as long as the condition is <code>false</code>, you
can use <code>until</code> statement.</p>
</div>
<div class="paragraph">
<p>In case you want to check the condition at the end of each iteration, you use
the <code>do…​while</code> or <code>do…​until</code> statement instead.</p>
</div>
<div class="paragraph">
<p>To control the loop, you use the <code>next</code> and <code>last</code> statements.</p>
</div>
<div class="paragraph">
<div class="title">Example</div>
<p>Happy New Year Count Down program</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/env perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">while</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #8f5536">$counter</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
    <span style="color: #d0d0d0;background-color: #151515">$counter</span><span style="color: #d0d0d0">--</span><span style="color: #d0d0d0">;</span> <span style="color: #505050"># count down</span>
    <span style="color: #d0d0d0;background-color: #151515">sleep</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">);</span>   <span style="color: #505050"># pause program for 1 second</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$counter</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">Happy New Year!</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;);</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Let’s examine the code above in more detail</div>
<div class="ulist">
<ul>
<li>
<p>First, declare a <code>$counter</code> variable and set its value to <code>10</code>.</p>
</li>
<li>
<p>Next, put a condition to make sure that the value of <code>$counter</code> is greater
than zero before entering into the loop.</p>
</li>
<li>
<p>Then, displayed the <code>$counter</code> and decreased its current value of one. We
used the <code>sleep()</code> function to pause the program for a second in each
iteration.</p>
</li>
<li>
<p>After that, use the <em>if statement</em> to check if <code>$counter</code> is zero to print
the “Happy New Year” message. The code block inside the loop executes 10
times before the <code>$counter</code> is set to zero.</p>
</li>
<li>
<p>Finally, after each iteration, the <code>$counter</code> decreases, and its value is set
to zero at the 10th iteration. Perl terminated the loop.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<div class="title"><strong><em>while loop</em></strong> with diamond operator <strong><code>&lt;&gt;</code></strong></div>
<p>You often use the while loop statement with the diamond operator <code>&lt;&gt;</code> to get
the user’s input from the command line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$num</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">@numbers</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">();</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">Enter numbers, each per line :</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span>
<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">ctrl-z (windows) or ctrl-d(Linux) to exit</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&gt;</span><span style="color: #d0d0d0">&#34;;</span>

<span style="color: #aa759f">while</span><span style="color: #d0d0d0">(</span><span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$input</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">&lt;&gt;</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">print</span><span style="color: #d0d0d0">(&#34;</span><span style="color: #90a959">&gt;</span><span style="color: #d0d0d0">&#34;);</span>
    <span style="color: #d0d0d0;background-color: #151515">chomp</span> <span style="color: #d0d0d0;background-color: #151515">$input</span><span style="color: #d0d0d0">;</span>
    <span style="color: #d0d0d0;background-color: #151515">$num</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">int</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$input</span><span style="color: #d0d0d0">);</span>
    <span style="color: #d0d0d0;background-color: #151515">push</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">@numbers</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">$num</span><span style="color: #d0d0d0">);</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">print</span> <span style="color: #d0d0d0">&#34;</span><span style="color: #90a959">You entered: </span><span style="color: #8f5536">@numbers</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;;</span></code></pre>
</div>
</div>
<div class="ulist">
<div class="title">How it works</div>
<ul>
<li>
<p>First, assign the user’s input to the <code>$input</code> variable using the diamond
operator (<code>&lt;&gt;</code>). Because it doesn’t specify any filehandle for the diamond
operator, Perl checks the special array <code>@ARGV</code>, which is empty in this case,
hence instructs the diamond operator to read from <code>STDIN</code> i.e., from the
keyboard.</p>
</li>
<li>
<p>Second, remove the newline character from the <code>$input</code> variable using the
<code>chomp()</code> function and convert <code>$input</code> to an integer.</p>
</li>
<li>
<p>Third, add the integer into the <code>@number</code> array.</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title"><strong><em>while loop</em></strong> statement modifier</div>
<p>let’s take a look at the following example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="perl"><span style="color: #505050">#!/usr/bin/perl</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">warnings</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">use</span> <span style="color: #d0d0d0;background-color: #151515">strict</span><span style="color: #d0d0d0">;</span>

<span style="color: #aa759f">my</span> <span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">5</span><span style="color: #d0d0d0">;</span>
<span style="color: #aa759f">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$i</span><span style="color: #d0d0d0">--</span><span style="color: #d0d0d0">,&#34;</span><span style="color: #8f5536">\n</span><span style="color: #d0d0d0">&#34;)</span> <span style="color: #aa759f">while</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">$i</span> <span style="color: #d0d0d0">&gt;</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">);</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>while</code> loop statement is placed after another statement.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p><strong>Perl evaluates the statements from right to left</strong>.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>It means that Perl evaluates the condition in the <code>while</code> statement at the
beginning of each iteration.</p>
</div>
<div class="paragraph">
<p>You use the <code>while</code> loop statement modifier only if you have one statement to
execute repeatedly based on a condition like the above example.</p>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Vim</title>
      <link>https://hossein-lap.github.io/docs/vim/</link>
      <pubDate>Sun, 14 Jul 2024 14:42:49 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/vim/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_simulating_vim_on_the_page">1. Simulating Vim on the Page</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code>ctrl</code>-<code>s</code> is a common convention for representing chordal commands. It means
&#34;Press the Control key and the <code>s</code> key at the same time.&#34; But this convention
isn’t well suited to describing Vim’s modal command set.</p>
</div>
<div class="sect2">
<h3 id="_playing_melodies">1.1. Playing Melodies</h3>
<div class="paragraph">
<p>In Normal mode, we compose commands by typing one or more keystrokes in
sequence. There commands appear as follows:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Notation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Meaning</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>x</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>x</code> once</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>dw</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">In sequence, pres <code>d</code>, then <code>w</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>dap</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">In sequence, pres <code>d</code>, <code>a</code>, then <code>p</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Most of these sequences involve two or three keystrokes, but some are longer.
Deciphering the meaning of Vim’s Normal mode command sequences can be
challenging, but you’ll get better at it with practice.</p>
</div>
</div>
<div class="sect2">
<h3 id="_playing_chords">1.2. Playing Chords</h3>
<div class="paragraph">
<p>When you see a keystroke such as <code>&lt;C-p&gt;</code>, it doesn’t mean &#34;Press <code>&lt;</code>, then <code>C</code>,
then <code>-</code>, and so on.&#34; The <code>&lt;C-p&gt;</code> notation is equivalent to <code>Ctrl</code>-<code>p</code>, which
means &#34;Press the <code>Ctrl</code> and <code>p</code> keys at the same time&#34;
Some of Vim’s commands are formed by combining chords and keystrokes in
sequence, and this notation handles them well. Consider these examples:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Notation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Meaning</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;C-n&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>&lt;Ctrl&gt;</code> and <code>n</code> at the same time</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>g&lt;C-]&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>g</code>, followed by <code>&lt;Ctrl&gt;</code> and <code>]</code> at the same time</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;C-r&gt;0</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>&lt;Ctrl&gt;</code> and <code>r</code> at the same tile, then <code>0</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;C-w&gt;&lt;C-=&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>&lt;Ctrl&gt;</code> and <code>w</code> at the same time, then <code>&lt;Ctrl&gt;</code> and <code>=</code> at the same time</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_placeholders">1.3. Placeholders</h3>
<div class="paragraph">
<p>Some commands must be followed by a particular kind of keystroke, while other
command can be followed by any key on the keyboard. I use curly braces to
denote the set of valid keystrokes that can follow a command.</p>
</div>
<div class="paragraph">
<p>Here are some examples:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Notation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Meaning</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>f{char}</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>f</code>, followed by any other character</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>`{a-z}</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>`</code>, followed by any lowercase letter</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>m{a-zA-Z}</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>m</code>, followed by any lowercase or upper case letter</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>d{motion}</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>d</code>, followed by any motion command</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;C-r&gt;{register}</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press <code>&lt;Ctrl&gt;</code> and <code>r</code> at the same time, followed by the address of a
  register</p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_showing_special_keys">1.4. Showing Special Keys</h3>
<div class="paragraph">
<p>Some keys are called by name. This table shows a selection of them:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Notation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Meaning</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;Esc&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the Escape key</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;CR&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the carriage return key (aka <code>&lt;Enter&gt;</code>)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;Ctrl&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the Control key</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;Tab&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the Tab key</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;Shift&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the Shift key</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;S-Tab&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the <code>&lt;Shift&gt;</code> and <code>&lt;Tab&gt;</code> key at the same time</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;Up&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the up-arrow key</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>&lt;Down&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the down-arrow key</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code> </code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Press the space bar</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Note that the space bar is represented as <code> </code>. This could be combined with the
<code>f{char}</code> command to form <code>f </code>.</p>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Grafana</title>
      <link>https://hossein-lap.github.io/notes/grafana/</link>
      <pubDate>Sat, 06 Jul 2024 13:24:36 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/grafana/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_grafana_stack">1. Grafana stack</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Grafana offers many tools, which we’ve grouped into the following categories:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The core Grafana stack: <strong>LGTM</strong> and the <strong>Grafana Agent</strong></p>
</li>
<li>
<p>Grafana enterprise plugins</p>
</li>
<li>
<p>Incident response tools</p>
</li>
<li>
<p>Other Grafana tools</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_the_core_grafana_stack">1.1. The core Grafana stack</h3>
<div class="paragraph">
<p>The core Grafana stack consists of <strong>Mimir</strong>, <strong>Loki</strong>, <strong>Tempo</strong>, and <strong>Grafana</strong>; the
acronym <strong>LGTM</strong> is often used to refer to this tech stack.</p>
</div>
<div class="paragraph">
<div class="title">Mimir</div>
<p>Mimir is a <strong>Time Series Database</strong> (<strong>TSDB</strong>) for the storage of metric data. It
uses low-cost object storage such as S3, GCS, or Azure Blob Storage.
Mimir is a fully Prometheus-compatible solution that addresses the common
scalability problems encountered with storing and searching huge quantities of
metric data.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>An active time series is a metric with a value and unique labels that has
reported a sample in the last 20 minutes.</p>
</div>
</div>
</div>
<div class="paragraph">
<div class="title">Loki</div>
<p>Loki is a set of components that offer a full feature logging stack. Loki uses
lower-cost object storage such as S3 or GCS, and only indexes label metadata.</p>
</div>
<div class="paragraph">
<p>Log aggregation tools typically use two data structures to store log data. An
index that contains references to the location of the raw data paired with
searchable metadata, and the raw data itself stored in a compressed form.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>Loki differs from a lot of other log aggregation tools by keeping the index
data relatively small and scaling the search functionality by using horizontal
scaling of the querying component.</p>
</div>
</div>
</div>
<div class="paragraph">
<div class="title">Tempo</div>
<p>Tempo is a storage backend for high-scale distributed trace telemetry, with the
aim of sampling 100% of the read path. Like Loki and Mimir, it leverages
lower-cost object storage such as S3, GCS, or Azure Blob Storage.</p>
</div>
<div class="paragraph">
<p>Tempo also offers the ability to generate metrics from spans as they are
ingested; these metrics can be written to any backend that supports Prometheus
remote write.</p>
</div>
<div class="paragraph">
<div class="title">Grafana</div>
<p>Grafana has been a staple for fantastic visualization of data since 2014. It
has targeted the ability to connect to a huge variety of data sources from
TSDBs to relational databases and even other observability tools. Grafana has
over 150 data source plugins available. Grafana has a huge community using it
for many different purposes. This community supports over 6,000 dashboards,
which means there is a starting place for most available technologies with
minimal time to value.</p>
</div>
<div class="paragraph">
<div class="title">Grafana Agent</div>
<p>Grafana Agent is a collection of tools for collecting logs, metrics, and
traces. There are many other collection tools that Grafana integrates well
with.</p>
</div>
</div>
<div class="sect2">
<h3 id="_grafana_enterprise_plugins">1.2. Grafana Enterprise plugins</h3>
<div class="paragraph">
<p>These are part of any paid subscription to Grafana.</p>
</div>
<div class="paragraph">
<p>The Enterprise data source plugins allow organizations to read data from many
other storage tools they may use, from software development tools such as <strong>GitLab</strong>
and <strong>Azure DevOps</strong> to business intelligence tools such as <strong>Snowflake</strong>,
<strong>Databricks</strong>, and <strong>Looker</strong>. Grafana also offers tools to read data from many
other observability tools, which enables organizations to build comprehensive
operational coverage while offering individual teams a choice of the tools they
use.</p>
</div>
</div>
<div class="sect2">
<h3 id="_grafana_incident_response_and_management">1.3. Grafana incident response and management</h3>
<div class="paragraph">
<p>Grafana offers three products in the <strong>incident response and management</strong> (<strong>IRM</strong>)
space:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>At the foundation of IRM are <strong>alerting rules</strong>, which can notify via messaging
apps, email, or Grafana OnCall</p>
</li>
<li>
<p><strong>Grafana OnCall</strong> offers an on-call schedule management system that
centralizes alert grouping and escalation routing</p>
</li>
<li>
<p><strong>Grafana Incident</strong> offers a chatbot functionality that can set up necessary
incident spaces, collect timelines for a post-incident review process, and
even manage the incident directly from a messaging service</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_other_grafana_tools">1.4. Other Grafana tools</h3>
<div class="paragraph">
<p>Grafana Labs continues to be a leader in observability and has acquired several
companies in this space to release new products that complement the tools we’ve
already discussed.</p>
</div>
<div class="paragraph">
<div class="title">Faro</div>
<p><strong>Grafana Faro</strong> is a JavaScript agent that can be added to frontend web
applications. The project allows for <strong>real user monitoring</strong> (<strong>RUM</strong>) by
collecting telemetry from a browser.</p>
</div>
<div class="paragraph">
<p>By adding RUM into an environment where backend applications and infrastructure
are instrumented, observers gain the ability to traverse data from the full
application stack.</p>
</div>
<div class="paragraph">
<div class="title">k6</div>
<p><strong>k6</strong> is a load testing tool that provides both a packaged tool to run in your
own infrastructure and a cloud <strong>Software as a Service</strong> (<strong>SaaS</strong>) offering. Load
testing, especially as part of a CI/CD pipeline, really enables teams to see
how their application will perform under load, and evaluate optimizations and
refactoring. Paired with other detailed analysis tools such as Pyroscope, the
level of visibility and accessibility to non-technical members of the team can
be astounding.</p>
</div>
<div class="paragraph">
<div class="title">Pyroscope</div>
<p><strong>Pyroscope</strong> is a tool that enable teams to engage in the continuous profiling
of system resource use by applications (CPU, memory, etc.). Pyroscope
advertises that with a minimal overhead of ~2-5% of performance, they can
collect samples as frequently as every 10 seconds. <strong>Phlare</strong> is a Grafana Labs
project started in 2022, and the two projects have now merged.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_common_log_formats">2. Common log formats</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Logs support performance and capacity monitoring in infrastructure, bug
detection in software, root cause analysis, user behavior tracking, and more.
Following certain guidelines will help your future self when you need to
analyze logs.</p>
</div>
<div class="paragraph">
<p>Log formats usually identify if they are structured or unstructured, the data
types used in them, and if any encoding or delimitation is being used.</p>
</div>
<div class="sect2">
<h3 id="_structured_semi_structured_and_unstructured_logging">2.1. Structured, semi-structured, and unstructured logging</h3>
<div class="paragraph">
<p>It does not matter what your logs look like and they can come in structured,
semi-structured, or unstructured formats.</p>
</div>
<div class="paragraph">
<p>when designing and building observability solutions, it’s important to
understand the log formats you are working with. This ensures that you can
ingest, parse, and store the data in a way that it can be used effectively.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>If you familiarized yourself with the <em>personas</em>, you have an awareness of who
they will be used by and for what purpose.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_structured_logging">2.1.1. Structured logging</h4>
<div class="paragraph">
<p><strong>Structured logs</strong> have a predetermined message format that allows them to be
treated as datasets rather than text. The idea of structured logging is to
present data with a defined pattern that can be easily understood by humans and
efficiently processed by machines. The log entries are often delimited with
characters such as a comma, space, or hyphen. Data fields may also be joined
using an equals sign or colon for key-value pairs, such as <code>name=Diego</code> or
<code>city=Berlin</code>.</p>
</div>
<div class="literalblock">
<div class="title">A structured log format</div>
<div class="content">
<pre>{
&#34;timestamp&#34;: &#34;2023-04-25T12:15:03.006Z&#34;,
&#34;message&#34;: &#34;User Diego.Developer has logged in&#34;,
&#34;log&#34;: {
&#34;level&#34;: &#34;info&#34;,
&#34;file&#34;: &#34;auth.py&#34;,
&#34;line&#34;: 77
},
&#34;user&#34;: {
&#34;name&#34;: &#34;diego.developer&#34;,
&#34;id&#34;: 123
},
&#34;event&#34;: {
&#34;success&#34;: true
}
}</pre>
</div>
</div>
<div class="paragraph">
<p>An additional benefit of structured logging is that you can validate the
conformation of the data to a schema with tools such as JSON schema. This opens
up the possibility of making version control changes to the schema, which is
where logs and event bus technology overlap.</p>
</div>
</div>
<div class="sect3">
<h4 id="_semi_structured_logging">2.1.2. Semi-structured logging</h4>
<div class="paragraph">
<p><strong>Semi-structured</strong> logs aim to bridge the gap between unstructured and structured
and, as a result, can be quite complicated. They are designed to be easy for
humans to read but also have a schema that makes it possible for machines to
process them too. They have complex field and event separators and usually come
with a defined pattern to aid with ingesting and parsing. Parsing is usually
done using regular expressions or other code.</p>
</div>
</div>
<div class="sect3">
<h4 id="_unstructured_logging">2.1.3. Unstructured logging</h4>
<div class="paragraph">
<p><strong>Unstructured logging</strong> typically refers to log entries that are presented in a
textual format that can easily be read by humans but is difficult for machines
to process. They are often color-coded with blank spaces to improve
presentation and readability.</p>
</div>
<div class="paragraph">
<p>Parsing and splitting the data correctly creates a disassociation between
events and their identifying metadata. An unstructured log will require some
custom parsing, requiring intimate knowledge of the data and often creating
additional work for the engineer when ingesting data. This also creates
technical liability; the dependency on the log remaining the same restricts
developers from changing logs or runs the risk of parsing and reporting on
unstructured logs prone to breaking.</p>
</div>
<div class="paragraph">
<p>To aid the ability of machines to process unstructured logs, encapsulation
prevents entries such as stack traces from splitting at an inappropriate
location.</p>
</div>
<div class="paragraph">
<p>The following is an example of a multiline log, with a naive encapsulation that
looks for line breaks; this will appear in logging systems as four distinct
events:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>2023-04-25 12:15:03,006 INFO [SVR042] UserMembershipsIterable Found 4
children for 4 groups in 3 ms
Begin Transaction update record.
Process started.
Process completed.</pre>
</div>
</div>
<div class="paragraph">
<p>With encapsulation based on the timestamp at the start of the event, this will
be stored correctly for searching.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_sample_log_formats">2.2. Sample log formats</h3>
<div class="paragraph">
<p>Many log formats have been used in computer systems. All of these formats have
a common goal of presenting a standard structure or set of fields for recording
important information about the activity of a computer system.</p>
</div>
<div class="sect3">
<h4 id="_common_event_format_cef">2.2.1. Common Event Format (CEF)</h4>
<div class="paragraph">
<p>Developed by ArcSight to fulfill the <strong>Security Information and Event Management</strong>
(SIEM) use case, the CEF is a structured text-based log format. Using UTF-8
encoding, the format contains a prefix, a CEF header, and a body containing
additional enrichment data.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Log Section</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Prefix</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">It combines the event timestamp and source hostname</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">CEF header</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>It combines the following pieces of metadata:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Software version</p>
</li>
<li>
<p>Vendor name</p>
</li>
<li>
<p>Product name</p>
</li>
<li>
<p>Product version</p>
</li>
<li>
<p>Event name</p>
</li>
<li>
<p>Product event class identification code</p>
</li>
<li>
<p>Event severity</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Body</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">It contains a list of key-value pairs</p></td>
</tr>
</tbody>
</table>
<div class="literalblock">
<div class="title">Example</div>
<div class="content">
<pre>CEF:0|Security Provider|Security Product|Version|123|User
Authenticated|3|src=10.51.113.149 suser=diego target=diego msg=User
authenticated from 1001:db7::5</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_ncsa_common_log_format_clf">2.2.2. NCSA Common Log Format (CLF)</h4>
<div class="paragraph">
<p>As one of the oldest log formats used by web servers, the NCSA CLF has for a
long time been the most common and well-known log formats. It has a fixed
format text-based structure and therefore cannot be customized at all.</p>
</div>
<div class="ulist">
<div class="title">Here is the NCSA CLF field list:</div>
<ul>
<li>
<p>Remote host address</p>
</li>
<li>
<p>Remote log name</p>
</li>
<li>
<p>Username</p>
</li>
<li>
<p>Timestamp</p>
</li>
<li>
<p>Request and protocol version</p>
</li>
<li>
<p>HTTP status code</p>
</li>
<li>
<p>Bytes sento</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Where data is missing from the log, a hyphen acts as a placeholder. Unsupported
characters are replaced with the + symbol.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example NCSA CLF log:</div>
<div class="content">
<pre>127.0.0.1 user-identifier diego [25/Apr/2023:12:15:03 -0000] &#34;GET /
apache_pb.gif HTTP/1.1&#34; 200 2326</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_w3c_extended_log_file_format">2.2.3. W3C Extended Log File Format</h4>
<div class="paragraph">
<p>The Microsoft Internet Information Server log format known as W3C is a
structured yet configurable format. Full control over the included fields
ensures log files contain the most relevant data. Identification of the
information or direction of flow is denoted using a string prefix: server (S),
client ©, server to client (SC), and client to server (CS).</p>
</div>
<div class="ulist">
<div class="title">Here is the W3C Extended Log File Format field list:</div>
<ul>
<li>
<p>Timestamp</p>
</li>
<li>
<p>Client IP</p>
</li>
<li>
<p>Server IP</p>
</li>
<li>
<p>URI-stem</p>
</li>
<li>
<p>HTTP status code</p>
</li>
<li>
<p>Bytes sent</p>
</li>
<li>
<p>Bytes received</p>
</li>
<li>
<p>Time taken</p>
</li>
<li>
<p>Version</p>
</li>
</ul>
</div>
<div class="literalblock">
<div class="title">Here is an example W3C log:</div>
<div class="content">
<pre>#Software: Internet Information Services 10.0
#Version: 1.0
#Date: 2023-04-25 12:15:03
#Fields: time c-ip cs-method cs-uri-stem sc-status cs-version
12:15:03 10.51.113.149 GET /home.htm 200 HTTP/1.0</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_windows_event_log">2.2.4. Windows Event Log</h4>
<div class="paragraph">
<p>The Microsoft Windows operating system comes with a built-in complex structured
logging system that captures data related to specific events on the operating
system. There are four common Windows event log categories - system,
application, security, and setup - and an additional special category for
forwarded events.</p>
</div>
<div class="paragraph">
<p>Each event log is also one of five different types: information, warning,
error, success audit, and failure audit. Windows Event Log is one of the most
verbose log formats in use. It usually includes details such as timestamp,
event ID, username, hostname, message, and category, making it invaluable in
diagnosing problems. Windows event IDs are documented and searchable, so you
can easily get detailed information regarding the log event; they are grouped
into categories, narrowing down the area where the event occurred, which makes
debugging very accurate.</p>
</div>
<div class="literalblock">
<div class="title">Here is a trimmed example of Microsoft Windows Event Log:</div>
<div class="content">
<pre>An account was successfully logged on.
Subject:
Security ID: SYSTEM
Account Name: DESKTOP-TMC369$
Account Domain: WORKGROUP
Logon ID: 0xE37
Logon Information:
New Logon:
Security ID: AD\DiegoDeveloper
Account Name: diego.developer@themelt.cafe
Account Domain: AD
Logon ID: 0xEC4093F
Network Information:
Workstation Name: DESKTOP-TMC369</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_javascript_object_notation_json">2.2.5. JavaScript Object Notation (JSON)</h4>
<div class="paragraph">
<p>As one of the newer yet most commonly used log formats today, JSON is a
structured format constructed from multiple key-value pairs. Using JSON, data
can be nested into different layers while keeping the format easy to read.
Additionally, different data types can be represented, such as string, number,
Boolean, null, object, and array.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example JSON log file:</div>
<div class="content">
<pre>{
&#34;timestamp&#34;: &#34;2023-04-25T12:15:03.006Z&#34;,
&#34;message&#34;: &#34;User Diego.Developer has logged in&#34;,
&#34;log&#34;: {
&#34;level&#34;: &#34;info&#34;,
&#34;file&#34;: &#34;auth.py&#34;,
&#34;line&#34;: 77
},
&#34;user&#34;: {
&#34;name&#34;: &#34;diego.developer&#34;,
&#34;id&#34;: 123
},
&#34;event&#34;: {
&#34;success&#34;: true
}
}</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_syslog">2.2.6. Syslog</h4>
<div class="paragraph">
<p>The go-to log format for many years and still widely used, Syslog is a defined
standard for creating and transmitting logs. The <strong>Syslog transport protocol</strong>
specifies how log transmission takes place, as well as the data format. The
default network ports for the protocol are <code>514</code> and <code>6514</code>, with the latter
being used for encryption.</p>
</div>
<div class="paragraph">
<p>The Syslog message format combines a standardized header and message holding
the body of the log.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example Syslog log:</div>
<div class="content">
<pre>Apr 25 12:15:03 server1 sshd[41458] : Failed password for  diego from
10.51.113.149 port 22 ssh2</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_logfmt">2.2.7. Logfmt</h4>
<div class="paragraph">
<p>Logfmt is a widely used log format that fits as human readable and structured
so that computers and people can both read it. A Logfmt-formatted log line
consists of any number of key-value pairs that can be easily parsed. As there
are no standards, it is easy to extend and perfect for developers to simply add
more key-value pairs to the output.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example Logfmt log:</div>
<div class="content">
<pre>level=info method=GET path=/ host=myserver.me fwd=&#34;10.51.113.149&#34;
service=4ms status=200</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exploring_metric_types_and_best_practices">3. Exploring metric types and best practices</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Metrics, along with logs, are an essential tool for software developers and
operators, providing them with indicators regarding the state of applications
and systems. Resource usage data is great for monitoring a metric that captures
numerical data over time. There are many different types of resources but some
good examples would be CPU or RAM usage, the number of messages in a queue, and
the number of received HTTP requests. Metrics are frequently generated and
easily enriched with labels, attributes, or dimensions, making them efficient
to search and ideal in determining if something is wrong, or different from
usual.</p>
</div>
<div class="ulist">
<div class="title">A metric commonly has the following fields:</div>
<ul>
<li>
<p><strong>Name</strong>: This uniquely identifies the metric</p>
</li>
<li>
<p><strong>Data point value(s)</strong>: The data that’s stored varies by metric type</p>
</li>
<li>
<p><strong>Dimensions</strong>: Additional enrichment labels or attributes that support analysis</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_wip">3.1. WIP</h3>

</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Accessing K8S pods</title>
      <link>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</link>
      <pubDate>Fri, 31 May 2024 18:50:32 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><a href="/pdfs/notes/k8s-ingress-loadbalancer.pdf">Download this note as a PDF</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_forwarding_a_local_network_port_to_a_port_in_the_pod">1. Forwarding a Local Network Port to a Port in The Pod</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you want to talk to a specific pod without going through a service (for
debugging or other reasons), Kubernetes allows you to configure port forwarding
to the pod.</p>
</div>
<div class="paragraph">
<p>This is done through the <code>kubectl port-forward</code> command. The following command
will forward your machine’s local port <code>8888</code> to port <code>8080</code> of your
e.g <code>kubia-manual</code> pod.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl port-forward kubia-manual 8888:8080</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>... Forwarding from 127.0.0.1:8888 -&gt; 8080
... Forwarding from [::1]:8888 -&gt; 8080</pre>
</div>
</div>
<div class="sect2">
<h3 id="_connecting_to_the_pod_through_the_port_forwarder">1.1. Connecting to The Pod Through the Port Forwarder</h3>
<div class="paragraph">
<p>In a different terminal, you can now use curl to send an HTTP request to your pod
through the <code>kubectl port-forward</code> proxy running on <code>localhost:8888</code>.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>curl localhost:8888</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-manual</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_service_object">2. Service Object</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each pod gets its own IP address, but this address is internal to the cluster
and isn’t accessible from outside of it. To make the pod accessible from the
outside, you’ll expose it through a Service object. You’ll create a special
service of type <code>LoadBalancer</code>, because if you create a regular service (a
<code>ClusterIP</code> service), like the pod, it would also only be accessible from
inside the cluster. By creating a <code>LoadBalancer</code> type service, an external load
balancer will be created and you can connect to the pod through the load
balancer’s public IP.</p>
</div>
<div class="sect2">
<h3 id="_creating_a_service_object">2.1. Creating a Service Object</h3>
<div class="paragraph">
<p>To create the service, you’ll tell Kubernetes to expose the ReplicationController you
created:</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using YAML file</div>
<div class="listingblock">
<div class="title">Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span> <span style="color: #505050"># service&#39;s port</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span> <span style="color: #505050"># the forward-to port by service</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span> <span style="color: #505050"># all pods labeled `kubia` will follow/select this service</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Apply the service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl create <span style="color: #f4bf75">-f</span> kubia-srv.yaml</code></pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using kubectl CLI options</div>
<div class="listingblock">
<div class="title">Template:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl expose rc &lt;rep-controller-name&gt; <span style="color: #f4bf75">--type</span><span style="color: #d0d0d0">=</span>LoadBalancer <span style="color: #f4bf75">--name</span> &lt;lb-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Expose:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl expose rc kubia <span style="color: #f4bf75">--type</span><span style="color: #d0d0d0">=</span>LoadBalancer <span style="color: #f4bf75">--name</span> kubia-http</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>service &#34;kubia-http&#34; exposed</pre>
</div>
</div>
</div>
</div>
<div class="ulist">
<div class="title">Remotely Executing Commands in Running Containers:</div>
<ul>
<li>
<p>You’ll also need to obtain the cluster IP of your service
(using <code>kubectl get svc</code>, for example)</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl <span style="color: #d0d0d0;background-color: #151515">exec </span>kubia-7nog1 <span style="color: #f4bf75">--</span> curl <span style="color: #f4bf75">-s</span> http://10.111.249.153</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-gzwli</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_session_affinity_on_the_service">2.2. Session Affinity on the Service</h3>
<div class="paragraph">
<p>If you execute the same command a few more times, you should hit a different
pod with every invocation, because the service proxy normally forwards each
connection to a randomly selected backing pod, even if the connections are
coming from the same client.</p>
</div>
<div class="paragraph">
<p>If, on the other hand, you want all requests made by a certain client to be
redirected to the same pod every time, you can set the service’s
<code>sessionAffinity</code> property to <code>ClientIP</code> (instead of <code>None</code>, which is the
default), as shown in the following listing.</p>
</div>
<div class="listingblock">
<div class="title">Service with <code>ClientIP</code> Session Affinity Manifest</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">sessionAffinity</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">ClientIP</span>
  <span style="color: #90a959">...</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Kubernetes supports only two types of service session affinity: <code>None</code> and
<code>ClientIP</code>.</p>
</li>
<li>
<p>Kubernetes services don’t operate at the HTTP level. Services deal with TCP
and UDP packets and don’t care about the payload they carry. Because cookies
are a construct of the HTTP protocol, services don’t know about them, which
explains why session affinity cannot be based on cookies.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_ports_in_the_same_service">2.3. Exposing Multiple Ports in the Same Service</h3>
<div class="listingblock">
<div class="title">Manifest</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">443</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8443</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_named_ports">2.4. Using Named Ports</h3>
<div class="paragraph">
<p>You can give a name to each pod’s port and refer to it by name in the service spec.</p>
</div>
<div class="listingblock">
<div class="title">Specifying port names in a pod definition Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Pod</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">containers</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
    <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
      <span style="color: #6a9fb5">containerPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span>
      <span style="color: #6a9fb5">containerPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8443</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Referring to named ports in a service Manifest:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">http</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span>
    <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">443</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">https</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_connecting_to_services_living_outside_the_cluster">3. Connecting to services living outside the cluster</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Instead of having the service redirect connections to pods in the cluster, you
want it to redirect to external IP(s) and port(s).</p>
</div>
<div class="paragraph">
<p>This allows you to take advantage of both service load balancing and service
discovery. Client pods running in the cluster can connect to the external
service like they connect to internal services.</p>
</div>
<div class="sect2">
<h3 id="_service_endpoints">3.1. Service Endpoints</h3>
<div class="paragraph">
<p>Services don’t link to pods directly. Instead, a resource sits in between—the
Endpoints resource. You may have already noticed endpoints if you used the
<code>kubectl describe</code> command on your service.</p>
</div>
<div class="listingblock">
<div class="title">Full details of a service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl describe svc kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>Name:             kubia
Namespace:        default
Labels:           &lt;none&gt;
Selector:         app=kubia
Type:             ClusterIP
IP:               10.111.249.153
Port:             &lt;unset&gt; 80/TCP
Endpoints:        10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080
Session           Affinity: None
No events.</pre>
</div>
</div>
<div class="paragraph">
<p>An Endpoints resource (yes, plural) is a list of IP addresses and ports
exposing a service. The Endpoints resource is like any other Kubernetes
resource, so you can display its basic info with kubectl get.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get endpoints kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME     ENDPOINTS                                           AGE
kubia    10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080     1h</pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Manually Configuring Service Endpoints</div>
<div class="ulist">
<ul>
<li>
<p>having the service’s endpoints decoupled from the service allows them to be
configured and updated manually.</p>
</li>
<li>
<p>If you create a service without a pod selector, Kubernetes won’t even create
the Endpoints resource</p>
<div class="ulist">
<ul>
<li>
<p>after all, without a selector, it can’t know which pods to include in the
service</p>
</li>
</ul>
</div>
</li>
<li>
<p>To create a service with manually managed endpoints, you need to create both
a Service and an Endpoints resource</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A service without a pod selector: <code>external-service.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">external-service</span> <span style="color: #505050"># must match the endpoints name</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Endpoints are a separate resource and not an attribute of a service</p>
</li>
<li>
<p>Because you created the service without a selector, the corresponding
Endpoints resource hasn’t been created automatically</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A manually created Endpoints resource: <code>external-service-endpoints.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Endpoints</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">external-service</span> <span style="color: #505050"># must match the service name</span>
<span style="color: #6a9fb5">subsets</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">addresses</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">ip</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">11.11.11.11</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">ip</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">22.22.22.22</span>
    <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span> <span style="color: #505050"># target port of endpoints</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_to_external_clients">4. Exposing services to external clients</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Few ways to make a service accessible externally.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>NodePort</code> Service Type</p>
<div class="ulist">
<ul>
<li>
<p>Each cluster node opens a port on the node itself (hence the name) and
redirects traffic received on that port to the underlying service.</p>
</li>
<li>
<p>The service isn’t accessible only at the internal cluster IP and port, but
also through a dedicated port on all nodes.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>LoadBalancer</code> Service Type, an extention of <code>NodePort</code> type</p>
<div class="ulist">
<ul>
<li>
<p>This makes the service accessible through a dedicated load balancer,
provisioned from the cloud infrastructure Kubernetes is running on.</p>
</li>
<li>
<p>The load balancer redirects traffic to the node port across all the nodes.
Clients connect to the service through the load balancer’s IP.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Create <code>Ingress</code> Resource, radically different mechanism for exposing
multiple services through a single IP address</p>
<div class="ulist">
<ul>
<li>
<p>It operates at the HTTP level (network layer 7) and can thus offer more
features than layer 4 services can</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_using_a_nodeport_service">4.1. Using a NodePort service</h3>
<div class="paragraph">
<p>By creating a <code>NodePort</code> service, you make Kubernetes reserve a port on all its
nodes (the same port number is used across all of them) and forward incoming
connections to the pods that are part of the service.</p>
</div>
<div class="paragraph">
<p>This is similar to a regular service (their actual type is <code>ClusterIP</code>), but a
<code>NodePort</code> service can be accessed not only through the service’s internal
cluster IP, but also through any node’s IP and the reserved node port.</p>
</div>
<div class="paragraph">
<p>This will make more sense when you try interacting with a <code>NodePort</code> service.</p>
</div>
<div class="listingblock">
<div class="title">A NodePort service definition: <code>kubia-svc-nodeport.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia-nodeport</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">type</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">NodePort</span> <span style="color: #505050"># service type</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span> <span style="color: #505050"># service&#39;s internal cluster IP port</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span> <span style="color: #505050"># target port of the backing pods</span>
    <span style="color: #6a9fb5">nodePort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">30123</span> <span style="color: #505050"># service will listen on port 30123, each cluster nodes</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Examine the NodePort Service:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get svc kubia-nodeport</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME             CLUSTER-IP       EXTERNAL-IP    PORT(S)          AGE
kubia-nodeport   10.111.254.223   &lt;nodes&gt;        80:30123/TCP     2m</pre>
</div>
</div>
<div class="paragraph">
<p><code>EXTERNAL-IP</code> column shows <code>&lt;nodes&gt;</code>, indicating the service is accessible
through the IP address of any cluster node. The <code>PORT(S)</code> column shows both the
internal port of the cluster IP (<code>80</code>) and the node port (<code>30123</code>). The service
is accessible at the following addresses:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>10.11.254.223:80</code></p>
</li>
<li>
<p><code>&lt;1st node’s IP&gt;:30123</code></p>
</li>
<li>
<p><code>&lt;2nd node’s IP&gt;:30123</code></p>
</li>
<li>
<p>and so on</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Using JSONPath to get the IPs of all your nodes</div>
<p>You can find the IP in the JSON or YAML descriptors of the nodes. But instead
of sifting through the relatively large JSON, you can tell <code>kubectl</code> to print
out only the node IP instead of the whole service definition</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get nodes <span style="color: #f4bf75">-o</span> <span style="color: #8f5536">\</span>
<span style="color: #d0d0d0;background-color: #151515">  jsonpath=&#39;{.items[*].status.addresses[?(@.type==&#34;ExternalIP&#34;)].address}&#39;</span></code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>130.211.97.55 130.211.99.206</pre>
</div>
</div>
<div class="paragraph">
<p>Once you know the IPs of your nodes, you can try accessing your service through
them.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>curl http://130.211.97.55:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-ym8or</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>curl http://130.211.99.206:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-xueq1</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_a_service_through_an_external_load_balancer">4.2. Exposing a service through an external load balancer</h3>
<div class="paragraph">
<p>Kubernetes clusters running on cloud providers usually support the automatic
provision of a load balancer from the cloud infrastructure. All you need to do
is set the service’s type to <code>LoadBalancer</code> instead of <code>NodePort</code>. The load
balancer will have its own unique, publicly accessible IP address and will
redirect all connections to your service. You can thus access your service
through the load balancer’s IP address.</p>
</div>
<div class="paragraph">
<p>If Kubernetes is running in an environment that doesn’t support <code>LoadBalancer</code>
services, the load balancer will not be provisioned, but the service will still
behave like a <code>NodePort</code> service. That’s because a <code>LoadBalancer</code> service is an
extension of a <code>NodePort</code> service. You’ll run this example on Google Kubernetes
Engine, which supports <code>LoadBalancer</code> services. Minikube doesn’t, at least not
as of this writing.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Creating a Loadbalancer Service</div>
<div class="listingblock">
<div class="title">A LoadBalancer-type service: <code>kubia-svc-loadbalancer.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">v1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Service</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia-loadbalancer</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">type</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">LoadBalancer</span>
  <span style="color: #6a9fb5">ports</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">port</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>
    <span style="color: #6a9fb5">targetPort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8080</span>
  <span style="color: #6a9fb5">selector</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">app</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The service type is set to LoadBalancer instead of NodePort. You’re not
specifying a specific node port, although you could (you’re letting
Kubernetes choose one instead).</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Connecting to the Service Through the Load Balancer</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get svc kubia-loadbalancer</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output</div>
<div class="content">
<pre>NAME                CLUSTER-IP       EXTERNAL-IP       PORT(S)       AGE
kubia-loadbalancer  10.111.241.153   130.211.53.173    80:32143/TCP  1m</pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Session affinity and web browsers</div>
<div class="paragraph">
<p>Because your service is now exposed externally, you may try accessing it with
your web browser. You’ll see something that may strike you as odd—the browser
will hit the exact same pod every time. Did the service’s session affinity
change in the meantime? With <code>kubectl explain</code>, you can double-check that the
service’s session affinity is still set to <code>None</code>, so why don’t different
browser requests hit different pods, as is the case when using <code>curl</code>?</p>
</div>
<div class="paragraph">
<p>Let me explain what’s happening. The browser is using keep-alive connections
and sends all its requests through a single connection, whereas <code>curl</code> opens a
new connection every time. Services work at the connection level, so when a
connection to a service is first opened, a random pod is selected and then all
network packets belonging to that connection are all sent to that single pod.
Even if session affinity is set to <code>None</code>, users will always hit the same pod
(until the connection is closed).</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_understanding_the_peculiarities_of_external_connections">4.3. Understanding the peculiarities of external connections</h3>
<div class="paragraph">
<p>You must be aware of several things related to externally originating connections to
services.</p>
</div>
<div class="paragraph">
<div class="title">Understanding and Preventing Unnecessary Network Hops</div>
<p>When an external client connects to a service through the node port (this also
includes cases when it goes through the load balancer first), the randomly chosen
pod may or may not be running on the same node that received the connection. An
additional network hop is required to reach the pod, but this may not always be
desirable.</p>
</div>
<div class="paragraph">
<p>You can prevent this additional hop by configuring the service to redirect external
traffic only to pods running on the node that received the connection. This is done by
setting the <code>externalTrafficPolicy</code> field in the service’s <code>spec</code> section</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">externalTrafficPolicy</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Local</span>
  <span style="color: #90a959">...</span></code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Being Aware of the non-preservation of the Client’s IP</div>
<p>Usually, when clients inside the cluster connect to a service, the pods backing
the service can obtain the client’s IP address. But when the connection is
received through a node port, the packets&#39; source IP is changed, because Source
Network Address Translation (SNAT) is performed on the packets.</p>
</div>
<div class="paragraph">
<p>The backing pod can’t see the actual client’s IP, which may be a problem for
some applications that need to know the client’s IP. In the case of a web
server, for example, this means the access log won’t show the browser’s IP.</p>
</div>
<div class="paragraph">
<p>The <code>Local</code> external traffic policy described in the previous section affects
the preservation of the client’s IP, because there’s no additional hop between
the node receiving the connection and the node hosting the target pod (SNAT
isn’t performed).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_externally_through_an_ingress_resource">5. Exposing services externally through an Ingress resource</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You must be aware of several things related to externally originating
connections to services.</p>
</div>
<div class="ulist">
<div class="title">Understanding Why Ingresses are Needed</div>
<ul>
<li>
<p>each LoadBalancer service requires its own load balancer with its own public
IP address, whereas an Ingress only requires one, even when providing access
to dozens of services</p>
</li>
<li>
<p>When a client sends an HTTP request to the Ingress, the host and path in the
request determine which service the request is forwarded to</p>
</li>
<li>
<p>Ingresses operate at the application layer of the network stack (HTTP) and
can provide features such as cookie-based session affinity and the like,
which services can’t</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Understanding that an Ingress Controller is Required</div>
<p>To make Ingress resources work, an Ingress controller needs to be running in
the cluster.</p>
</div>
<div class="sect2">
<h3 id="_creating_an_ingress_resource">5.1. Creating an Ingress resource</h3>
<div class="listingblock">
<div class="title">An Ingress resource definition: <code>kubia-ingress.yaml</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="yaml"><span style="color: #6a9fb5">apiVersion</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">extensions/v1beta1</span>
<span style="color: #6a9fb5">kind</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">Ingress</span>
<span style="color: #6a9fb5">metadata</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia</span>
<span style="color: #6a9fb5">spec</span><span style="color: #d0d0d0">:</span>
  <span style="color: #6a9fb5">rules</span><span style="color: #d0d0d0">:</span>
  <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">host</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia.example.com</span> <span style="color: #505050">#  maps the domain name to your service</span>
  <span style="color: #6a9fb5">http</span><span style="color: #d0d0d0">:</span>
    <span style="color: #6a9fb5">paths</span><span style="color: #d0d0d0">:</span>
    <span style="color: #d0d0d0">-</span> <span style="color: #6a9fb5">path</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">/</span>                        <span style="color: #505050"># All requests will be sent to port 80</span>
      <span style="color: #6a9fb5">backend</span><span style="color: #d0d0d0">:</span>                       <span style="color: #505050"># of the kubia-nodeport service.</span>
        <span style="color: #6a9fb5">serviceName</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">kubia-nodeport</span>  <span style="color: #505050">#</span>
        <span style="color: #6a9fb5">servicePort</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">80</span>              <span style="color: #505050">#</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>This defines an Ingress with a single rule, which makes sure all HTTP requests
received by the Ingress controller, in which the host <code>kubia.example.com</code> is
requested, will be sent to the <code>kubia-nodeport</code> service on port <code>80</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Ingress controllers on cloud providers (in GKE, for example) require the
Ingress to point to a <code>NodePort</code> service. But that’s not a requirement of
Kubernetes itself.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_the_service_through_the_ingress">5.2. Accessing the service through the Ingress</h3>
<div class="paragraph">
<p>To access your service through <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a>, you’ll need to make sure
the domain name resolves to the IP of the Ingress controller</p>
</div>
<div class="listingblock">
<div class="title">Obtaining the ip Address of the Ingress:</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="console"><span style="color: #d0d0d0;background-color: #151515">$</span><span style="color: #d0d0d0;background-color: #151515"> </span>kubectl get ingresses</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME      HOSTS                ADDRESS            PORTS       AGE
kubia     kubia.example.com    192.168.99.100     80          29m</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>When running on cloud providers, the address may take time to appear,
because the Ingress controller provisions a load balancer behind the scenes.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="ulist">
<ul>
<li>
<p>The IP is shown in the <code>ADDRESS</code> column.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Once you know the IP, you can then either configure your DNS servers to resolve
kubia.example.com to that IP or you can setup hosts: add the following line to
<code>/etc/hosts</code> (or <code>C:\windows\system32\drivers\etc\hosts</code> on Windows):</p>
</div>
<div class="listingblock">
<div class="title"><code>/etc/hosts</code></div>
<div class="content">
<pre>192.168.99.100		kubia.example.com</pre>
</div>
</div>
<div class="paragraph">
<p>So you can access the service at <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a> using a browser or
<code>curl</code></p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_understading_how_ingress_work">5.2.1. Understading how Ingress work</h4>
<div class="ulist">
<ul>
<li>
<p>The client first performed a DNS lookup of kubia.example.com, and the DNS
server (or the local operating system) returned the IP of the Ingress
controller</p>
</li>
<li>
<p>The client then sent an HTTP request to the Ingress controller and specified
<code>kubia.example.com</code> in the <code>Host</code> header</p>
<div class="ulist">
<ul>
<li>
<p>From that header, the controller determined which service the client is
trying to access, looked up the pod IPs through the Endpoints object
associated with the service, and forwarded the client’s request to one of
the pods.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The Ingress controller don’t forward the request to the service</p>
<div class="ulist">
<ul>
<li>
<p>It only use it to select a pod</p>
</li>
<li>
<p>Most, if not all, controllers work like this</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_services_through_the_same_ingress">5.3. Exposing multiple services through the same Ingress</h3>
<div class="paragraph">
<p>Both <code>rules</code> and <code>paths</code> are arrays, so they can contain multiple items</p>
</div>
<div class="sect3">
<h4 id="_mapping_different_services_to_different_paths_of_the_same_host">5.3.1. Mapping different services to different paths of the same host</h4>

</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Webserver</title>
      <link>https://hossein-lap.github.io/notes/webserver/</link>
      <pubDate>Fri, 31 May 2024 16:47:17 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/webserver/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>We need <code>&#34;net/http&#34;</code> module to create webserver and listen to the specified port.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">import</span> <span style="color: #d0d0d0">(</span>
    <span style="color: #90a959">&#34;net/http&#34;</span>
<span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>we also might need these modules as well:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&#34;encoding/json&#34;</code> too for parsing JSON data</p>
</li>
<li>
<p><code>&#34;database/sql&#34;</code> and <code>&#34;github.com/go-sql-driver/mysql&#34;</code> to handle (my)sql/mariadb part</p>
</li>
<li>
<p><code>&#34;github.com/redi/go-redis/v9&#34;</code> to handle redis-cache</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We need a request handler struct for the http server to be able to work.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">RequestHandler</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>And now we define the http server. it needs a <code>ServeHTTP()</code> function and paths
that needs to be handled (HTTP requests goes to the specified paths)</p>
</div>
<div class="listingblock">
<div class="title">main funcion</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">NewServeMx</span><span style="color: #d0d0d0">()</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path1&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path1/&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path2&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Handle</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;/path2/&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">{})</span>
    <span style="color: #505050">/* continue */</span>
    <span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ListenAndServe</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;:8080&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">mux</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">serve function</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">h</span> <span style="color: #d0d0d0">*</span><span style="color: #d0d0d0;background-color: #151515">RequestHandler</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0;background-color: #151515">ServeHTTP</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">w</span> <span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ResponseWriter</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">r</span> <span style="color: #d0d0d0">*</span><span style="color: #d0d0d0;background-color: #151515">http</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Requset</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">request_type</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Method</span>
    <span style="color: #d0d0d0;background-color: #151515">tmp</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">strings</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">SplitN</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">URL</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">String</span><span style="color: #d0d0d0">(),</span> <span style="color: #90a959">&#34;/&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">3</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">section</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">tmp</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">]</span> <span style="color: #505050">// path</span>
    <span style="color: #d0d0d0;background-color: #151515">key</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">tmp</span><span style="color: #d0d0d0">[</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">]</span> <span style="color: #505050">// add data after the path</span>
    <span style="color: #d0d0d0;background-color: #151515">params</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">URL</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Query</span><span style="color: #d0d0d0">()</span>
    <span style="color: #d0d0d0;background-color: #151515">value</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">params</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Get</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">key</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">body</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">io</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ReadAll</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">r</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Body</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">// values from curl&#39;s `--data` flag (spected to be JSON)</span>
    <span style="color: #505050">/* continue */</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_redis_handler">1. Redis Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">cache_handler</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">client</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">redis</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">NewClient</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">redis</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Options</span><span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Addr</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;localhost:6349&#34;</span>
        <span style="color: #d0d0d0;background-color: #151515">Password</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;&#34;</span> <span style="color: #505050">// No password, to get it from env variables use: `os.Getenv(&#34;ENV&#34;)`</span>
        <span style="color: #d0d0d0;background-color: #151515">DB</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">0</span> <span style="color: #505050">// default db</span>
    <span style="color: #d0d0d0">})</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mysql_handler">2. MySQL Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">database_handler</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">sql_url</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">&#34;root@localhost:3360&#34;</span>
    <span style="color: #d0d0d0;background-color: #151515">db</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">sql</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Open</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;mysql&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">sql_url</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">pandic</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Error</span><span style="color: #d0d0d0">())</span>
    <span style="color: #d0d0d0">}</span>
    <span style="color: #aa759f">defer</span> <span style="color: #d0d0d0;background-color: #151515">db</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Close</span><span style="color: #d0d0d0">()</span>
    <span style="color: #505050">/* continue */</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_unmarshal">3. JSON Parser - Unmarshal</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">Movie</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Name</span> <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;name&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Publisher</span> <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;publisher&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Year</span> <span style="color: #d28445">int</span> <span style="color: #90a959">`json:&#34;year&#34;`</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">HandleMovie</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #505050">// var target map[string]any /* not optimal */</span>
    <span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">movie</span> <span style="color: #d0d0d0;background-color: #151515">Movie</span>

    <span style="color: #d0d0d0;background-color: #151515">input</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{
        &#34;name&#34;: &#34;Jocker&#34;,
        &#34;publisher&#34;: &#34;WB&#34;,
        &#34;year&#34;: 2019
    }`</span>

    <span style="color: #505050">// err := json.Unmarshal([]byte(input), &amp;target) /* not optimal */</span>
    <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Unmarshal</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #d0d0d0">),</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">/* not optimal */</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #505050">/* not optimal */</span>
    <span style="color: #505050">// for k, v := range target {</span>
    <span style="color: #505050">//    fmt.Printf(&#34;k: %s, v: %v\n&#34;, k, v)</span>
    <span style="color: #505050">// }</span>
    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Printf</span><span style="color: #d0d0d0">(</span>
        <span style="color: #90a959">&#34;Name: %s, Publisher: %s, Year: %d</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Publisher</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">movie</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Year</span><span style="color: #d0d0d0">,</span>
    <span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_complex_json">3.1. Complex JSON</h3>
<div class="listingblock">
<div class="title"><code>assets/complex.json</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="json"><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;name&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;James Peterson&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;age&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">37</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;address&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0;background-color: #151515">&#34;line1&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Block 78 Woodgrove Avenue 5&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0;background-color: #151515">&#34;line2&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Unit #05-111&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0;background-color: #151515">&#34;postal&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;654378&#34;</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0">},</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0;background-color: #151515">&#34;pets&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #d0d0d0">[</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;name&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Lex&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;kind&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Dog&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;age&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">4</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;color&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Gray&#34;</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">},</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">{</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;name&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Faye&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;kind&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Cat&#34;</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;age&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">6</span><span style="color: #d0d0d0">,</span><span style="color: #d0d0d0;background-color: #151515">
      </span><span style="color: #d0d0d0;background-color: #151515">&#34;color&#34;</span><span style="color: #d0d0d0">:</span><span style="color: #d0d0d0;background-color: #151515"> </span><span style="color: #90a959">&#34;Orange&#34;</span><span style="color: #d0d0d0;background-color: #151515">
    </span><span style="color: #d0d0d0">}</span><span style="color: #d0d0d0;background-color: #151515">
  </span><span style="color: #d0d0d0">]</span><span style="color: #d0d0d0;background-color: #151515">
</span><span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><code>examples/complex_json/main.go</code></div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0">(</span>
    <span style="color: #d0d0d0;background-color: #151515">FullPerson</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Address</span> <span style="color: #d0d0d0;background-color: #151515">Address</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span>    <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Pets</span>    <span style="color: #d0d0d0">[]</span><span style="color: #d0d0d0;background-color: #151515">Pet</span>
        <span style="color: #d0d0d0;background-color: #151515">Age</span>     <span style="color: #d28445">int</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">Pet</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Kind</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Color</span> <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Age</span>   <span style="color: #d28445">int</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">Address</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Line1</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Line2</span>  <span style="color: #d28445">string</span>
        <span style="color: #d0d0d0;background-color: #151515">Postal</span> <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">)</span>


<span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">os</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">ReadFile</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;assets/complex.json&#34;</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to read file due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">person</span> <span style="color: #d0d0d0;background-color: #151515">FullPerson</span>

    <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Unmarshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">person</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">litter</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Dump</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">person</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_common_pitfalls_with_json_unmarshalling_in_go">3.2. Common pitfalls with JSON unmarshalling in Go</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Extra fields are omitted in the target struct</p>
</li>
<li>
<p>Missing fields fallback to zero values</p>
</li>
<li>
<p>Unmarshalling is case insensitive</p>
</li>
<li>
<p>Field names must match JSON keys exactly</p>
</li>
<li>
<p>Type aliases are preserved</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_marshal">4. JSON Parser - Marshal</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>json.Marshal()</code> method does the opposite of <code>Unmarshal()</code> by converting
a given data structure into a JSON.</p>
</div>
<div class="listingblock">
<div class="title">examples/basic_marshal/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">in</span> <span style="color: #d0d0d0;background-color: #151515">any</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">[]</span><span style="color: #d28445">byte</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">out</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">in</span><span style="color: #d0d0d0">)</span>

    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #aa759f">return</span> <span style="color: #d0d0d0;background-color: #151515">out</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">first</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">14</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">second</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Hello world&#34;</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0;background-color: #151515">third</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">float32</span><span style="color: #d0d0d0">{</span><span style="color: #90a959">1.66</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">6.86</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">10.1</span><span style="color: #d0d0d0">})</span>
    <span style="color: #d0d0d0;background-color: #151515">fourth</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">marshal</span><span style="color: #d0d0d0">(</span><span style="color: #aa759f">map</span><span style="color: #d0d0d0">[</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">]</span><span style="color: #d28445">int</span><span style="color: #d0d0d0">{</span><span style="color: #90a959">&#34;num&#34;</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">15</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">&#34;other&#34;</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">17</span><span style="color: #d0d0d0">})</span>
    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Printf</span><span style="color: #d0d0d0">(</span>
        <span style="color: #90a959">&#34;first: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">second: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">third: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">fourth: %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">first</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">second</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">third</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">fourth</span><span style="color: #d0d0d0">,</span>
    <span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_structs">4.1. structs</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">p</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">Person</span><span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">:</span>  <span style="color: #90a959">&#34;John Jones&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Age</span><span style="color: #d0d0d0">:</span>   <span style="color: #90a959">26</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Email</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;johnjones@email.com&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Phone</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;89910119&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Hobbies</span><span style="color: #d0d0d0">:</span> <span style="color: #d0d0d0">[]</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">{</span>
            <span style="color: #90a959">&#34;Swimming&#34;</span><span style="color: #d0d0d0">,</span>
            <span style="color: #90a959">&#34;Badminton&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0">},</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">p</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">))</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
If you wish to format the JSON object, you can use the <code>MarshalIndent()</code> method
which performs the same function as <code>Marshal()</code> but applies some indentation to
format the output.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_customizing_json_field_names_with_struct_tags">4.2. Customizing JSON field names with struct tags</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Breed</span>         <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0;background-color: #151515">Name</span>          <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0;background-color: #151515">FavoriteTreat</span> <span style="color: #d28445">string</span>
    <span style="color: #d0d0d0;background-color: #151515">Age</span>           <span style="color: #d28445">int</span>
<span style="color: #d0d0d0">}</span>

<span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">dog</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span><span style="color: #d0d0d0">{</span>
  <span style="color: #d0d0d0;background-color: #151515">Breed</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;Golden Retriever&#34;</span><span style="color: #d0d0d0">,</span>
  <span style="color: #d0d0d0;background-color: #151515">Age</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">8</span><span style="color: #d0d0d0">,</span>
  <span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;Paws&#34;</span><span style="color: #d0d0d0">,</span>
  <span style="color: #d0d0d0;background-color: #151515">FavoriteTreat</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;Kibble&#34;</span><span style="color: #d0d0d0">,</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Breed</span>         <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;breed&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Name</span>          <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;name&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">FavoriteTreat</span> <span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;favorite_treat&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Age</span>           <span style="color: #d28445">int</span>    <span style="color: #90a959">`json:&#34;age&#34;`</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">input</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{
      &#34;name&#34;: &#34;Coffee&#34;,
      &#34;breed&#34;: &#34;Toy Poodle&#34;,
      &#34;age&#34;: 5,
      &#34;favorite_treat&#34;: &#34;Kibble&#34;
    }`</span>

    <span style="color: #aa759f">var</span> <span style="color: #d0d0d0;background-color: #151515">coffee</span> <span style="color: #d0d0d0;background-color: #151515">Dog</span>

    <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Unmarshal</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">input</span><span style="color: #d0d0d0">),</span> <span style="color: #d0d0d0">&amp;</span><span style="color: #d0d0d0;background-color: #151515">coffee</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal JSON due to %s&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">litter</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Dump</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">coffee</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_uses_of_struct_tags">4.3. Other uses of struct tags</h3>
<div class="listingblock">
<div class="title">Omit an empty field (one with its zero value in Go)</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0;background-color: #151515">User</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">Username</span> <span style="color: #d28445">string</span>   <span style="color: #90a959">`json:&#34;username&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Password</span> <span style="color: #d28445">string</span>   <span style="color: #90a959">`json:&#34;-&#34;`</span>

    <span style="color: #d0d0d0;background-color: #151515">Email</span>    <span style="color: #d28445">string</span>   <span style="color: #90a959">`json:&#34;email&#34;`</span>
    <span style="color: #d0d0d0;background-color: #151515">Hobbies</span>  <span style="color: #d0d0d0">[]</span><span style="color: #d28445">string</span> <span style="color: #90a959">`json:&#34;hobbies,omitempty&#34;`</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_validating_json_data">5. Validating JSON data</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">good</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{&#34;name&#34;: &#34;John Doe&#34;}`</span>
    <span style="color: #d0d0d0;background-color: #151515">bad</span> <span style="color: #d0d0d0">:=</span> <span style="color: #90a959">`{name: &#34;John Doe&#34;}`</span>

    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Valid</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">good</span><span style="color: #d0d0d0">)))</span>
    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Valid</span><span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">bad</span><span style="color: #d0d0d0">)))</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_defining_custom_behavior_marshal_unmarshal_data">6. Defining custom behavior - Marshal / Unmarshal data</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Go, you can define custom behavior for marshalling data by implementing the
<code>json.Marshaler</code> interface. This interface defines a single method,
<code>MarshalJSON()</code> which takes no arguments and returns a byte slice and an
error.</p>
</div>
<div class="paragraph">
<p>To implement the <code>json.Marshaler</code> interface, you need to define a new type that
wraps the original type you want to marshal. This new type should have a method
named <code>MarshalJSON()</code> that returns a byte slice and an error.</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">type</span> <span style="color: #d0d0d0">(</span>
    <span style="color: #d0d0d0;background-color: #151515">CustomTime</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Time</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">Baby</span> <span style="color: #aa759f">struct</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">BirthDate</span> <span style="color: #d0d0d0;background-color: #151515">CustomTime</span> <span style="color: #90a959">`json:&#34;birth_date&#34;`</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span>      <span style="color: #d28445">string</span>    <span style="color: #90a959">`json:&#34;name&#34;`</span>
        <span style="color: #d0d0d0;background-color: #151515">Gender</span>    <span style="color: #d28445">string</span>    <span style="color: #90a959">`json:&#34;gender&#34;`</span>
    <span style="color: #d0d0d0">}</span>
<span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above snippet, we defined a new <code>CustomTime</code> type that wraps a
<code>time.Time</code> value. In is subsequently used in the <code>Baby</code> struct as the type of
the <code>BirthDate</code> value.</p>
</div>
<div class="paragraph">
<p>Here’s an example that marshals a value of type <code>Baby</code> below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">baby</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">Baby</span><span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">Name</span><span style="color: #d0d0d0">:</span>   <span style="color: #90a959">&#34;johnny&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">Gender</span><span style="color: #d0d0d0">:</span> <span style="color: #90a959">&#34;male&#34;</span><span style="color: #d0d0d0">,</span>
        <span style="color: #d0d0d0;background-color: #151515">BirthDate</span><span style="color: #d0d0d0">:</span> <span style="color: #d0d0d0;background-color: #151515">CustomTime</span><span style="color: #d0d0d0">{</span>
            <span style="color: #d0d0d0;background-color: #151515">time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Date</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">2023</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">12</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Now</span><span style="color: #d0d0d0">()</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Location</span><span style="color: #d0d0d0">()),</span>
        <span style="color: #d0d0d0">},</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">:=</span> <span style="color: #d0d0d0;background-color: #151515">json</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Marshal</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">baby</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">err</span> <span style="color: #d0d0d0">!=</span> <span style="color: #f4bf75">nil</span> <span style="color: #d0d0d0">{</span>
        <span style="color: #d0d0d0;background-color: #151515">log</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Fatalf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Unable to marshal due to %s</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">err</span><span style="color: #d0d0d0">)</span>
    <span style="color: #d0d0d0">}</span>

    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Println</span><span style="color: #d0d0d0">(</span><span style="color: #d28445">string</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">))</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice how the <code>birth_date</code> presented in the RFC 3339 format. You can now
define the custom marshalling behavior that will return a different format for
<code>CustomTime</code> values (such as <code>DD-MM-YYYY</code>) instead of the default RFC 3339
timestamp format.</p>
</div>
<div class="paragraph">
<p>You only need to define a <code>MarshalJSON()</code> method for the type as shown below:</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">func</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">ct</span> <span style="color: #d0d0d0;background-color: #151515">CustomTime</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0;background-color: #151515">MarshalJSON</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">([]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">,</span> <span style="color: #d28445">error</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #aa759f">return</span> <span style="color: #d0d0d0">[]</span><span style="color: #d28445">byte</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Sprintf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">`%q`</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">ct</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Time</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Format</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;02-01-2006&#34;</span><span style="color: #d0d0d0">))),</span> <span style="color: #f4bf75">nil</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title></title>
      <link>https://hossein-lap.github.io/readme/</link>
      <pubDate>Sun, 26 May 2024 22:08:49 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/readme/</guid>
      <description><![CDATA[<div class="paragraph">
<p>Welcome to my blog. I’m Hossein and I’ll be posting myown notes, ideas,
programs. A Programmer / DevOps Engineer with passions about open-source
software and trees.</p>
</div>
<div class="paragraph">
<p>Also, I use vim btw ;)</p>
</div>
<div class="quoteblock">
<div class="title"><strong>Bookshelf</strong></div>
<blockquote>
<div class="dlist">
<dl>
<dt class="hdlist1">Languages</dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>Lua</code> <code>Go</code> <code>C</code> <code>Bash</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1">Tools</dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>Linux</code> <code>Git</code> <code>Docker</code> <code>Kubernetes</code> <code>Ansible</code> <code>QEMU/KVM</code> <code>Vim</code> <code>tmux</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1">Writing</dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>LaTeX</code> <code>Groff</code> <code>Asciidoc</code> <code>Markdown</code></p>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1">Hobbies</dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><code>Coding</code> <code>Writing</code> <code>Biking</code> <code>Volleyball</code> <code>Fishing</code> <code>Music</code> <code>Movies</code></p>
</li>
</ul>
</div>
</dd>
</dl>
</div>
</blockquote>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Lua</title>
      <link>https://hossein-lap.github.io/docs/lua/</link>
      <pubDate>Tue, 02 Apr 2024 22:30:09 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/lua/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Lua is a powerful, fast, lightweight and embeddable programming language. It is
used by many frameworks, games and other applications. While it can be used by
itself, it has been designed to be easy to embed in another application. It is
implemented in ANSI C, a subset of C programming language that is very
portable, which means it can run on many systems and many devices where the
most other scripting languages would not be able to run.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>&#34;Lua&#34; (pronounced LOO-ah) means &#34;Moon&#34; in Portuguese. As such, it is neither an
acronym nor an abbreviation, but a noun. Lua comes from two languages: DEL and
Sol. DEL means &#34;Data Entry Language&#34;, While Sol means &#34;Simple object language&#34;
and also means Sun in Portuguese.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>One of main advantages of Lua is its simplicity. Programming which is also
called scripting in the case of programs that run inside an embedded
applications, is the process of writing computer program. A programming
language is a language used to give instructions to a computer through computer
code that is contained in a computer program. A programming language consists
of two things: a syntax, which is like grammar in English, and libraries, basic
functions provided with the language. These libraries could be compared with
vocabulary in English.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hello_world">1. Hello World!</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lua can either be used embedded in an application or by itself. The first
example of Lua code in this book will be the basic and traditional hello world
program.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>A &#34;Hello world&#34; program is a computer program that outputs &#34;Hello, world&#34; on a
display device. Because it is typically one of the simplest programs possible
in most programming languages, it is by tradition often used to illustrate to
beginners the most basic syntax of a programming language, or to verify that a
language or system is operating correctly.</p>
</div>
</blockquote>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Hello World!&#34;</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The code above prints the text Hello, world! to the output. It does so by
calling the print function with the string &#34;Hello, world!&#34; as an argument.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_syntax">2. Syntax</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Syntax of a programming language defines how statements and expressions must be
written in that programming language, just like grammar defines how sentences
and words must be written. Statements and expressions can be respectively
compared to sentences and words.</p>
</div>
<div class="paragraph">
<p>Lua is a dynamically typed language intended for use as an extension language or scripting language.</p>
</div>
<div class="paragraph">
<p>Statements and expressions can be respectively compared to sentences and
words. Expressions are pieces of code that have a value and that can be evaluated, while
statements are pieces of code that can be executed and contain an instruction with one
or many expressions to use that instruction with.</p>
</div>
<div class="paragraph">
<p>For example, <code>3 + 5</code> is an expression and <code>variable = 3 + 5</code> is a statement
that sets the value of variable to that expression.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #505050">-- Different types</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">10</span> <span style="color: #505050">-- number</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">name</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;Neo&#34;</span> <span style="color: #505050">-- string</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">is_alive</span> <span style="color: #d0d0d0">=</span> <span style="color: #d28445">false</span> <span style="color: #505050">-- boolean</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d28445">nil</span> <span style="color: #505050">-- no value or invalid value</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_obtaining_lua">3. Obtaining Lua</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lua can be obtained on the official Lua website,
on the <a href="http://www.lua.org/download.html">download page</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_basics">4. Basics</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you are using the stand-alone Lua interpreter, all you have to do
to run your first program is to call the interpreter
-usually named <code>lua</code> or <code>lua5.3</code>/<code>lua5.4</code>-
with the name of the text file that contains your program.
If you save the <em>Hello World</em> program in a file <code>hello.lua</code>,
the following command should run it:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua hello.lua</pre>
</div>
</div>
<div class="paragraph">
<p>As a more complex example, the next program defines a function to compute
the factorial of a given number, asks the user for a number,
and prints its factorial:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #505050">-- defines a factorial function</span>
<span style="color: #aa759f">function</span> <span style="color: #d0d0d0;background-color: #151515">fact</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">n</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">if</span> <span style="color: #d0d0d0;background-color: #151515">n</span> <span style="color: #d0d0d0">==</span> <span style="color: #90a959">0</span> <span style="color: #aa759f">then</span>
        <span style="color: #aa759f">return</span> <span style="color: #90a959">1</span>
    <span style="color: #aa759f">else</span>
        <span style="color: #aa759f">return</span> <span style="color: #d0d0d0;background-color: #151515">n</span> <span style="color: #d0d0d0">*</span> <span style="color: #d0d0d0;background-color: #151515">fact</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">n</span> <span style="color: #d0d0d0">-</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">end</span>
<span style="color: #aa759f">end</span>

<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;enter a number:&#34;</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">io.read</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;*n&#34;</span><span style="color: #d0d0d0">)</span>       <span style="color: #505050">-- reads a number</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">fact</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">a</span><span style="color: #d0d0d0">))</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_chuncks">5. Chuncks</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We call each piece of code that Lua executes, such as a file or a single line
in interactive mode, a <em>chunk</em>. A chunk is simply a sequence of commands
(or statements).</p>
</div>
<div class="paragraph">
<p>A chunk can be as simple as a single statement, such as in the &#34;Hello World&#34; example,
or it can be composed of a mix of statements and function definitions
(which are actually assignments, as we will see later), such as the factorial example.</p>
</div>
<div class="paragraph">
<p>Instead of writing your program to a file, you can run the stand-alone interpreter
in interactive mode. If you call <code>lua</code> without any arguments, you will get its prompt:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
&gt;</pre>
</div>
</div>
<div class="paragraph">
<p>Thereafter, each command that you type (such as <code>print &#34;Hello World&#34;</code>)
executes immediately after you enter it. To exit the interactive mode
and the interpreter, just type the end-of-file control character
(<code>ctrl-D</code> in POSIX, <code>ctrl-Z</code> in Windows), or call the function <code>os.exit</code>,
from the Operating System library - you have to type <code>os.exit()</code>.</p>
</div>
<div class="paragraph">
<p>Starting in version 5.4, we can enter expressions directly in the interactive mode,
and Lua will print their values:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
&gt; math.pi / 4   --&gt; 0.78539816339745
&gt; a = 15
&gt; a ^ 2         --&gt; 225
&gt; a + 2         --&gt; 17</pre>
</div>
</div>
<div class="paragraph">
<p>In older versions, we need to precede these expressions with an equals sign:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua5.2
Lua 5.2.3  Copyright (C) 1994-2013 Lua.org, PUC-Rio
&gt; a = 15
&gt; = a ^ 2         --&gt; 225</pre>
</div>
</div>
<div class="paragraph">
<p>For compatibility, Lua 5.4 still accepts these equals signs.</p>
</div>
<div class="paragraph">
<p>To run that code as a chunk (not in interactive mode), we must enclose
the expressions inside calls to <code>print</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">math.pi</span> <span style="color: #d0d0d0">/</span> <span style="color: #90a959">4</span><span style="color: #d0d0d0">)</span>  <span style="color: #505050">--&gt; 0.78539816339745</span>
<span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">15</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">^</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">)</span>        <span style="color: #505050">--&gt; 225</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">)</span>        <span style="color: #505050">--&gt; 17</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Lua usually interprets each line that we type in interactive mode as a complete
chunk or expression. However, if it detects that the line is not complete,
it waits for more input, until it has a complete chunk. This way, we can enter a
multi-line definition, such as the factorial function, directly in interactive mode.
However, it is usually more convenient to put such definitions in a file and then
call Lua to run the file.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="figs/intractive-multiline.png" alt="Multiline Code in Intractive Mode"/>
</div>
</div>
<div class="paragraph">
<p>We can use the <code>-i</code> option to instruct Lua to start an interactive session
after running a given chunk:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua -i prog</pre>
</div>
</div>
<div class="paragraph">
<p>A command line like this one will run the chunk in the file <code>prog</code> and then
prompt for interaction. This is especially useful for debugging and manual testing.</p>
</div>
<div class="paragraph">
<p>Another way to run chunks is with the function <code>dofile</code>, which immediately executes
a file. For instance, suppose we have a file <code>lib1.lua</code> with the following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #aa759f">function</span> <span style="color: #d0d0d0;background-color: #151515">norm</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">x</span><span style="color: #d0d0d0">,</span> <span style="color: #d0d0d0;background-color: #151515">y</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">return</span> <span style="color: #d0d0d0;background-color: #151515">math.sqrt</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">x</span><span style="color: #d0d0d0">^</span><span style="color: #90a959">2</span> <span style="color: #d0d0d0">+</span> <span style="color: #d0d0d0;background-color: #151515">y</span><span style="color: #d0d0d0">^</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">)</span>
<span style="color: #aa759f">end</span>

<span style="color: #aa759f">function</span> <span style="color: #d0d0d0;background-color: #151515">twice</span> <span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">x</span><span style="color: #d0d0d0">)</span>
    <span style="color: #aa759f">return</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">.</span><span style="color: #90a959">0</span> <span style="color: #d0d0d0">*</span> <span style="color: #d0d0d0;background-color: #151515">x</span>
<span style="color: #aa759f">end</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Then, in interactive mode, we can type this code:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; dofile(&#34;lib1.lua&#34;)    -- load our library
&gt; n = norm(3.4, 1.0)
&gt; twice(n)              --&gt; 7.0880180586677</pre>
</div>
</div>
<div class="paragraph">
<p>The function <code>dofile</code> is useful also when we are testing a piece of code. We can work
with two windows: one is a text editor with our program (in a file <code>prog.lua</code>, say)
and the other is a console running Lua in interactive mode. After saving a
modification in our program, we execute <code>dofile(&#34;prog.lua&#34;)</code> in the Lua console to
load the new code; then we can exercise the new code, calling its functions and
printing the results.</p>
</div>
<div class="sect2">
<h3 id="_some_lexical_conventions">5.1. Some Lexical Conventions</h3>
<div class="paragraph">
<p>Identifiers (or names) in Lua can be any string of letters, digits, and underscores,
not beginning with a digit; for instance</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>i</code></p>
</li>
<li>
<p><code>j</code></p>
</li>
<li>
<p><code>i10</code></p>
</li>
<li>
<p><code>_ij</code></p>
</li>
<li>
<p><code>aSomewhatLongName</code></p>
</li>
<li>
<p><code>_INPUT</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You should avoid identifiers starting with an underscore followed by one or more
upper-case letters (e.g., <code>_VERSION</code>); they are reserved for special uses in Lua.
Usually, I reserve the identifier <code>_</code> (a single underscore) for dummy variables.</p>
</div>
<div class="paragraph">
<p>The following words are reserved; we cannot use them as identifiers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d0d0d0">and</span> <span style="color: #aa759f">end</span> <span style="color: #aa759f">if</span> <span style="color: #d0d0d0">or</span> <span style="color: #aa759f">until</span> <span style="color: #aa759f">break</span> <span style="color: #d28445">false</span> <span style="color: #aa759f">in</span> <span style="color: #aa759f">repeat</span> <span style="color: #aa759f">while</span> <span style="color: #aa759f">do</span> <span style="color: #aa759f">for</span> <span style="color: #d28445">local</span>
<span style="color: #aa759f">return</span> <span style="color: #aa759f">else</span> <span style="color: #aa759f">function</span> <span style="color: #d0d0d0;background-color: #151515">nil</span> <span style="color: #aa759f">then</span> <span style="color: #aa759f">elseif</span> <span style="color: #d0d0d0;background-color: #151515">goto</span> <span style="color: #d0d0d0">not</span> <span style="color: #d28445">true</span></code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Lua is case-sensitive</div>
<div class="paragraph">
<p><code>and</code> is a reserved word, but <code>And</code> and <code>AND</code> are two different identifiers.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comments">6. Comments</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A comment is a code annotation that is ignored by the programming language.
Comments can be used to describe one or many lines of code, to document a program,
to temporarily disable code, or for any other reason.</p>
</div>
<div class="paragraph">
<p>They need to be prefixed by
two hyphens to be recognized by Lua and they can be put either on their own line
or at the end of another line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;This is normal code.&#34;</span><span style="color: #d0d0d0">)</span>
<span style="color: #505050">-- This is a comment</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;This is still normal code.&#34;</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- Comment at the end of a line of code.</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>These comments are called short comments. It is also possible to create long comments,
which start with a long bracket and can continue on many lines:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;This is normal code&#34;</span><span style="color: #d0d0d0">)</span>
<span style="color: #505050">--[[Line 1
Line 2
]]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Long brackets consist of two brackets in the middle of which any number of
equality signs may be put. That number is called the level of the long bracket.
Long brackets will continue until the next bracket of the same level, if there is one.</p>
</div>
<div class="paragraph">
<p>A long bracket with no equal sign is called a long bracket of level 0.
This approach makes it possible to use closing double brackets inside of
long comments by adding equal signs in the middle of the two brackets.
It is often useful to do this when using comments to disable blocks of code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #505050">--[==[
This is a comment that contains a closing long bracket of level 0 which is here:
 ]]
However, the closing double bracket doesn&#39;t make the comment end, because the
  comment was opened with an opening long bracket of level 2, and only a closing
  long bracket of level 2 can close it.
]==]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>In the example above, the closing long bracket of level 0 (<code>]]</code>) does not close the comment,
but the closing long bracket of level 2 (<code>]==]</code>) does.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Long comments can be more complex than that, as we will see in
the section called &#34;Long Strings&#34;.</p>
</div>
</blockquote>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_expressions">7. Expressions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Expressions are pieces of code that have a value and that can be
evaluated. They cannot be executed directly (with the exception of function calls), and
thus, a script that would contain only the following code, which consists of an expression,
would be erroneous:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #90a959">3</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">5</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>The code above is erroneous because all it contains is an expression.
The computer cannot execute <code>3 + 5</code>, since that does not make sense.</p>
</div>
<div class="paragraph">
<p>Code must be comprised of a sequence of statements. These statements can contain expressions
which will be values the statement has to manipulate or use to execute the instruction.</p>
</div>
<div class="paragraph">
<p>Some code examples in this chapter do not constitute valid code, because they consist of
only expressions. In the next chapter, statements will be covered and it will be possible to
start writing valid code.</p>
</div>
<div class="paragraph">
<p>Lua needs no separator between consecutive statements, but we can use a semicolon if
we wish. Line breaks play no role in Lua’s syntax; for instance, the following
four chunks are all valid and equivalent:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span>
<span style="color: #d0d0d0;background-color: #151515">b</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span>

<span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span>
<span style="color: #d0d0d0;background-color: #151515">b</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">;</span>

<span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span><span style="color: #d0d0d0">;</span> <span style="color: #d0d0d0;background-color: #151515">b</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span>
<span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span> <span style="color: #d0d0d0;background-color: #151515">b</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span> <span style="color: #505050">-- ugly, but valid</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_global_variables">8. Global Variables</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Global variables do not need declarations; we simply use them. It is not an error
to access a non-initialized variable; we just get the value nil as the result:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; b   --&gt; nil
&gt; b = 10
&gt; b   --&gt; 10</pre>
</div>
</div>
<div class="paragraph">
<p>If we assign nil to a global variable, Lua behaves as if we have never used the variable:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; b = nil
&gt; b   --&gt; nil</pre>
</div>
</div>
<div class="paragraph">
<p>Lua does not differentiate a non-initialized variable from one that we assigned nil.
After the assignment, Lua can eventually reclaim the memory used by the variable.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_types_and_values">9. Types and Values</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lua is a dynamically-typed language. There are no type definitions in the language;
each value carries its own type.</p>
</div>
<div class="paragraph">
<p>There are eight basic types in Lua:
<em>nil</em>, <em>Boolean</em>, <em>number</em>, <em>string</em>, <em>userdata</em>, <em>function</em>, <em>thread</em>, and <em>table</em>.
The function <code>type</code> gives the type name of any given value:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; type(nil)           --&gt; nil
&gt; type(true)          --&gt; boolean
&gt; type(10.4 * 3)      --&gt; number
&gt; type(&#34;Hello world&#34;) --&gt; string
&gt; type(io.stdin)      --&gt; userdata
&gt; type(print)         --&gt; function
&gt; type(type)          --&gt; function
&gt; type({})            --&gt; table
&gt; type(type(X))       --&gt; string</pre>
</div>
</div>
<div class="paragraph">
<p>The last line will result in “string” no matter the value of <code>X</code>,
because the result of <code>type</code> is always a string.</p>
</div>
<div class="paragraph">
<p>The userdata type allows arbitrary C data to be stored in Lua variables.
It has no predefined operations in Lua, except assignment and equality test.
Userdata are used to represent new types created by an application program or
a library written in C; for instance, the standard I/O library uses them to
represent open files. We will discuss more about userdata later,
when we get to the C API.</p>
</div>
<div class="paragraph">
<p>Variables have no predefined types; any variable can contain values of any type:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; type(a)          --&gt; nil    (&#39;a&#39; is not initialized)
&gt; a = 10
&gt; type(a)          --&gt; number
&gt; a = &#34;a string!!&#34;
&gt; type(a)          --&gt; string
&gt; a = nil
&gt; type(a)          --&gt; nil</pre>
</div>
</div>
<div class="paragraph">
<p>The list of data types for values are given below.</p>
</div>
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
Type
</td>
<td class="hdlist2">
<p>Description</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>nil</code>
</td>
<td class="hdlist2">
<p>Used to differentiate the value from having some data or no(nil) data.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>boolean</code>
</td>
<td class="hdlist2">
<p>Includes true and false as values. Generally used for condition checking.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>number</code>
</td>
<td class="hdlist2">
<p>Represents real(double precision floating point) numbers.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>string</code>
</td>
<td class="hdlist2">
<p>Represents array of characters.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>function</code>
</td>
<td class="hdlist2">
<p>Represents a method that is written in C or Lua.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>userdata</code>
</td>
<td class="hdlist2">
<p>Represents arbitrary C data.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>thread</code>
</td>
<td class="hdlist2">
<p>Represents independent threads of execution and it is used to implement coroutines.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>table</code>
</td>
<td class="hdlist2">
<p>Represent ordinary arrays, symbol tables, sets, records, graphs, trees, etc., and implements associative arrays. It can hold any value (except nil).</p>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Usually, when we use a single variable for different types, the result is messy code.
However, sometimes the judicious use of this facility is helpful,
for instance in the use of nil to differentiate a normal return
value from an abnormal condition.</p>
</div>
<div class="paragraph">
<p>By default, all the variables will point to nil until they are assigned a value
or initialized.</p>
</div>
<div class="paragraph">
<p>We will discuss now the simple types nil and Boolean.</p>
</div>
<div class="sect2">
<h3 id="_nil">9.1. Nil</h3>
<div class="paragraph">
<p>Nil is a type with a single value, nil, whose main property is to be different
from any other value. Lua uses nil as a kind of non-value, to represent the
absence of a useful value. As we have seen, a global variable has a nil value
by default, before its first assignment, and we can assign nil to a global
variable to delete it.</p>
</div>
</div>
<div class="sect2">
<h3 id="_booleans">9.2. Booleans</h3>
<div class="paragraph">
<p>The Boolean type has two values, <code>false</code> and <code>true</code>, which represent the
traditional Boolean values. However, Booleans do not hold a monopoly of
condition values: in Lua, any value can represent a condition. Conditional
tests (e.g., conditions in control structures) consider both the Boolean
<code>false</code> and <code>nil</code> as false and anything else as true. In particular, Lua
considers both zero and the empty string as <code>true</code> in conditional tests.</p>
</div>
<div class="paragraph">
<p>Throughout this book, I will write &#34;false&#34; to mean any false value, that is,
the Boolean <code>false</code> or nil. When I mean specifically the Boolean value, I will
write &#34;false&#34;. The same holds for &#34;true&#34; and “true”.</p>
</div>
<div class="paragraph">
<p>Lua supports a conventional set of logical operators: <code>and</code>, <code>or</code>, and <code>not</code>.
Like control structures, all logical operators consider both the Boolean
<code>false</code> and nil as false, and anything else as true. The result of the <code>and</code>
operator is its first operand if that operand is false; otherwise, the result
is its second operand.  The result of the <code>or</code> operator is its first operand if
it is not false; otherwise, the result is its second operand:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; 4 and 5           --&gt; 5
&gt; nil and 13        --&gt; nil
&gt; false and 13      --&gt; false
&gt; 0 or 5            --&gt; 0
&gt; false or &#34;hi&#34;     --&gt; &#34;hi&#34;
&gt; nil or false      --&gt; false</pre>
</div>
</div>
<div class="paragraph">
<p>Both <strong>and</strong> and <strong>or</strong> use short-circuit evaluation, that is, they evaluate
their second operand only when necessary. Short-circuit evaluation ensures that
expressions like (<code>i ~= 0 and a/i &gt; b</code>) do not cause run-time errors: Lua will
not try to evaluate <code>a / i</code> when <code>i</code> is zero.</p>
</div>
<div class="paragraph">
<p>A useful Lua idiom is <code>x = x or v</code>, which is equivalent to</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #aa759f">if</span> <span style="color: #d0d0d0">not</span> <span style="color: #d0d0d0;background-color: #151515">x</span> <span style="color: #aa759f">then</span> <span style="color: #d0d0d0;background-color: #151515">x</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">v</span> <span style="color: #aa759f">end</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>That is, it sets <code>x</code> to a default value <code>v</code> when <code>x</code> is not set
(provided that <code>x</code> is not set to <strong>false</strong>).</p>
</div>
<div class="paragraph">
<p>Another useful idiom is <code>((a and b) or c)</code> or simply <code>(a and b or c)</code>
(given that <code>and</code> has a higher precedence than <code>or</code>). It is equivalent to the C
expression <code>a ? b : c</code>, provided that <code>b</code> is not false. For instance, we can select
the maximum of two numbers <code>x</code> and <code>y</code> with the expression <code>(x &gt; y) and x or y</code>.
When <code>x &gt; y</code>, the first expression of the <strong>and</strong> is true, so the <strong>and</strong> results
in its second operand (<code>x</code>), which is always true (because it is a number),
and then the <strong>or</strong> expression results in the value of its first operand, <code>x</code>.
When <code>x &gt; y</code> is false, the <strong>and</strong> expression is false and so the <strong>or</strong> results
in its second operand, <code>y</code>.</p>
</div>
<div class="paragraph">
<p>The not operator always gives a Boolean value:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; not nil        --&gt; true
&gt; not false      --&gt; true
&gt; not 0          --&gt; false
&gt; not not 1      --&gt; true
&gt; not not nil    --&gt; false</pre>
</div>
</div>
<div class="paragraph">
<p>The following operators are often used with boolean values,
but can also be used with values of any data type:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;"/>
<col style="width: 33.3333%;"/>
<col style="width: 33.3334%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Operation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Syntax</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Boolean negation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>not a</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">If a is false or nil, returns true. Otherwise, returns false.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Logical conjunction</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a and b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the first argument if it is false or nil. Otherwise, returns the second argument.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Logical disjunction</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a or b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the first argument if it is neither false nor nil. Otherwise, returns the second argument.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Essentially, the <code>not</code> operator just negates the boolean value
(makes it false if it is true and makes it true if it is false),
the <code>and</code> operator returns true if both are true and false if not
and the <code>or</code> operator returns true if either of arguments is true and false otherwise.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">is_alive</span> <span style="color: #d0d0d0">=</span> <span style="color: #d28445">true</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">is_alive</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- true</span>

<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">is_alive</span> <span style="color: #d0d0d0">=</span> <span style="color: #d28445">false</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">is_alive</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- false</span></code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_numbers">9.3. Numbers</h3>
<div class="paragraph">
<p>Numbers generally represent quantities, but they can be used for many other things. The
number type in Lua works mostly in the same way as real numbers.</p>
</div>
<div class="paragraph">
<p>Numbers can be constructed as integers, decimal numbers, decimal exponents or
even in hexadecimal. Here are some valid numbers:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>3</code></p>
</li>
<li>
<p><code>3.0</code></p>
</li>
<li>
<p><code>3.1416</code></p>
</li>
<li>
<p><code>314.16e-2</code></p>
</li>
<li>
<p><code>0.31416E1</code></p>
</li>
<li>
<p><code>0xff</code></p>
</li>
<li>
<p><code>0x56</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #505050">-- The Lua</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">b</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">2</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">c</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">a</span> <span style="color: #d0d0d0">+</span> <span style="color: #d0d0d0;background-color: #151515">b</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">c</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- 3</span>

<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">d</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">b</span> <span style="color: #d0d0d0">-</span> <span style="color: #d0d0d0;background-color: #151515">a</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">d</span><span style="color: #d0d0d0">)</span>

<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">x</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">3</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">4</span> <span style="color: #505050">-- 12</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">x</span><span style="color: #d0d0d0">)</span>

<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">y</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">(</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">+</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">)</span> <span style="color: #d0d0d0">*</span> <span style="color: #90a959">2</span> <span style="color: #505050">-- 8</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">y</span><span style="color: #d0d0d0">)</span>

<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">10</span> <span style="color: #d0d0d0">/</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- 5</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">2</span> <span style="color: #d0d0d0">^</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- 4</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">5</span> <span style="color: #d0d0d0">%</span> <span style="color: #90a959">2</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- 1</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">-</span><span style="color: #d0d0d0;background-color: #151515">b</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- -2</span>

<span style="color: #505050">-- Incerment</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">level</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">1</span>
<span style="color: #d0d0d0;background-color: #151515">level</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0;background-color: #151515">level</span> <span style="color: #d0d0d0">+</span> <span style="color: #90a959">1</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">level</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_arithmetic_operations">9.3.1. Arithmetic operations</h4>
<div class="paragraph">
<p>The operators for numbers in Lua are the following:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;"/>
<col style="width: 25%;"/>
<col style="width: 25%;"/>
<col style="width: 25%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Operation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Syntax</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
<th class="tableblock halign-left valign-top"><strong>Example</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Arithmetic negation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>-a</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Changes the sign of a and returns the value</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>-3.14159</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Addition</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a + b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the sum of <code>a</code> and <code>b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5.2 + 3.6</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Subtraction</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a - b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Subtracts b from a and returns the result</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5.2 + 3.6</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Multiplication</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a * b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the product of a and b</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>3.2 _ 1.5</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Exponentiation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a ^ b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns a to the power b, or the exponentiation of a by b</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5 ˆ 2</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Division</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a / b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Divides a by b and returns the result</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>6.4 / 2</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Modulus operation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a % b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the remainder of the division of a by b</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5 % 3</code></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_integers">9.3.2. Integers</h4>
<div class="paragraph">
<p>A new subtype of numbers, integers, was added in Lua 5.3. Numbers can be either
integers or floats.  Floats are similar to numbers as described above, while
integers are numbers with
no decimal part.</p>
</div>
<div class="paragraph">
<p>Float division (<code>/</code>) and exponentiation always convert their operands to
floats, while all other operators give integers if their two operands were
integers.  In other cases, with the exception of the floor division operator
(<code>//</code>) the result is a float.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_strings">9.4. Strings</h3>
<div class="paragraph">
<p>Strings are sequences of characters that can be used to represent text. They can be written
in Lua by being contained in double quotes, single quotes or long brackets
(it should be noted that comments and
strings have nothing in common other than the fact they can both be delimited by long
brackets, preceded by two hyphens in the case of comments).</p>
</div>
<div class="paragraph">
<p>Strings that aren’t contained
in long brackets will only continue for one line. Because of this, the only way to make a
string that contains many lines without using long brackets is to use escape sequences. This
is also the only way to insert single or double quotes in certain cases.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>&#39; &#39;</code></p>
</li>
<li>
<p><code>&#34; &#34;</code></p>
</li>
<li>
<p><code>[[ ]]</code></p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">phrase</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">[[My name is ]]</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">name</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#39;P J&#39;</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">phrase</span> <span style="color: #d0d0d0">..</span> <span style="color: #d0d0d0;background-color: #151515">name</span><span style="color: #d0d0d0">)</span> <span style="color: #505050">-- My name is P J</span>

<span style="color: #505050">-- Strings and Numbers</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">age</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">21</span>
<span style="color: #d28445">local</span> <span style="color: #d0d0d0;background-color: #151515">name</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;Billy&#34;</span>
<span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0;background-color: #151515">name</span> <span style="color: #d0d0d0">..</span> <span style="color: #90a959">&#34; is &#34;</span> <span style="color: #d0d0d0">..</span> <span style="color: #d0d0d0;background-color: #151515">age</span> <span style="color: #d0d0d0">..</span> <span style="color: #90a959">&#34; Years old&#34;</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>Escape sequence characters are used in string to change the normal
interpretation of characters.</p>
</div>
<div class="paragraph">
<p>For example, to print double inverted commas
<code>(&#34;&#34;)</code>, we have to use <code>\&#34;</code> in the string.</p>
</div>
<div class="paragraph">
<p>The escape sequence and its use is listed below in the table.</p>
</div>
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
<strong>Escape Sequence</strong>
</td>
<td class="hdlist2">
<p><strong>Use</strong></p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\a</code>
</td>
<td class="hdlist2">
<p>Bell</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\b</code>
</td>
<td class="hdlist2">
<p>Backspace</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\f</code>
</td>
<td class="hdlist2">
<p>Formfeed</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\n</code>
</td>
<td class="hdlist2">
<p>New line</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\r</code>
</td>
<td class="hdlist2">
<p>Carriage return</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\t</code>
</td>
<td class="hdlist2">
<p>Tab</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\v</code>
</td>
<td class="hdlist2">
<p>Vertical tab</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\\</code>
</td>
<td class="hdlist2">
<p>Backslash</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\&#34;</code>
</td>
<td class="hdlist2">
<p>Double quotes</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\&#39;</code>
</td>
<td class="hdlist2">
<p>Single quotes</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\[</code>
</td>
<td class="hdlist2">
<p>Left square bracket</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\]</code>
</td>
<td class="hdlist2">
<p>Right square bracket</p>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>It is possible to get the length of a string, as a number, by using the unary length operator
(<code>#</code>):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="lua"><span style="color: #d0d0d0;background-color: #151515">print</span><span style="color: #d0d0d0">(</span><span style="color: #d0d0d0">#</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;This is a string&#34;</span><span style="color: #d0d0d0">))</span> <span style="color: #505050">--&gt; 16</span></code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_concatenation">9.4.1. Concatenation</h4>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>In <a href="https://en.wikipedia.org/wiki/formal%20language">formal language theory</a> and
<a href="https://en.wikipedia.org/wiki/computer%20programming">computer programming</a>
<em>string concatenation</em> is the operation of joining two character
<a href="https://en.wikipedia.org/wiki/character%20string%20%28computer%20science%29">strings</a>
end-to-end.</p>
</div>
<div class="exampleblock">
<div class="title">Example 1. &#34;snowball&#34;</div>
<div class="content">
<div class="paragraph">
<p>The concatenation of &#34;snow&#34; and &#34;ball&#34;.</p>
</div>
</div>
</div>
</blockquote>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_types">9.5. Other types</h3>
<div class="paragraph">
<p>The four basic types in Lua (numbers, booleans, nil and strings) have been described in
the previous sections, but four types are missing:
functions, tables, userdata and threads.</p>
</div>
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
Functions
</td>
<td class="hdlist2">
<p>Pieces of code that can be called, receive values and return values back.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
Tables
</td>
<td class="hdlist2">
<p>Data structures that can be used for data manipulation.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
Userdata
</td>
<td class="hdlist2">
<p>Used internally by applications Lua is embedded in to allow
Lua to communicate with that program through objects controlled by the
application.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
Threads
</td>
<td class="hdlist2">
<p>Used by coroutines, which allow many functions to run at the <em>same time</em>.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_literals">10. Literals</h2>
<div class="sectionbody">

</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Golang</title>
      <link>https://hossein-lap.github.io/docs/go/</link>
      <pubDate>Tue, 02 Apr 2024 22:30:03 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/go/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><strong>Insert Lead paragraph here.</strong></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_new_stuff">1. New stuff</h2>
<div class="sectionbody">
<div class="paragraph">
<p>very versile</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_more_stuff">2. more stuff</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="go"><span style="color: #aa759f">package</span> <span style="color: #d0d0d0;background-color: #151515">main</span>

<span style="color: #aa759f">import</span> <span style="color: #d0d0d0">(</span>
    <span style="color: #90a959">&#34;fmt&#34;</span>
<span style="color: #d0d0d0">)</span>

<span style="color: #aa759f">func</span> <span style="color: #d0d0d0;background-color: #151515">main</span><span style="color: #d0d0d0">()</span> <span style="color: #d0d0d0">{</span>
    <span style="color: #d0d0d0;background-color: #151515">fmt</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">Printf</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;This is a simple test!</span><span style="color: #8f5536">\n</span><span style="color: #90a959">&#34;</span><span style="color: #d0d0d0">)</span>
<span style="color: #d0d0d0">}</span></code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>AsciiDoc(tor): Yo Dawg!</title>
      <link>https://hossein-lap.github.io/docs/asciidoc/</link>
      <pubDate>Tue, 02 Apr 2024 22:09:44 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/asciidoc/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_intro">1. Intro</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Okay, let’s do it.</p>
</div>
<div class="listingblock">
<div class="title">Test</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="c"><span style="color: #aa759f">const</span> <span style="color: #d28445">char</span> <span style="color: #d0d0d0">*</span><span style="color: #d0d0d0;background-color: #151515">colorname</span><span style="color: #d0d0d0">[]</span> <span style="color: #d0d0d0">=</span> <span style="color: #d0d0d0">{</span>

  <span style="color: #505050">/* 8 normal colors */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">0</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#050D0D&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* black   */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">1</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#546168&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* red     */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">2</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#B94730&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* green   */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">3</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#EC5727&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* yellow  */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">4</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#F2AD59&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* blue    */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">5</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#557886&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* magenta */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">6</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#967D82&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* cyan    */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">7</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#adbdc3&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* white   */</span>

  <span style="color: #505050">/* 8 bright colors */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">8</span><span style="color: #d0d0d0">]</span>  <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#798488&#34;</span><span style="color: #d0d0d0">,</span>  <span style="color: #505050">/* black   */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">9</span><span style="color: #d0d0d0">]</span>  <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#546168&#34;</span><span style="color: #d0d0d0">,</span>  <span style="color: #505050">/* red     */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">10</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#B94730&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* green   */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">11</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#EC5727&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* yellow  */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">12</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#F2AD59&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* blue    */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">13</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#557886&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* magenta */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">14</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#967D82&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* cyan    */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">15</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#adbdc3&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* white   */</span>

  <span style="color: #505050">/* special colors */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">256</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#050D0D&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* background */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">257</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#adbdc3&#34;</span><span style="color: #d0d0d0">,</span> <span style="color: #505050">/* foreground */</span>
  <span style="color: #d0d0d0">[</span><span style="color: #90a959">258</span><span style="color: #d0d0d0">]</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">&#34;#adbdc3&#34;</span><span style="color: #d0d0d0">,</span>     <span style="color: #505050">/* cursor */</span>
<span style="color: #d0d0d0">};</span>

<span style="color: #505050">/* Default colors (colorname index)
 * foreground, background, cursor */</span>
 <span style="color: #d28445">unsigned</span> <span style="color: #d28445">int</span> <span style="color: #d0d0d0;background-color: #151515">defaultbg</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">0</span><span style="color: #d0d0d0">;</span>
 <span style="color: #d28445">unsigned</span> <span style="color: #d28445">int</span> <span style="color: #d0d0d0;background-color: #151515">defaultfg</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">257</span><span style="color: #d0d0d0">;</span>
 <span style="color: #d28445">unsigned</span> <span style="color: #d28445">int</span> <span style="color: #d0d0d0;background-color: #151515">defaultcs</span> <span style="color: #d0d0d0">=</span> <span style="color: #90a959">258</span><span style="color: #d0d0d0">;</span>
 <span style="color: #d28445">unsigned</span> <span style="color: #d28445">int</span> <span style="color: #d0d0d0;background-color: #151515">defaultrcs</span><span style="color: #d0d0d0">=</span> <span style="color: #90a959">258</span><span style="color: #d0d0d0">;</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lists">2. Lists</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_unordered_lists">2.1. Unordered lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">* level 1
** level 2
*** level 3
**** level 4
***** level 5
* level 1</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 1. Output</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p>level 1</p>
<div class="ulist">
<ul>
<li>
<p>level 2</p>
<div class="ulist">
<ul>
<li>
<p>level 3</p>
<div class="ulist">
<ul>
<li>
<p>level 4</p>
<div class="ulist">
<ul>
<li>
<p>level 5</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>level 1</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_ordered_lists">2.2. Ordered lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">. level 1
.. level 2
... level 3
.... level 4
..... level 5
. level 1</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 2. Output</div>
<div class="content">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>level 1</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>level 2</p>
<div class="olist lowerroman">
<ol class="lowerroman" type="i">
<li>
<p>level 3</p>
<div class="olist upperalpha">
<ol class="upperalpha" type="A">
<li>
<p>level 4</p>
<div class="olist upperroman">
<ol class="upperroman" type="I">
<li>
<p>level 5</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
<li>
<p>level 1</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_todo_lists">2.3. TODO lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">- [*] checked
- [x] also checked
- [ ] not checked
- normal list item</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 3. Output</div>
<div class="content">
<div class="ulist checklist">
<ul class="checklist">
<li>
<p><i class="fa fa-check-square-o"></i> checked</p>
</li>
<li>
<p><i class="fa fa-check-square-o"></i> also checked</p>
</li>
<li>
<p><i class="fa fa-square-o"></i> not checked</p>
</li>
<li>
<p>normal list item</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_separating_lists">2.4. Separating lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">. Apples
. Oranges

//-

. Walnuts
. Almonds</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 4. Output</div>
<div class="content">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Apples</p>
</li>
<li>
<p>Oranges</p>
</li>
</ol>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Walnuts</p>
</li>
<li>
<p>Almonds</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_definitions">3. Definitions</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_normal_definition_list">3.1. Normal definition list</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">first term:: definition of first term
section term:: definition of second term</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 5. Output</div>
<div class="content">
<div class="dlist">
<dl>
<dt class="hdlist1">first term</dt>
<dd>
<p>definition of first term</p>
</dd>
<dt class="hdlist1">section term</dt>
<dd>
<p>definition of second term</p>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_horizontal_definition_list">3.2. Horizontal definition list</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">[horizontal]
first term:: definition of first term
section term:: definition of second term</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 6. Output</div>
<div class="content">
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
ghis is a very very first term
</td>
<td class="hdlist2">
<p>definition of first term</p>
</td>
</tr>
<tr>
<td class="hdlist1">
section term
</td>
<td class="hdlist2">
<p>definition of second term</p>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_multi_line_definition_list">3.3. Multi-line definition list</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">first term::
definition of first term
section term::
definition of second term</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 7. Output</div>
<div class="content">
<div class="dlist">
<dl>
<dt class="hdlist1">first term</dt>
<dd>
<p>definition of first term</p>
</dd>
<dt class="hdlist1">section term</dt>
<dd>
<p>definition of second term</p>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_qa">3.4. Q&amp;A</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">[qanda]
What is Asciidoctor?::
An implementation of the AsciiDoc processor in Ruby.
What is the answer to the Ultimate Question?:: 42</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 8. Output</div>
<div class="content">
<div class="qlist qanda">
<ol>
<li>
<p><em>What is Asciidoctor?</em></p>
<p>An implementation of the AsciiDoc processor in Ruby.</p>
</li>
<li>
<p><em>What is the answer to the Ultimate Question?</em></p>
<p>42</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_mixed">3.5. Mixed</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">Operating Systems::
    Linux:::
        . Fedora
            * Desktop
        . Ubuntu
            * Desktop
            * Server
    BSD:::
        . FreeBSD
        . NetBSD
Cloud Providers::
    PaaS:::
        . OpenShift
        . CloudBees
    IaaS:::
        . Amazon EC2
        . Rackspace</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 9. Output</div>
<div class="content">
<div class="dlist">
<dl>
<dt class="hdlist1">Operating Systems</dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1">Linux</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Fedora</p>
<div class="ulist">
<ul>
<li>
<p>Desktop</p>
</li>
</ul>
</div>
</li>
<li>
<p>Ubuntu</p>
<div class="ulist">
<ul>
<li>
<p>Desktop</p>
</li>
<li>
<p>Server</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
</dd>
<dt class="hdlist1">BSD</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>FreeBSD</p>
</li>
<li>
<p>NetBSD</p>
</li>
</ol>
</div>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">Cloud Providers</dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1">PaaS</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>OpenShift</p>
</li>
<li>
<p>CloudBees</p>
</li>
</ol>
</div>
</dd>
<dt class="hdlist1">IaaS</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Amazon EC2</p>
</li>
<li>
<p>Rackspace</p>
</li>
</ol>
</div>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Note that the indentation is optional
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_complex_content_in_outline_lists">3.6. Complex content in outline lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">* Every list item has at least one paragraph of content,
  which may be wrapped, even using a hanging indent.
+
Additional paragraphs or blocks are adjoined by putting
a list continuation on a line adjacent to both blocks.
+
list continuation:: a plus sign (`{plus}`) on a line by itself

* A literal paragraph does not require a list continuation.

 $ gem install asciidoctor

* AsciiDoc lists may contain any complex content.
+
[cols=&#34;2&#34;, options=&#34;header&#34;]
|===
|Application
|Language
|AsciiDoc
|Python
|Asciidoctor
|Ruby
|===</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 10. Output</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Every list item has at least one paragraph of content,
which may be wrapped, even using a hanging indent.</p>
<div class="paragraph">
<p>Additional paragraphs or blocks are adjoined by putting
a list continuation on a line adjacent to both blocks.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">list continuation</dt>
<dd>
<p>a plus sign (<code>+</code>) on a line by itself</p>
</dd>
</dl>
</div>
</li>
<li>
<p>A literal paragraph does not require a list continuation.</p>
<div class="literalblock">
<div class="content">
<pre>$ gem install asciidoctor</pre>
</div>
</div>
</li>
<li>
<p>AsciiDoc lists may contain any complex content.</p>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Application</th>
<th class="tableblock halign-left valign-top">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">AsciiDoc</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Python</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Asciidoctor</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Ruby</p></td>
</tr>
</tbody>
</table>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_links">4. Links</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_external">4.1. External</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">http://asciidoctor.org - automatic!

http://asciidoctor.org[Asciidoctor]

https://github.com/asciidoctor[Asciidoctor @ *GitHub*]</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 11. Output</div>
<div class="content">
<div class="paragraph">
<p><a href="http://asciidoctor.org" class="bare">http://asciidoctor.org</a> - automatic!</p>
</div>
<div class="paragraph">
<p><a href="http://asciidoctor.org">Asciidoctor</a></p>
</div>
<div class="paragraph">
<p><a href="https://github.com/asciidoctor">Asciidoctor @ <strong>GitHub</strong></a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_relative">4.2. Relative</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">link:test.adoc[Docs]</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 12. Output</div>
<div class="content">
<div class="paragraph">
<p><a href="test.adoc">Docs</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_email_and_irc">4.3. Email and IRC</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">devel@discuss.arquillian.org

mailto:devel@discuss.arquillian.org[Discuss Arquillian]

mailto:devel-join@discuss.arquillian.org[Subscribe, Subscribe me, I want to join!]

irc://irc.freenode.org/#asciidoctor</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 13. Output</div>
<div class="content">
<div class="paragraph">
<p><a href="mailto:devel@discuss.arquillian.org">devel@discuss.arquillian.org</a></p>
</div>
<div class="paragraph">
<p><a href="mailto:devel@discuss.arquillian.org">Discuss Arquillian</a></p>
</div>
<div class="paragraph">
<p><a href="mailto:devel-join@discuss.arquillian.org?subject=Subscribe+me&amp;body=I+want+to+join%21">Subscribe</a></p>
</div>
<div class="paragraph">
<p><a href="irc://irc.freenode.org/#asciidoctor" class="bare">irc://irc.freenode.org/#asciidoctor</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_inline_anchors">4.4. Inline anchors</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">[[bookmark-a]]Inline anchors make arbitrary content referenceable.

anchor:bookmark-b[]Use a cross reference to link to this location.</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 14. Output</div>
<div class="content">
<div class="paragraph">
<p><a id="bookmark-a"></a>Inline anchors make arbitrary content referenceable.</p>
</div>
<div class="paragraph">
<p><a id="bookmark-b"></a>Use a cross reference to link to this location.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_internal_cross_references">4.5. Internal cross references</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">See &lt;&lt;paragraphs&gt;&gt; to learn how to write paragraphs.

Learn how to organize the document into &lt;&lt;section-titles,sections&gt;&gt;.</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 15. Output</div>
<div class="content">
<div class="paragraph">
<p>See <a href="#paragraphs">[paragraphs]</a> to learn how to write paragraphs.</p>
</div>
<div class="paragraph">
<p>Learn how to organize the document into <a href="#section-titles">sections</a>.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_images">4.6. Images</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">image::/images/asciidoc/rose.png[]

image::/images/asciidoc/rose.png[Rose]

[[img-sunset]]

image::/images/asciidoc/rose.png[caption=&#34;Figure 1: &#34;, title=&#34;A rose&#34;, alt=&#34;Rose&#34;, width=&#34;300&#34;, height=&#34;200&#34;, link=&#34;http://www.flickr.com/photos/javh/5448336655&#34;]

image::http://asciidoctor.org/images/octocat.jpg[GitHub mascot]</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 16. Output</div>
<div class="content">
<div class="imageblock">
<div class="content">
<img src="/images/asciidoc/rose.png" alt="rose"/>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/images/asciidoc/rose.png" alt="Rose"/>
</div>
</div>
<div id="img-sunset" class="imageblock">
<div class="content">
<a class="image" href="http://www.flickr.com/photos/javh/5448336655"><img src="/images/asciidoc/rose.png" alt="Rose" width="300" height="200"/></a>
</div>
<div class="title">Figure 1: A rose</div>
</div>
<div class="imageblock">
<div class="content">
<img src="http://asciidoctor.org/images/octocat.jpg" alt="GitHub mascot"/>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_admonition_paragraph">5. Admonition paragraph</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_note">5.1. NOTE</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">NOTE: This is a NOTE!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 17. Output</div>
<div class="content">
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
This is a NOTE!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_tip">5.2. TIP</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">TIP: This is a TIP!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 18. Output</div>
<div class="content">
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
This is a TIP!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_warning">5.3. WARNING</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">WARNING: This is a WARNING!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 19. Output</div>
<div class="content">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
This is a WARNING!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_caution">5.4. CAUTION</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">CAUTION: This is a CAUTION!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 20. Output</div>
<div class="content">
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-caution" title="Caution"></i>
</td>
<td class="content">
This is a CAUTION!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_important">5.5. IMPORTANT</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">IMPORTANT: This is a IMPORTANT!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 21. Output</div>
<div class="content">
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
This is a IMPORTANT!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_admonition_blocks">5.6. Admonition blocks</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">[NOTE]
====
This is an example of an admonition block.
Unlike an admonition paragraph, it may contain any AsciiDoc content.
The style can be any one of the admonition labels:

* NOTE
* TIP
* WARNING
* CAUTION
* IMPORTANT
====</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 22. Output</div>
<div class="content">
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This is an example of an admonition block.
Unlike an admonition paragraph, it may contain any AsciiDoc content.
The style can be any one of the admonition labels:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>NOTE</p>
</li>
<li>
<p>TIP</p>
</li>
<li>
<p>WARNING</p>
</li>
<li>
<p>CAUTION</p>
</li>
<li>
<p>IMPORTANT</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_blocks">6. Blocks</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_listing_block">6.1. Listing block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">-----
This is a **_listing block_**
-----</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 23. Output</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre>This is a **_listing block_**</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_example_block">6.2. Example block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">=====
This is a **_example block_**
=====</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 24. Output</div>
<div class="content">
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>This is a <strong><em>example block</em></strong></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_comment_block">6.3. Comment block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">////
This is a **_comment block_**
////</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 25. Output</div>
<div class="content">

</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_literal_block">6.4. Literal block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">....
This is a **_literal block_**
....</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 26. Output</div>
<div class="content">
<div class="literalblock">
<div class="content">
<pre>This is a **_literal block_**</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_pass_block">6.5. Pass block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">++++
== This is raw text
++++</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 27. Output</div>
<div class="content">
== This is raw text
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_quoteverse_block">6.6. Quote/Verse block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">____
This is a very very simple quote
____</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 28. Output</div>
<div class="content">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>This is a very very simple quote</p>
</div>
</blockquote>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_blockqoutes">6.6.1. blockqoutes</h4>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">.After landing the cloaked Klingon bird of prey in Golden Gate park:
[quote,Captain James T. Kirk,Star Trek IV: The Voyage Home]
Everybody remember where we parked.</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 29. Output</div>
<div class="content">
<div class="quoteblock">
<div class="title">After landing the cloaked Klingon bird of prey in Golden Gate park:</div>
<blockquote>
Everybody remember where we parked.
</blockquote>
<div class="attribution">
— Captain James T. Kirk<br/>
<cite>Star Trek IV: The Voyage Home</cite>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_sidebar_block">6.7. Sidebar block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">.Some Title
****
This is a Sidebar block -- I have no idea why it&#39;s called `sidebar`
****</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 30. Output</div>
<div class="content">
<div class="sidebarblock">
<div class="content">
<div class="title">Some Title</div>
<div class="paragraph">
<p>This is a Sidebar block — I have no idea why it’s called <code>sidebar</code></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_block_metadata">6.8. Block metadata</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="asciidoc">.Gettysburg Address
[[gettysburg]]
[quote, Abraham Lincoln, Soldiers&#39; National Cemetery Dedication]
----
Four score and seven years ago our fathers brought forth
on this continent a new nation...
Now we are engaged in a great civil war, testing whether
that nation, or any nation so conceived and so dedicated,
can long endure. ...
----</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 31. Output</div>
<div class="content">
<div id="gettysburg" class="listingblock">
<div class="title">Gettysburg Address</div>
<div class="content">
<pre>Four score and seven years ago our fathers brought forth
on this continent a new nation...
Now we are engaged in a great civil war, testing whether
that nation, or any nation so conceived and so dedicated,
can long endure. ...</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_customization_wip">7. Customization (WIP)</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_render_wip">8. Render (WIP)</h2>
<div class="sectionbody">

</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Elixir</title>
      <link>https://hossein-lap.github.io/docs/elixir/</link>
      <pubDate>Tue, 02 Apr 2024 22:09:44 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/elixir/</guid>
      <description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Elixir is a dynamically-typed functional programming language.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_intractive_elixir_environment">1. Intractive elixir environment</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash"><span style="color: #d0d0d0;background-color: #151515">$ </span>iex</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hello_world">2. Hello World!</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="title">intro.exs</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="elixir"><span style="color: #505050">#!/bin/elixir</span>
<span style="color: #f4bf75">IO</span><span style="color: #d0d0d0">.</span><span style="color: #d0d0d0;background-color: #151515">puts</span><span style="color: #d0d0d0">(</span><span style="color: #90a959">&#34;Hello&#34;</span> <span style="color: #d0d0d0">&lt;&gt;</span> <span style="color: #90a959">&#34; Elixir!!&#34;</span><span style="color: #d0d0d0">)</span></code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_build_tool">3. Build Tool</h2>
<div class="sectionbody">
<div class="literalblock">
<div class="content">
<pre>mix help
mix new
mix compile
mix test
mix run</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Create</div>
<div class="content">
<pre class="rouge highlight" style="color: #d0d0d0;background-color: #151515"><code data-lang="bash">mix new example</code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>About</title>
      <link>https://hossein-lap.github.io/about/</link>
      <pubDate>Wed, 29 Mar 2023 22:14:09 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/about/</guid>
      <description><![CDATA[<div class="paragraph">
<p>Hi I’m Hossein</p>
</div>
<div class="paragraph">
<p>Yet another minimalist person with a passion about Open Source Software.</p>
</div>
<div class="paragraph">
<p>I was a Computer guy from my early days back in my 1st and 2nd grade.
But all I did was playing video games. Until my dad came to me and said:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Don’t just play video games kid, it can do much more than that. try to
learn it.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>And that was it. It became the goal of my life :)</p>
</div>
<div class="sect1">
<h2 id="_programming">1. Programming</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I have a solid background with writing and patching softwares in some
programming languages (<code>C</code> <code>Lua</code> <code>Go</code> <code>Bash</code> <code>Python</code>) by <em>mostly</em> using some
tools that required a little programming knowledge to modify / configure or
extend.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Let me give you an example:</div>
<div class="paragraph">
<p>I wanted to learn Python language so I needed to take some notes, I decided to
use LaTeX for that matter and my notes were getting dirty, I was losing some of
them, they’re getting out-of-hand, then I’ve decided to use git for managing
them.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>I learned <code>C</code> by patching / configuring the <a href="https://suckless.org">suckless</a>
tools, <code>Lua</code> by configuring <a href="https://neovim.io">neovim</a> and writing plugins for it, <code>Bash</code> by using
it daily with &#34;Live inside terminal&#34; approach. of cource I’ve also read books
and documentations for them eventually. <code>Python</code> and <code>Go</code> are the ones that I
really sat-down and read books / docs about them from the beginning of the
journey.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_workflow">2. Workflow</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A simple guy likes simplicity.</p>
</div>
<div class="paragraph">
<p>I use <a href="https://st.suckless.org">st</a> as my terminal emulator.
I have <a href="https://vim.org">vim</a> (or <a href="https://neovim.io">neovim</a> I’m fine with both)
as my text editor in my pocket, <a href="https://github.com/tmux/tmux/wiki">tmux</a> as
multiplexer / session-manager by my side, I have a home in any window manger
(but I perfer it to be inside <a href="https://dwm.suckless.org">dwm</a> over the other).
Also for some bidirectional papers and documents I’ve let the little evil in,
<a href="https://github.com/doomemacs/doomemacs">(doom) emacs</a>.</p>
</div>
<div class="paragraph">
<p>To be honest, I just need a POSIX-complaint shell, tmux, vim and git.
All of these can be repleaced and I’m fine with their alternatives.</p>
</div>
<div class="sect2">
<h3 id="_operating_system">2.1. Operating System</h3>
<div class="paragraph">
<p>Currently (as of June 21, 2024) I’m using NixOS as my daily-driver OS.</p>
</div>
<div class="paragraph">
<p>I enjoy NixOS’s approach and its reproducability, just starting to like Nix
language / packages manager. I’ve wanted to learn a functional programming
language anyway (I still might go for Elixir) so, that’s might be it,
who knows ;)</p>
</div>
<div class="paragraph">
<p>Update (September 14, 2024): Back to my good old
<a href="https://voidlinux.org">Void Linux</a> for a while now.</p>
</div>
<div class="paragraph">
<p>I’m very fine and comfortable with most of other Linux Distributions out there.
I’ve started using Linux with Ubuntu 18.04, shortly moved to Linux mint 18
and used it about a 6 to 10 months, after that I went for Manjaro xfce,
installed it, used it for about 3 or so months and then, I installed Manjaro i3.</p>
</div>
<div class="paragraph">
<p>The emphasizing <strong>Manjaro i3</strong> is because it really changed the way I look at a
GUI.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_wip">3. WIP</h2>
<div class="sectionbody">

</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Resume</title>
      <link>https://hossein-lap.github.io/resume/</link>
      <pubDate>Wed, 29 Mar 2023 22:14:09 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/resume/</guid>
      <description><![CDATA[<div class="paragraph">
<p>Welcome to my blog. I’m Hossein (aka &#34;pj&#34; or &#34;hos&#34;) and I’ll be posting my own
notes, ideas, programs and other stuffs. I am a Programmer / DevOps Engineer
with passions about open-source software and trees. Personally I enjoy
minimalism and simpleness of things.</p>
</div>
<div class="paragraph">
<p>Also, I use vim btw ;)</p>
</div>
<div class="quoteblock">
<div class="title"><strong>Bookshelf</strong></div>
<blockquote>
<div class="dlist">
<dl>
<dt class="hdlist1">Languages</dt>
<dd>
<p><code>Lua</code>, <code>Go</code>, <code>C</code>, <code>Bash</code>, <code>Perl</code></p>
</dd>
<dt class="hdlist1">Tools</dt>
<dd>
<p><code>Linux</code>, <code>Git</code>, <code>Docker</code>, <code>Kubernetes</code>, <code>Ansible</code>, <code>QEMU/KVM</code>, <code>Vim</code>, <code>tmux</code></p>
</dd>
<dt class="hdlist1">Writing</dt>
<dd>
<p><code>LaTeX</code>, <code>Groff</code>, <code>Asciidoc</code>, <code>Markdown</code></p>
</dd>
<dt class="hdlist1">Hobbies</dt>
<dd>
<p><code>Coding</code>, <code>Writing</code>, <code>Biking</code>, <code>Volleyball</code>, <code>Fishing</code>, <code>Music</code>, <code>Movies</code></p>
</dd>
</dl>
</div>
</blockquote>
</div>
<div class="sect1">
<h2 id="_the_journey">1. The journey</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I was a Computer guy from my early days back in my 1st and 2nd grade.
But all I did was playing video games. Until my dad came to me and said:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Don’t just play video games kid, it can do much more than that. try to
learn it.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>And that was it. It became the goal of my life :)</p>
</div>
<div class="sect2">
<h3 id="_programming">1.1. Programming</h3>
<div class="paragraph">
<p>I have a solid background with writing and patching softwares in some
programming languages (<code>C</code>, <code>Lua</code>, <code>Go</code>, <code>Bash</code>, <code>Python</code>) by <em>mostly</em> using some
tools that required a little programming knowledge to modify / configure or
extend.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Let me give you an example:</div>
<div class="paragraph">
<p>I wanted to learn Python language so I needed to take some notes, I decided to
use LaTeX for that matter and my notes were getting dirty, I was losing some of
them, they’re getting out-of-hand, then I’ve decided to use git for managing
them.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>I learned <code>C</code> by patching / configuring the <a href="https://suckless.org">suckless</a>
tools, <code>Lua</code> by configuring <a href="https://neovim.io">neovim</a> and writing plugins for it, <code>Bash</code> by using
it daily with &#34;Live inside terminal&#34; approach. of cource I’ve also read books
and documentations for them eventually. <code>Python</code> and <code>Go</code> are the ones that I
really sat-down and read books / docs about them from the beginning of the
journey.</p>
</div>
</div>
<div class="sect2">
<h3 id="_workflow">1.2. Workflow</h3>
<div class="paragraph">
<p>A simple guy likes simplicity.</p>
</div>
<div class="paragraph">
<p>I use <a href="https://st.suckless.org">st</a> as my terminal emulator.
I have <a href="https://vim.org">vim</a> (or <a href="https://neovim.io">neovim</a> I’m fine with both)
as my text editor in my pocket, <a href="https://github.com/tmux/tmux/wiki">tmux</a> as
multiplexer / session-manager by my side, I have a home in any window manger
(but I perfer it to be inside <a href="https://dwm.suckless.org">dwm</a> over the other).
Also for some bidirectional papers and documents I’ve let the little evil in,
<a href="https://github.com/doomemacs/doomemacs">(doom) emacs</a>.</p>
</div>
<div class="paragraph">
<p>To be honest, I just need a POSIX-complaint shell, tmux, vim and git.
All of these can be repleaced and I’m fine with their alternatives.</p>
</div>
<div class="sect3">
<h4 id="_operating_system">1.2.1. Operating System</h4>
<div class="paragraph">
<p>Currently (as of June 21, 2024) I’m using NixOS as my daily-driver OS.</p>
</div>
<div class="paragraph">
<p>I enjoy NixOS’s approach and its reproducability, just starting to like Nix
language / packages manager. I’ve wanted to learn a functional programming
language anyway (I still might go for Elixir) so, that’s might be it,
who knows ;)</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><strong>Update 1 September 14, 2024</strong>:
Back to my good old
  <a href="https://voidlinux.org">Void Linux</a> for a while now.</p>
</div>
<div class="paragraph">
<p><strong>Update 2 January 26, 2025</strong>:
I moved back to Debian™ based distros.
  Currently running Linux Mint™ on my work machine and personal laptop.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>I’m very fine and comfortable with most of other Linux® Distributions out there.
I’ve started using Linux with Ubuntu 18.04, shortly moved to Linux mint 18
and used it about a 6 to 10 months, after that I went for Manjaro xfce,
installed it, used it for about 3 or so months and then, I installed Manjaro i3.</p>
</div>
<div class="paragraph">
<p>The emphasizing <strong>Manjaro i3</strong> is because it really changed the way I look at a
GUI.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_wip">1.3. WIP</h3>

</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    
    
    
  </channel>
</rss>
