<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Hossein Esmail</title>
    <link>https://hossein-lap.github.io/</link>
    <description>Recent content on Hossein Esmail</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Hos Es</copyright>
    <lastBuildDate>Sun, 14 Jul 2024 14:42:49 +0330</lastBuildDate><atom:link href="https://hossein-lap.github.io/index.xml" rel="self" type="application/rss+xml" /><icon>https://hossein-lap.github.io/images/ed/foo.png</icon>
    
    
    <item>
      <title>Vim</title>
      <link>https://hossein-lap.github.io/docs/vim/vim/</link>
      <pubDate>Sun, 14 Jul 2024 14:42:49 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/vim/vim/</guid>
      <description><![CDATA[]]></description>
      
    </item>
    
    
    
    <item>
      <title>Grafana</title>
      <link>https://hossein-lap.github.io/notes/grafana/</link>
      <pubDate>Sat, 06 Jul 2024 13:24:36 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/grafana/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_grafana_stack">1. Grafana stack</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Grafana offers many tools, which we’ve grouped into the following categories:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The core Grafana stack: <strong>LGTM</strong> and the <strong>Grafana Agent</strong></p>
</li>
<li>
<p>Grafana enterprise plugins</p>
</li>
<li>
<p>Incident response tools</p>
</li>
<li>
<p>Other Grafana tools</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_the_core_grafana_stack">1.1. The core Grafana stack</h3>
<div class="paragraph">
<p>The core Grafana stack consists of <strong>Mimir</strong>, <strong>Loki</strong>, <strong>Tempo</strong>, and <strong>Grafana</strong>; the
acronym <strong>LGTM</strong> is often used to refer to this tech stack.</p>
</div>
<div class="paragraph">
<div class="title">Mimir</div>
<p>Mimir is a <strong>Time Series Database</strong> (<strong>TSDB</strong>) for the storage of metric data. It
uses low-cost object storage such as S3, GCS, or Azure Blob Storage.
Mimir is a fully Prometheus-compatible solution that addresses the common
scalability problems encountered with storing and searching huge quantities of
metric data.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>An active time series is a metric with a value and unique labels that has
reported a sample in the last 20 minutes.</p>
</div>
</div>
</div>
<div class="paragraph">
<div class="title">Loki</div>
<p>Loki is a set of components that offer a full feature logging stack. Loki uses
lower-cost object storage such as S3 or GCS, and only indexes label metadata.</p>
</div>
<div class="paragraph">
<p>Log aggregation tools typically use two data structures to store log data. An
index that contains references to the location of the raw data paired with
searchable metadata, and the raw data itself stored in a compressed form.</p>
</div>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>Loki differs from a lot of other log aggregation tools by keeping the index
data relatively small and scaling the search functionality by using horizontal
scaling of the querying component.</p>
</div>
</div>
</div>
<div class="paragraph">
<div class="title">Tempo</div>
<p>Tempo is a storage backend for high-scale distributed trace telemetry, with the
aim of sampling 100% of the read path. Like Loki and Mimir, it leverages
lower-cost object storage such as S3, GCS, or Azure Blob Storage.</p>
</div>
<div class="paragraph">
<p>Tempo also offers the ability to generate metrics from spans as they are
ingested; these metrics can be written to any backend that supports Prometheus
remote write.</p>
</div>
<div class="paragraph">
<div class="title">Grafana</div>
<p>Grafana has been a staple for fantastic visualization of data since 2014. It
has targeted the ability to connect to a huge variety of data sources from
TSDBs to relational databases and even other observability tools. Grafana has
over 150 data source plugins available. Grafana has a huge community using it
for many different purposes. This community supports over 6,000 dashboards,
which means there is a starting place for most available technologies with
minimal time to value.</p>
</div>
<div class="paragraph">
<div class="title">Grafana Agent</div>
<p>Grafana Agent is a collection of tools for collecting logs, metrics, and
traces. There are many other collection tools that Grafana integrates well
with.</p>
</div>
</div>
<div class="sect2">
<h3 id="_grafana_enterprise_plugins">1.2. Grafana Enterprise plugins</h3>
<div class="paragraph">
<p>These are part of any paid subscription to Grafana.</p>
</div>
<div class="paragraph">
<p>The Enterprise data source plugins allow organizations to read data from many
other storage tools they may use, from software development tools such as <strong>GitLab</strong>
and <strong>Azure DevOps</strong> to business intelligence tools such as <strong>Snowflake</strong>,
<strong>Databricks</strong>, and <strong>Looker</strong>. Grafana also offers tools to read data from many
other observability tools, which enables organizations to build comprehensive
operational coverage while offering individual teams a choice of the tools they
use.</p>
</div>
</div>
<div class="sect2">
<h3 id="_grafana_incident_response_and_management">1.3. Grafana incident response and management</h3>
<div class="paragraph">
<p>Grafana offers three products in the <strong>incident response and management</strong> (<strong>IRM</strong>)
space:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>At the foundation of IRM are <strong>alerting rules</strong>, which can notify via messaging
apps, email, or Grafana OnCall</p>
</li>
<li>
<p><strong>Grafana OnCall</strong> offers an on-call schedule management system that
centralizes alert grouping and escalation routing</p>
</li>
<li>
<p><strong>Grafana Incident</strong> offers a chatbot functionality that can set up necessary
incident spaces, collect timelines for a post-incident review process, and
even manage the incident directly from a messaging service</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_other_grafana_tools">1.4. Other Grafana tools</h3>
<div class="paragraph">
<p>Grafana Labs continues to be a leader in observability and has acquired several
companies in this space to release new products that complement the tools we’ve
already discussed.</p>
</div>
<div class="paragraph">
<div class="title">Faro</div>
<p><strong>Grafana Faro</strong> is a JavaScript agent that can be added to frontend web
applications. The project allows for <strong>real user monitoring</strong> (<strong>RUM</strong>) by
collecting telemetry from a browser.</p>
</div>
<div class="paragraph">
<p>By adding RUM into an environment where backend applications and infrastructure
are instrumented, observers gain the ability to traverse data from the full
application stack.</p>
</div>
<div class="paragraph">
<div class="title">k6</div>
<p><strong>k6</strong> is a load testing tool that provides both a packaged tool to run in your
own infrastructure and a cloud <strong>Software as a Service</strong> (<strong>SaaS</strong>) offering. Load
testing, especially as part of a CI/CD pipeline, really enables teams to see
how their application will perform under load, and evaluate optimizations and
refactoring. Paired with other detailed analysis tools such as Pyroscope, the
level of visibility and accessibility to non-technical members of the team can
be astounding.</p>
</div>
<div class="paragraph">
<div class="title">Pyroscope</div>
<p><strong>Pyroscope</strong> is a tool that enable teams to engage in the continuous profiling
of system resource use by applications (CPU, memory, etc.). Pyroscope
advertises that with a minimal overhead of ~2-5% of performance, they can
collect samples as frequently as every 10 seconds. <strong>Phlare</strong> is a Grafana Labs
project started in 2022, and the two projects have now merged.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_common_log_formats">2. Common log formats</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Logs support performance and capacity monitoring in infrastructure, bug
detection in software, root cause analysis, user behavior tracking, and more.
Following certain guidelines will help your future self when you need to
analyze logs.</p>
</div>
<div class="paragraph">
<p>Log formats usually identify if they are structured or unstructured, the data
types used in them, and if any encoding or delimitation is being used.</p>
</div>
<div class="sect2">
<h3 id="_structured_semi_structured_and_unstructured_logging">2.1. Structured, semi-structured, and unstructured logging</h3>
<div class="paragraph">
<p>It does not matter what your logs look like and they can come in structured,
semi-structured, or unstructured formats.</p>
</div>
<div class="paragraph">
<p>when designing and building observability solutions, it’s important to
understand the log formats you are working with. This ensures that you can
ingest, parse, and store the data in a way that it can be used effectively.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>If you familiarized yourself with the <em>personas</em>, you have an awareness of who
they will be used by and for what purpose.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_structured_logging">2.1.1. Structured logging</h4>
<div class="paragraph">
<p><strong>Structured logs</strong> have a predetermined message format that allows them to be
treated as datasets rather than text. The idea of structured logging is to
present data with a defined pattern that can be easily understood by humans and
efficiently processed by machines. The log entries are often delimited with
characters such as a comma, space, or hyphen. Data fields may also be joined
using an equals sign or colon for key-value pairs, such as <code>name=Diego</code> or
<code>city=Berlin</code>.</p>
</div>
<div class="literalblock">
<div class="title">A structured log format</div>
<div class="content">
<pre>{
&#34;timestamp&#34;: &#34;2023-04-25T12:15:03.006Z&#34;,
&#34;message&#34;: &#34;User Diego.Developer has logged in&#34;,
&#34;log&#34;: {
&#34;level&#34;: &#34;info&#34;,
&#34;file&#34;: &#34;auth.py&#34;,
&#34;line&#34;: 77
},
&#34;user&#34;: {
&#34;name&#34;: &#34;diego.developer&#34;,
&#34;id&#34;: 123
},
&#34;event&#34;: {
&#34;success&#34;: true
}
}</pre>
</div>
</div>
<div class="paragraph">
<p>An additional benefit of structured logging is that you can validate the
conformation of the data to a schema with tools such as JSON schema. This opens
up the possibility of making version control changes to the schema, which is
where logs and event bus technology overlap.</p>
</div>
</div>
<div class="sect3">
<h4 id="_semi_structured_logging">2.1.2. Semi-structured logging</h4>
<div class="paragraph">
<p><strong>Semi-structured</strong> logs aim to bridge the gap between unstructured and structured
and, as a result, can be quite complicated. They are designed to be easy for
humans to read but also have a schema that makes it possible for machines to
process them too. They have complex field and event separators and usually come
with a defined pattern to aid with ingesting and parsing. Parsing is usually
done using regular expressions or other code.</p>
</div>
</div>
<div class="sect3">
<h4 id="_unstructured_logging">2.1.3. Unstructured logging</h4>
<div class="paragraph">
<p><strong>Unstructured logging</strong> typically refers to log entries that are presented in a
textual format that can easily be read by humans but is difficult for machines
to process. They are often color-coded with blank spaces to improve
presentation and readability.</p>
</div>
<div class="paragraph">
<p>Parsing and splitting the data correctly creates a disassociation between
events and their identifying metadata. An unstructured log will require some
custom parsing, requiring intimate knowledge of the data and often creating
additional work for the engineer when ingesting data. This also creates
technical liability; the dependency on the log remaining the same restricts
developers from changing logs or runs the risk of parsing and reporting on
unstructured logs prone to breaking.</p>
</div>
<div class="paragraph">
<p>To aid the ability of machines to process unstructured logs, encapsulation
prevents entries such as stack traces from splitting at an inappropriate
location.</p>
</div>
<div class="paragraph">
<p>The following is an example of a multiline log, with a naive encapsulation that
looks for line breaks; this will appear in logging systems as four distinct
events:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>2023-04-25 12:15:03,006 INFO [SVR042] UserMembershipsIterable Found 4
children for 4 groups in 3 ms
Begin Transaction update record.
Process started.
Process completed.</pre>
</div>
</div>
<div class="paragraph">
<p>With encapsulation based on the timestamp at the start of the event, this will
be stored correctly for searching.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_sample_log_formats">2.2. Sample log formats</h3>
<div class="paragraph">
<p>Many log formats have been used in computer systems. All of these formats have
a common goal of presenting a standard structure or set of fields for recording
important information about the activity of a computer system.</p>
</div>
<div class="sect3">
<h4 id="_common_event_format_cef">2.2.1. Common Event Format (CEF)</h4>
<div class="paragraph">
<p>Developed by ArcSight to fulfill the <strong>Security Information and Event Management</strong>
(SIEM) use case, the CEF is a structured text-based log format. Using UTF-8
encoding, the format contains a prefix, a CEF header, and a body containing
additional enrichment data.</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Log Section</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Prefix</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">It combines the event timestamp and source hostname</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">CEF header</p></td>
<td class="tableblock halign-left valign-top"><div class="content"><div class="paragraph">
<p>It combines the following pieces of metadata:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Software version</p>
</li>
<li>
<p>Vendor name</p>
</li>
<li>
<p>Product name</p>
</li>
<li>
<p>Product version</p>
</li>
<li>
<p>Event name</p>
</li>
<li>
<p>Product event class identification code</p>
</li>
<li>
<p>Event severity</p>
</li>
</ul>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Body</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">It contains a list of key-value pairs</p></td>
</tr>
</tbody>
</table>
<div class="literalblock">
<div class="title">Example</div>
<div class="content">
<pre>CEF:0|Security Provider|Security Product|Version|123|User
Authenticated|3|src=10.51.113.149 suser=diego target=diego msg=User
authenticated from 1001:db7::5</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_ncsa_common_log_format_clf">2.2.2. NCSA Common Log Format (CLF)</h4>
<div class="paragraph">
<p>As one of the oldest log formats used by web servers, the NCSA CLF has for a
long time been the most common and well-known log formats. It has a fixed
format text-based structure and therefore cannot be customized at all.</p>
</div>
<div class="ulist">
<div class="title">Here is the NCSA CLF field list:</div>
<ul>
<li>
<p>Remote host address</p>
</li>
<li>
<p>Remote log name</p>
</li>
<li>
<p>Username</p>
</li>
<li>
<p>Timestamp</p>
</li>
<li>
<p>Request and protocol version</p>
</li>
<li>
<p>HTTP status code</p>
</li>
<li>
<p>Bytes sento</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Where data is missing from the log, a hyphen acts as a placeholder. Unsupported
characters are replaced with the + symbol.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example NCSA CLF log:</div>
<div class="content">
<pre>127.0.0.1 user-identifier diego [25/Apr/2023:12:15:03 -0000] &#34;GET /
apache_pb.gif HTTP/1.1&#34; 200 2326</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_w3c_extended_log_file_format">2.2.3. W3C Extended Log File Format</h4>
<div class="paragraph">
<p>The Microsoft Internet Information Server log format known as W3C is a
structured yet configurable format. Full control over the included fields
ensures log files contain the most relevant data. Identification of the
information or direction of flow is denoted using a string prefix: server (S),
client ©, server to client (SC), and client to server (CS).</p>
</div>
<div class="ulist">
<div class="title">Here is the W3C Extended Log File Format field list:</div>
<ul>
<li>
<p>Timestamp</p>
</li>
<li>
<p>Client IP</p>
</li>
<li>
<p>Server IP</p>
</li>
<li>
<p>URI-stem</p>
</li>
<li>
<p>HTTP status code</p>
</li>
<li>
<p>Bytes sent</p>
</li>
<li>
<p>Bytes received</p>
</li>
<li>
<p>Time taken</p>
</li>
<li>
<p>Version</p>
</li>
</ul>
</div>
<div class="literalblock">
<div class="title">Here is an example W3C log:</div>
<div class="content">
<pre>#Software: Internet Information Services 10.0
#Version: 1.0
#Date: 2023-04-25 12:15:03
#Fields: time c-ip cs-method cs-uri-stem sc-status cs-version
12:15:03 10.51.113.149 GET /home.htm 200 HTTP/1.0</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_windows_event_log">2.2.4. Windows Event Log</h4>
<div class="paragraph">
<p>The Microsoft Windows operating system comes with a built-in complex structured
logging system that captures data related to specific events on the operating
system. There are four common Windows event log categories - system,
application, security, and setup - and an additional special category for
forwarded events.</p>
</div>
<div class="paragraph">
<p>Each event log is also one of five different types: information, warning,
error, success audit, and failure audit. Windows Event Log is one of the most
verbose log formats in use. It usually includes details such as timestamp,
event ID, username, hostname, message, and category, making it invaluable in
diagnosing problems. Windows event IDs are documented and searchable, so you
can easily get detailed information regarding the log event; they are grouped
into categories, narrowing down the area where the event occurred, which makes
debugging very accurate.</p>
</div>
<div class="literalblock">
<div class="title">Here is a trimmed example of Microsoft Windows Event Log:</div>
<div class="content">
<pre>An account was successfully logged on.
Subject:
Security ID: SYSTEM
Account Name: DESKTOP-TMC369$
Account Domain: WORKGROUP
Logon ID: 0xE37
Logon Information:
New Logon:
Security ID: AD\DiegoDeveloper
Account Name: diego.developer@themelt.cafe
Account Domain: AD
Logon ID: 0xEC4093F
Network Information:
Workstation Name: DESKTOP-TMC369</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_javascript_object_notation_json">2.2.5. JavaScript Object Notation (JSON)</h4>
<div class="paragraph">
<p>As one of the newer yet most commonly used log formats today, JSON is a
structured format constructed from multiple key-value pairs. Using JSON, data
can be nested into different layers while keeping the format easy to read.
Additionally, different data types can be represented, such as string, number,
Boolean, null, object, and array.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example JSON log file:</div>
<div class="content">
<pre>{
&#34;timestamp&#34;: &#34;2023-04-25T12:15:03.006Z&#34;,
&#34;message&#34;: &#34;User Diego.Developer has logged in&#34;,
&#34;log&#34;: {
&#34;level&#34;: &#34;info&#34;,
&#34;file&#34;: &#34;auth.py&#34;,
&#34;line&#34;: 77
},
&#34;user&#34;: {
&#34;name&#34;: &#34;diego.developer&#34;,
&#34;id&#34;: 123
},
&#34;event&#34;: {
&#34;success&#34;: true
}
}</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_syslog">2.2.6. Syslog</h4>
<div class="paragraph">
<p>The go-to log format for many years and still widely used, Syslog is a defined
standard for creating and transmitting logs. The <strong>Syslog transport protocol</strong>
specifies how log transmission takes place, as well as the data format. The
default network ports for the protocol are <code>514</code> and <code>6514</code>, with the latter
being used for encryption.</p>
</div>
<div class="paragraph">
<p>The Syslog message format combines a standardized header and message holding
the body of the log.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example Syslog log:</div>
<div class="content">
<pre>Apr 25 12:15:03 server1 sshd[41458] : Failed password for  diego from
10.51.113.149 port 22 ssh2</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_logfmt">2.2.7. Logfmt</h4>
<div class="paragraph">
<p>Logfmt is a widely used log format that fits as human readable and structured
so that computers and people can both read it. A Logfmt-formatted log line
consists of any number of key-value pairs that can be easily parsed. As there
are no standards, it is easy to extend and perfect for developers to simply add
more key-value pairs to the output.</p>
</div>
<div class="literalblock">
<div class="title">Here is an example Logfmt log:</div>
<div class="content">
<pre>level=info method=GET path=/ host=myserver.me fwd=&#34;10.51.113.149&#34;
service=4ms status=200</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exploring_metric_types_and_best_practices">3. Exploring metric types and best practices</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Metrics, along with logs, are an essential tool for software developers and
operators, providing them with indicators regarding the state of applications
and systems. Resource usage data is great for monitoring a metric that captures
numerical data over time. There are many different types of resources but some
good examples would be CPU or RAM usage, the number of messages in a queue, and
the number of received HTTP requests. Metrics are frequently generated and
easily enriched with labels, attributes, or dimensions, making them efficient
to search and ideal in determining if something is wrong, or different from
usual.</p>
</div>
<div class="ulist">
<div class="title">A metric commonly has the following fields:</div>
<ul>
<li>
<p><strong>Name</strong>: This uniquely identifies the metric</p>
</li>
<li>
<p><strong>Data point value(s)</strong>: The data that’s stored varies by metric type</p>
</li>
<li>
<p><strong>Dimensions</strong>: Additional enrichment labels or attributes that support analysis</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_wip">3.1. WIP</h3>

</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Accessing K8S pods</title>
      <link>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</link>
      <pubDate>Fri, 31 May 2024 18:50:32 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/k8s-ingress-loadbalancer/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p><a href="/pdfs/notes/k8s-ingress-loadbalancer.pdf">Download this note as a PDF</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_forwarding_a_local_network_port_to_a_port_in_the_pod">1. Forwarding a Local Network Port to a Port in The Pod</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you want to talk to a specific pod without going through a service (for
debugging or other reasons), Kubernetes allows you to configure port forwarding
to the pod.</p>
</div>
<div class="paragraph">
<p>This is done through the <code>kubectl port-forward</code> command. The following command
will forward your machine’s local port <code>8888</code> to port <code>8080</code> of your
e.g <code>kubia-manual</code> pod.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl port-forward kubia-manual 8888:8080</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>... Forwarding from 127.0.0.1:8888 -&gt; 8080
... Forwarding from [::1]:8888 -&gt; 8080</pre>
</div>
</div>
<div class="sect2">
<h3 id="_connecting_to_the_pod_through_the_port_forwarder">1.1. Connecting to The Pod Through the Port Forwarder</h3>
<div class="paragraph">
<p>In a different terminal, you can now use curl to send an HTTP request to your pod
through the <code>kubectl port-forward</code> proxy running on <code>localhost:8888</code>.</p>
</div>
<div class="listingblock">
<div class="title">Example:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ curl localhost:8888</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-manual</pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_service_object">2. Service Object</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each pod gets its own IP address, but this address is internal to the cluster
and isn’t accessible from outside of it. To make the pod accessible from the
outside, you’ll expose it through a Service object. You’ll create a special
service of type <code>LoadBalancer</code>, because if you create a regular service (a
<code>ClusterIP</code> service), like the pod, it would also only be accessible from
inside the cluster. By creating a <code>LoadBalancer</code> type service, an external load
balancer will be created and you can connect to the pod through the load
balancer’s public IP.</p>
</div>
<div class="sect2">
<h3 id="_creating_a_service_object">2.1. Creating a Service Object</h3>
<div class="paragraph">
<p>To create the service, you’ll tell Kubernetes to expose the ReplicationController you
created:</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using YAML file</div>
<div class="listingblock">
<div class="title">Manifest:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Service
metadata:
  name: kubia
spec:
  ports:
  - port: 80 # service&#39;s port
    targetPort: 8080 # the forward-to port by service
  selector: # all pods labeled `kubia` will follow/select this service
    app: kubia</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Apply the service:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl create -f kubia-srv.yaml</code></pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Using kubectl CLI options</div>
<div class="listingblock">
<div class="title">Template:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl expose rc &lt;rep-controller-name&gt; --type=LoadBalancer --name &lt;lb-name&gt;</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Expose:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl expose rc kubia --type=LoadBalancer --name kubia-http</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>service &#34;kubia-http&#34; exposed</pre>
</div>
</div>
</div>
</div>
<div class="ulist">
<div class="title">Remotely Executing Commands in Running Containers:</div>
<ul>
<li>
<p>You’ll also need to obtain the cluster IP of your service
(using <code>kubectl get svc</code>, for example)</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl exec kubia-7nog1 -- curl -s http://10.111.249.153</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-gzwli</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_session_affinity_on_the_service">2.2. Session Affinity on the Service</h3>
<div class="paragraph">
<p>If you execute the same command a few more times, you should hit a different
pod with every invocation, because the service proxy normally forwards each
connection to a randomly selected backing pod, even if the connections are
coming from the same client.</p>
</div>
<div class="paragraph">
<p>If, on the other hand, you want all requests made by a certain client to be
redirected to the same pod every time, you can set the service’s
<code>sessionAffinity</code> property to <code>ClientIP</code> (instead of <code>None</code>, which is the
default), as shown in the following listing.</p>
</div>
<div class="listingblock">
<div class="title">Service with <code>ClientIP</code> Session Affinity Manifest</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Service
spec:
  sessionAffinity: ClientIP
  ...</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Kubernetes supports only two types of service session affinity: <code>None</code> and
<code>ClientIP</code>.</p>
</li>
<li>
<p>Kubernetes services don’t operate at the HTTP level. Services deal with TCP
and UDP packets and don’t care about the payload they carry. Because cookies
are a construct of the HTTP protocol, services don’t know about them, which
explains why session affinity cannot be based on cookies.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_ports_in_the_same_service">2.3. Exposing Multiple Ports in the Same Service</h3>
<div class="listingblock">
<div class="title">Manifest</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Service
metadata:
  name: kubia
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 8443
  selector:
    app: kubia</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_using_named_ports">2.4. Using Named Ports</h3>
<div class="paragraph">
<p>You can give a name to each pod’s port and refer to it by name in the service spec.</p>
</div>
<div class="listingblock">
<div class="title">Specifying port names in a pod definition Manifest:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">kind: Pod
spec:
  containers:
  - name: kubia
    ports:
    - name: http
      containerPort: 8080
    - name: https
      containerPort: 8443</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Referring to named ports in a service Manifest:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Service
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: https
    port: 443
    targetPort: https</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_connecting_to_services_living_outside_the_cluster">3. Connecting to services living outside the cluster</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Instead of having the service redirect connections to pods in the cluster, you
want it to redirect to external IP(s) and port(s).</p>
</div>
<div class="paragraph">
<p>This allows you to take advantage of both service load balancing and service
discovery. Client pods running in the cluster can connect to the external
service like they connect to internal services.</p>
</div>
<div class="sect2">
<h3 id="_service_endpoints">3.1. Service Endpoints</h3>
<div class="paragraph">
<p>Services don’t link to pods directly. Instead, a resource sits in between—the
Endpoints resource. You may have already noticed endpoints if you used the
<code>kubectl describe</code> command on your service.</p>
</div>
<div class="listingblock">
<div class="title">Full details of a service:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl describe svc kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>Name:             kubia
Namespace:        default
Labels:           &lt;none&gt;
Selector:         app=kubia
Type:             ClusterIP
IP:               10.111.249.153
Port:             &lt;unset&gt; 80/TCP
Endpoints:        10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080
Session           Affinity: None
No events.</pre>
</div>
</div>
<div class="paragraph">
<p>An Endpoints resource (yes, plural) is a list of IP addresses and ports
exposing a service. The Endpoints resource is like any other Kubernetes
resource, so you can display its basic info with kubectl get.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl get endpoints kubia</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME     ENDPOINTS                                           AGE
kubia    10.108.1.4:8080,10.108.2.5:8080,10.108.2.6:8080     1h</pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Manually Configuring Service Endpoints</div>
<div class="ulist">
<ul>
<li>
<p>having the service’s endpoints decoupled from the service allows them to be
configured and updated manually.</p>
</li>
<li>
<p>If you create a service without a pod selector, Kubernetes won’t even create
the Endpoints resource</p>
<div class="ulist">
<ul>
<li>
<p>after all, without a selector, it can’t know which pods to include in the
service</p>
</li>
</ul>
</div>
</li>
<li>
<p>To create a service with manually managed endpoints, you need to create both
a Service and an Endpoints resource</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A service without a pod selector: <code>external-service.yaml</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Service
metadata:
  name: external-service # must match the endpoints name
spec:
  ports:
  - port: 80</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Endpoints are a separate resource and not an attribute of a service</p>
</li>
<li>
<p>Because you created the service without a selector, the corresponding
Endpoints resource hasn’t been created automatically</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">A manually created Endpoints resource: <code>external-service-endpoints.yaml</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Endpoints
metadata:
  name: external-service # must match the service name
subsets:
  - addresses:
    - ip: 11.11.11.11
    - ip: 22.22.22.22
    ports:
    - port: 80 # target port of endpoints</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_to_external_clients">4. Exposing services to external clients</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Few ways to make a service accessible externally.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>NodePort</code> Service Type</p>
<div class="ulist">
<ul>
<li>
<p>Each cluster node opens a port on the node itself (hence the name) and
redirects traffic received on that port to the underlying service.</p>
</li>
<li>
<p>The service isn’t accessible only at the internal cluster IP and port, but
also through a dedicated port on all nodes.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>LoadBalancer</code> Service Type, an extention of <code>NodePort</code> type</p>
<div class="ulist">
<ul>
<li>
<p>This makes the service accessible through a dedicated load balancer,
provisioned from the cloud infrastructure Kubernetes is running on.</p>
</li>
<li>
<p>The load balancer redirects traffic to the node port across all the nodes.
Clients connect to the service through the load balancer’s IP.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Create <code>Ingress</code> Resource, radically different mechanism for exposing
multiple services through a single IP address</p>
<div class="ulist">
<ul>
<li>
<p>It operates at the HTTP level (network layer 7) and can thus offer more
features than layer 4 services can</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_using_a_nodeport_service">4.1. Using a NodePort service</h3>
<div class="paragraph">
<p>By creating a <code>NodePort</code> service, you make Kubernetes reserve a port on all its
nodes (the same port number is used across all of them) and forward incoming
connections to the pods that are part of the service.</p>
</div>
<div class="paragraph">
<p>This is similar to a regular service (their actual type is <code>ClusterIP</code>), but a
<code>NodePort</code> service can be accessed not only through the service’s internal
cluster IP, but also through any node’s IP and the reserved node port.</p>
</div>
<div class="paragraph">
<p>This will make more sense when you try interacting with a <code>NodePort</code> service.</p>
</div>
<div class="listingblock">
<div class="title">A NodePort service definition: <code>kubia-svc-nodeport.yaml</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Service
metadata:
  name: kubia-nodeport
spec:
  type: NodePort # service type
  ports:
  - port: 80 # service&#39;s internal cluster IP port
    targetPort: 8080 # target port of the backing pods
    nodePort: 30123 # service will listen on port 30123, each cluster nodes
  selector:
    app: kubia</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">Examine the NodePort Service:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl get svc kubia-nodeport</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME             CLUSTER-IP       EXTERNAL-IP    PORT(S)          AGE
kubia-nodeport   10.111.254.223   &lt;nodes&gt;        80:30123/TCP     2m</pre>
</div>
</div>
<div class="paragraph">
<p><code>EXTERNAL-IP</code> column shows <code>&lt;nodes&gt;</code>, indicating the service is accessible
through the IP address of any cluster node. The <code>PORT(S)</code> column shows both the
internal port of the cluster IP (<code>80</code>) and the node port (<code>30123</code>). The service
is accessible at the following addresses:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>10.11.254.223:80</code></p>
</li>
<li>
<p><code>&lt;1st node’s IP&gt;:30123</code></p>
</li>
<li>
<p><code>&lt;2nd node’s IP&gt;:30123</code></p>
</li>
<li>
<p>and so on</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Using JSONPath to get the IPs of all your nodes</div>
<p>You can find the IP in the JSON or YAML descriptors of the nodes. But instead
of sifting through the relatively large JSON, you can tell <code>kubectl</code> to print
out only the node IP instead of the whole service definition</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl get nodes -o \
  jsonpath=&#39;{.items[*].status.addresses[?(@.type==&#34;ExternalIP&#34;)].address}&#39;</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>130.211.97.55 130.211.99.206</pre>
</div>
</div>
<div class="paragraph">
<p>Once you know the IPs of your nodes, you can try accessing your service through
them.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ curl http://130.211.97.55:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-ym8or</pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ curl http://130.211.99.206:30123</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>You&#39;ve hit kubia-xueq1</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_a_service_through_an_external_load_balancer">4.2. Exposing a service through an external load balancer</h3>
<div class="paragraph">
<p>Kubernetes clusters running on cloud providers usually support the automatic
provision of a load balancer from the cloud infrastructure. All you need to do
is set the service’s type to <code>LoadBalancer</code> instead of <code>NodePort</code>. The load
balancer will have its own unique, publicly accessible IP address and will
redirect all connections to your service. You can thus access your service
through the load balancer’s IP address.</p>
</div>
<div class="paragraph">
<p>If Kubernetes is running in an environment that doesn’t support <code>LoadBalancer</code>
services, the load balancer will not be provisioned, but the service will still
behave like a <code>NodePort</code> service. That’s because a <code>LoadBalancer</code> service is an
extension of a <code>NodePort</code> service. You’ll run this example on Google Kubernetes
Engine, which supports <code>LoadBalancer</code> services. Minikube doesn’t, at least not
as of this writing.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Creating a Loadbalancer Service</div>
<div class="listingblock">
<div class="title">A LoadBalancer-type service: <code>kubia-svc-loadbalancer.yaml</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: v1
kind: Service
metadata:
  name: kubia-loadbalancer
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: kubia</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The service type is set to LoadBalancer instead of NodePort. You’re not
specifying a specific node port, although you could (you’re letting
Kubernetes choose one instead).</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Connecting to the Service Through the Load Balancer</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl get svc kubia-loadbalancer</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output</div>
<div class="content">
<pre>NAME                CLUSTER-IP       EXTERNAL-IP       PORT(S)       AGE
kubia-loadbalancer  10.111.241.153   130.211.53.173    80:32143/TCP  1m</pre>
</div>
</div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Session affinity and web browsers</div>
<div class="paragraph">
<p>Because your service is now exposed externally, you may try accessing it with
your web browser. You’ll see something that may strike you as odd—the browser
will hit the exact same pod every time. Did the service’s session affinity
change in the meantime? With <code>kubectl explain</code>, you can double-check that the
service’s session affinity is still set to <code>None</code>, so why don’t different
browser requests hit different pods, as is the case when using <code>curl</code>?</p>
</div>
<div class="paragraph">
<p>Let me explain what’s happening. The browser is using keep-alive connections
and sends all its requests through a single connection, whereas <code>curl</code> opens a
new connection every time. Services work at the connection level, so when a
connection to a service is first opened, a random pod is selected and then all
network packets belonging to that connection are all sent to that single pod.
Even if session affinity is set to <code>None</code>, users will always hit the same pod
(until the connection is closed).</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_understanding_the_peculiarities_of_external_connections">4.3. Understanding the peculiarities of external connections</h3>
<div class="paragraph">
<p>You must be aware of several things related to externally originating connections to
services.</p>
</div>
<div class="paragraph">
<div class="title">Understanding and Preventing Unnecessary Network Hops</div>
<p>When an external client connects to a service through the node port (this also
includes cases when it goes through the load balancer first), the randomly chosen
pod may or may not be running on the same node that received the connection. An
additional network hop is required to reach the pod, but this may not always be
desirable.</p>
</div>
<div class="paragraph">
<p>You can prevent this additional hop by configuring the service to redirect external
traffic only to pods running on the node that received the connection. This is done by
setting the <code>externalTrafficPolicy</code> field in the service’s <code>spec</code> section</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">spec:
  externalTrafficPolicy: Local
  ...</code></pre>
</div>
</div>
<div class="paragraph">
<div class="title">Being Aware of the non-preservation of the Client’s IP</div>
<p>Usually, when clients inside the cluster connect to a service, the pods backing
the service can obtain the client’s IP address. But when the connection is
received through a node port, the packets&#39; source IP is changed, because Source
Network Address Translation (SNAT) is performed on the packets.</p>
</div>
<div class="paragraph">
<p>The backing pod can’t see the actual client’s IP, which may be a problem for
some applications that need to know the client’s IP. In the case of a web
server, for example, this means the access log won’t show the browser’s IP.</p>
</div>
<div class="paragraph">
<p>The <code>Local</code> external traffic policy described in the previous section affects
the preservation of the client’s IP, because there’s no additional hop between
the node receiving the connection and the node hosting the target pod (SNAT
isn’t performed).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exposing_services_externally_through_an_ingress_resource">5. Exposing services externally through an Ingress resource</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You must be aware of several things related to externally originating
connections to services.</p>
</div>
<div class="ulist">
<div class="title">Understanding Why Ingresses are Needed</div>
<ul>
<li>
<p>each LoadBalancer service requires its own load balancer with its own public
IP address, whereas an Ingress only requires one, even when providing access
to dozens of services</p>
</li>
<li>
<p>When a client sends an HTTP request to the Ingress, the host and path in the
request determine which service the request is forwarded to</p>
</li>
<li>
<p>Ingresses operate at the application layer of the network stack (HTTP) and
can provide features such as cookie-based session affinity and the like,
which services can’t</p>
</li>
</ul>
</div>
<div class="paragraph">
<div class="title">Understanding that an Ingress Controller is Required</div>
<p>To make Ingress resources work, an Ingress controller needs to be running in
the cluster.</p>
</div>
<div class="sect2">
<h3 id="_creating_an_ingress_resource">5.1. Creating an Ingress resource</h3>
<div class="listingblock">
<div class="title">An Ingress resource definition: <code>kubia-ingress.yaml</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="yaml">apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kubia
spec:
  rules:
  - host: kubia.example.com #  maps the domain name to your service
  http:
    paths:
    - path: /                        # All requests will be sent to port 80
      backend:                       # of the kubia-nodeport service.
        serviceName: kubia-nodeport  #
        servicePort: 80              #</code></pre>
</div>
</div>
<div class="paragraph">
<p>This defines an Ingress with a single rule, which makes sure all HTTP requests
received by the Ingress controller, in which the host <code>kubia.example.com</code> is
requested, will be sent to the <code>kubia-nodeport</code> service on port <code>80</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Ingress controllers on cloud providers (in GKE, for example) require the
Ingress to point to a <code>NodePort</code> service. But that’s not a requirement of
Kubernetes itself.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_accessing_the_service_through_the_ingress">5.2. Accessing the service through the Ingress</h3>
<div class="paragraph">
<p>To access your service through <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a>, you’ll need to make sure
the domain name resolves to the IP of the Ingress controller</p>
</div>
<div class="listingblock">
<div class="title">Obtaining the ip Address of the Ingress:</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="console">$ kubectl get ingresses</code></pre>
</div>
</div>
<div class="literalblock">
<div class="title">Output:</div>
<div class="content">
<pre>NAME      HOSTS                ADDRESS            PORTS       AGE
kubia     kubia.example.com    192.168.99.100     80          29m</pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>When running on cloud providers, the address may take time to appear,
because the Ingress controller provisions a load balancer behind the scenes.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="ulist">
<ul>
<li>
<p>The IP is shown in the <code>ADDRESS</code> column.</p>
</li>
</ul>
</div>
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
<div class="paragraph">
<p>Once you know the IP, you can then either configure your DNS servers to resolve
kubia.example.com to that IP or you can setup hosts: add the following line to
<code>/etc/hosts</code> (or <code>C:\windows\system32\drivers\etc\hosts</code> on Windows):</p>
</div>
<div class="listingblock">
<div class="title"><code>/etc/hosts</code></div>
<div class="content">
<pre>192.168.99.100		kubia.example.com</pre>
</div>
</div>
<div class="paragraph">
<p>So you can access the service at <a href="http://kubia.example.com" class="bare">http://kubia.example.com</a> using a browser or
<code>curl</code></p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="sect3">
<h4 id="_understading_how_ingress_work">5.2.1. Understading how Ingress work</h4>
<div class="ulist">
<ul>
<li>
<p>The client first performed a DNS lookup of kubia.example.com, and the DNS
server (or the local operating system) returned the IP of the Ingress
controller</p>
</li>
<li>
<p>The client then sent an HTTP request to the Ingress controller and specified
<code>kubia.example.com</code> in the <code>Host</code> header</p>
<div class="ulist">
<ul>
<li>
<p>From that header, the controller determined which service the client is
trying to access, looked up the pod IPs through the Endpoints object
associated with the service, and forwarded the client’s request to one of
the pods.</p>
</li>
</ul>
</div>
</li>
<li>
<p>The Ingress controller don’t forward the request to the service</p>
<div class="ulist">
<ul>
<li>
<p>It only use it to select a pod</p>
</li>
<li>
<p>Most, if not all, controllers work like this</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exposing_multiple_services_through_the_same_ingress">5.3. Exposing multiple services through the same Ingress</h3>
<div class="paragraph">
<p>Both <code>rules</code> and <code>paths</code> are arrays, so they can contain multiple items</p>
</div>
<div class="sect3">
<h4 id="_mapping_different_services_to_different_paths_of_the_same_host">5.3.1. Mapping different services to different paths of the same host</h4>

</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Golang stdlib - Webserver</title>
      <link>https://hossein-lap.github.io/notes/webserver/</link>
      <pubDate>Fri, 31 May 2024 16:47:17 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/notes/webserver/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is some note, nothing serious.
<strong>DO NOT</strong> cite from this article.</p>
</div>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>We need <code>&#34;net/http&#34;</code> module to create webserver and listen to the specified port.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">import (
    &#34;net/http&#34;
)</code></pre>
</div>
</div>
<div class="paragraph">
<p>we also might need these modules as well:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&#34;encoding/json&#34;</code> too for parsing JSON data</p>
</li>
<li>
<p><code>&#34;database/sql&#34;</code> and <code>&#34;github.com/go-sql-driver/mysql&#34;</code> to handle (my)sql/mariadb part</p>
</li>
<li>
<p><code>&#34;github.com/redi/go-redis/v9&#34;</code> to handle redis-cache</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We need a request handler struct for the http server to be able to work.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type RequestHandler struct {}</code></pre>
</div>
</div>
<div class="paragraph">
<p>And now we define the http server. it needs a <code>ServeHTTP()</code> function and paths
that needs to be handled (HTTP requests goes to the specified paths)</p>
</div>
<div class="listingblock">
<div class="title">main funcion</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    mux := http.NewServeMx()
    mux.Handle(&#34;/path1&#34;, &amp;RequestHandler{})
    mux.Handle(&#34;/path1/&#34;, &amp;RequestHandler{})
    mux.Handle(&#34;/path2&#34;, &amp;RequestHandler{})
    mux.Handle(&#34;/path2/&#34;, &amp;RequestHandler{})
    /* continue */
    http.ListenAndServe(&#34;:8080&#34;, mux)
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title">serve function</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func (h *RequestHandler) ServeHTTP(w http.ResponseWriter, r *http.Requset) {
    request_type := r.Method
    tmp := strings.SplitN(r.URL.String(), &#34;/&#34;, 3)
    section := tmp[1] // path
    key := tmp[2] // add data after the path
    params := r.URL.Query()
    value := params.Get(key)
    body, err := io.ReadAll(r.Body) // values from curl&#39;s `--data` flag (spected to be JSON)
    /* continue */
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_redis_handler">1. Redis Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func cache_handler() {
    client := redis.NewClient(&amp;redis.Options{
        Addr: &#34;localhost:6349&#34;
        Password: &#34;&#34; // No password, to get it from env variables use: `os.Getenv(&#34;ENV&#34;)`
        DB: 0 // default db
    })
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mysql_handler">2. MySQL Handler</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func database_handler() {
    sql_url := &#34;root@localhost:3360&#34;
    db, err := sql.Open(&#34;mysql&#34;, sql_url)
    if err != nil {
        pandic(err.Error())
    }
    defer db.Close()
    /* continue */
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_unmarshal">3. JSON Parser - Unmarshal</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type Movie struct {
    Name string `json:&#34;name&#34;`
    Publisher string `json:&#34;publisher&#34;`
    Year int `json:&#34;year&#34;`
}

func HandleMovie() {
    // var target map[string]any /* not optimal */
    var movie Movie

    input := `{
        &#34;name&#34;: &#34;Jocker&#34;,
        &#34;publisher&#34;: &#34;WB&#34;,
        &#34;year&#34;: 2019
    }`

    // err := json.Unmarshal([]byte(input), &amp;target) /* not optimal */
    err := json.Unmarshal([]byte(input), &amp;movie) /* not optimal */
    if err != nil {
        log.Fatalf(&#34;Unable to marshal JSON due to %s&#34;, err)
    }

    /* not optimal */
    // for k, v := range target {
    //    fmt.Printf(&#34;k: %s, v: %v\n&#34;, k, v)
    // }
    fmt.Printf(
        &#34;Name: %s, Publisher: %s, Year: %d\n&#34;,
        movie.Name, movie.Publisher, movie.Year,
    )
}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_complex_json">3.1. Complex JSON</h3>
<div class="listingblock">
<div class="title"><code>assets/complex.json</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="json">{
  &#34;name&#34;: &#34;James Peterson&#34;,
  &#34;age&#34;: 37,
  &#34;address&#34;: {
    &#34;line1&#34;: &#34;Block 78 Woodgrove Avenue 5&#34;,
    &#34;line2&#34;: &#34;Unit #05-111&#34;,
    &#34;postal&#34;: &#34;654378&#34;
  },
  &#34;pets&#34;: [
    {
      &#34;name&#34;: &#34;Lex&#34;,
      &#34;kind&#34;: &#34;Dog&#34;,
      &#34;age&#34;: 4,
      &#34;color&#34;: &#34;Gray&#34;
    },
    {
      &#34;name&#34;: &#34;Faye&#34;,
      &#34;kind&#34;: &#34;Cat&#34;,
      &#34;age&#34;: 6,
      &#34;color&#34;: &#34;Orange&#34;
    }
  ]
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="title"><code>examples/complex_json/main.go</code></div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type (
    FullPerson struct {
        Address Address
        Name    string
        Pets    []Pet
        Age     int
    }

    Pet struct {
        Name  string
        Kind  string
        Color string
        Age   int
    }

    Address struct {
        Line1  string
        Line2  string
        Postal string
    }
)


func main() {
    b, err := os.ReadFile(&#34;assets/complex.json&#34;)
    if err != nil {
        log.Fatalf(&#34;Unable to read file due to %s\n&#34;, err)
    }

    var person FullPerson

    err = json.Unmarshal(b, &amp;person)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal JSON due to %s&#34;, err)
    }

    litter.Dump(person)
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_common_pitfalls_with_json_unmarshalling_in_go">3.2. Common pitfalls with JSON unmarshalling in Go</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Extra fields are omitted in the target struct</p>
</li>
<li>
<p>Missing fields fallback to zero values</p>
</li>
<li>
<p>Unmarshalling is case insensitive</p>
</li>
<li>
<p>Field names must match JSON keys exactly</p>
</li>
<li>
<p>Type aliases are preserved</p>
</li>
</ol>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_json_parser_marshal">4. JSON Parser - Marshal</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>json.Marshal()</code> method does the opposite of <code>Unmarshal()</code> by converting
a given data structure into a JSON.</p>
</div>
<div class="listingblock">
<div class="title">examples/basic_marshal/main.go</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func marshal(in any) []byte {
    out, err := json.Marshal(in)

    if err != nil {
        log.Fatalf(&#34;Unable to marshal due to %s\n&#34;, err)
    }

    return out
}

func main() {
    first := marshal(14)
    second := marshal(&#34;Hello world&#34;)
    third := marshal([]float32{1.66, 6.86, 10.1})
    fourth := marshal(map[string]int{&#34;num&#34;: 15, &#34;other&#34;: 17})
    fmt.Printf(
        &#34;first: %s\nsecond: %s\nthird: %s\nfourth: %s\n&#34;,
        first,
        second,
        third,
        fourth,
    )
}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_structs">4.1. structs</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    p := Person{
        Name:  &#34;John Jones&#34;,
        Age:   26,
        Email: &#34;johnjones@email.com&#34;,
        Phone: &#34;89910119&#34;,
        Hobbies: []string{
            &#34;Swimming&#34;,
            &#34;Badminton&#34;,
        },
    }

    b, err := json.Marshal(p)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal due to %s\n&#34;, err)
    }

    fmt.Println(string(b))
}</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
If you wish to format the JSON object, you can use the <code>MarshalIndent()</code> method
which performs the same function as <code>Marshal()</code> but applies some indentation to
format the output.
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_customizing_json_field_names_with_struct_tags">4.2. Customizing JSON field names with struct tags</h3>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type Dog struct {
    Breed         string
    Name          string
    FavoriteTreat string
    Age           int
}

var dog = Dog{
  Breed: &#34;Golden Retriever&#34;,
  Age: 8,
  Name: &#34;Paws&#34;,
  FavoriteTreat: &#34;Kibble&#34;,
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type Dog struct {
    Breed         string `json:&#34;breed&#34;`
    Name          string `json:&#34;name&#34;`
    FavoriteTreat string `json:&#34;favorite_treat&#34;`
    Age           int    `json:&#34;age&#34;`
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    input := `{
      &#34;name&#34;: &#34;Coffee&#34;,
      &#34;breed&#34;: &#34;Toy Poodle&#34;,
      &#34;age&#34;: 5,
      &#34;favorite_treat&#34;: &#34;Kibble&#34;
    }`

    var coffee Dog

    err := json.Unmarshal([]byte(input), &amp;coffee)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal JSON due to %s&#34;, err)
    }

    litter.Dump(coffee)
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_uses_of_struct_tags">4.3. Other uses of struct tags</h3>
<div class="listingblock">
<div class="title">Omit an empty field (one with its zero value in Go)</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type User struct {
    Username string   `json:&#34;username&#34;`
    Password string   `json:&#34;-&#34;`

    Email    string   `json:&#34;email&#34;`
    Hobbies  []string `json:&#34;hobbies,omitempty&#34;`
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_validating_json_data">5. Validating JSON data</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    good := `{&#34;name&#34;: &#34;John Doe&#34;}`
    bad := `{name: &#34;John Doe&#34;}`

    fmt.Println(json.Valid([]byte(good)))
    fmt.Println(json.Valid([]byte(bad)))
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_defining_custom_behavior_marshal_unmarshal_data">6. Defining custom behavior - Marshal / Unmarshal data</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Go, you can define custom behavior for marshalling data by implementing the
<code>json.Marshaler</code> interface. This interface defines a single method,
<code>MarshalJSON()</code> which takes no arguments and returns a byte slice and an
error.</p>
</div>
<div class="paragraph">
<p>To implement the <code>json.Marshaler</code> interface, you need to define a new type that
wraps the original type you want to marshal. This new type should have a method
named <code>MarshalJSON()</code> that returns a byte slice and an error.</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">type (
    CustomTime struct {
        time.Time
    }

    Baby struct {
        BirthDate CustomTime `json:&#34;birth_date&#34;`
        Name      string    `json:&#34;name&#34;`
        Gender    string    `json:&#34;gender&#34;`
    }
)</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the above snippet, we defined a new <code>CustomTime</code> type that wraps a
<code>time.Time</code> value. In is subsequently used in the <code>Baby</code> struct as the type of
the <code>BirthDate</code> value.</p>
</div>
<div class="paragraph">
<p>Here’s an example that marshals a value of type <code>Baby</code> below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func main() {
    baby := Baby{
        Name:   &#34;johnny&#34;,
        Gender: &#34;male&#34;,
        BirthDate: CustomTime{
            time.Date(2023, 1, 1, 12, 0, 0, 0, time.Now().Location()),
        },
    }

    b, err := json.Marshal(baby)
    if err != nil {
        log.Fatalf(&#34;Unable to marshal due to %s\n&#34;, err)
    }

    fmt.Println(string(b))
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Notice how the <code>birth_date</code> presented in the RFC 3339 format. You can now
define the custom marshalling behavior that will return a different format for
<code>CustomTime</code> values (such as <code>DD-MM-YYYY</code>) instead of the default RFC 3339
timestamp format.</p>
</div>
<div class="paragraph">
<p>You only need to define a <code>MarshalJSON()</code> method for the type as shown below:</p>
</div>
<div class="listingblock">
<div class="title">examples/custom_timestamp/main.go</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="go">func (ct CustomTime) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf(`%q`, ct.Time.Format(&#34;02-01-2006&#34;))), nil
}</code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>WIP</title>
      <link>https://hossein-lap.github.io/welcome/</link>
      <pubDate>Sun, 26 May 2024 22:08:49 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/welcome/</guid>
      <description><![CDATA[<div class="paragraph">
<p>Welcome to my blog. I’m Hossein and I’ll be posting myown notes, ideas,
programs. A programmer / DevOps engineer with passions about
open-source software and trees.</p>
</div>
<div class="paragraph">
<p>Also, I use vim btw ;)</p>
</div>
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
<strong>Programming Languages</strong>
</td>
<td class="hdlist2">
<p>Lua, Go, C, Bash</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<strong>Tools</strong>
</td>
<td class="hdlist2">
<p>Linux, Git, QEMU/KVM, Docker, K8S, Ansible, tmux</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<strong>Markup / Typesetting Languages</strong>
</td>
<td class="hdlist2">
<p>LaTeX, Groff, Asciidoc(tor), Markdown</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<strong>Hobbies</strong>
</td>
<td class="hdlist2">
<p>Coding, Biking, Volleyball, Fishing</p>
</td>
</tr>
</tbody></table>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Lua Progamming Language</title>
      <link>https://hossein-lap.github.io/docs/lua/lua/</link>
      <pubDate>Tue, 02 Apr 2024 22:30:09 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/lua/lua/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Lua is a powerful, fast, lightweight and embeddable programming language. It is
used by many frameworks, games and other applications. While it can be used by
itself, it has been designed to be easy to embed in another application. It is
implemented in ANSI C, a subset of C programming language that is very
portable, which means it can run on many systems and many devices where the
most other scripting languages would not be able to run.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>&#34;Lua&#34; (pronounced LOO-ah) means &#34;Moon&#34; in Portuguese. As such, it is neither an
acronym nor an abbreviation, but a noun. Lua comes from two languages: DEL and
Sol. DEL means &#34;Data Entry Language&#34;, While Sol means &#34;Simple object language&#34;
and also means Sun in Portuguese.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>One of main advantages of Lua is its simplicity. Programming which is also
called scripting in the case of programs that run inside an embedded
applications, is the process of writing computer program. A programming
language is a language used to give instructions to a computer through computer
code that is contained in a computer program. A programming language consists
of two things: a syntax, which is like grammar in English, and libraries, basic
functions provided with the language. These libraries could be compared with
vocabulary in English.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hello_world">1. Hello World!</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lua can either be used embedded in an application or by itself. The first
example of Lua code in this book will be the basic and traditional hello world
program.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>A &#34;Hello world&#34; program is a computer program that outputs &#34;Hello, world&#34; on a
display device. Because it is typically one of the simplest programs possible
in most programming languages, it is by tradition often used to illustrate to
beginners the most basic syntax of a programming language, or to verify that a
language or system is operating correctly.</p>
</div>
</blockquote>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">print(&#34;Hello World!&#34;)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The code above prints the text Hello, world! to the output. It does so by
calling the print function with the string &#34;Hello, world!&#34; as an argument.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_syntax">2. Syntax</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Syntax of a programming language defines how statements and expressions must be
written in that programming language, just like grammar defines how sentences
and words must be written. Statements and expressions can be respectively
compared to sentences and words.</p>
</div>
<div class="paragraph">
<p>Lua is a dynamically typed language intended for use as an extension language or scripting language.</p>
</div>
<div class="paragraph">
<p>Statements and expressions can be respectively compared to sentences and
words. Expressions are pieces of code that have a value and that can be evaluated, while
statements are pieces of code that can be executed and contain an instruction with one
or many expressions to use that instruction with.</p>
</div>
<div class="paragraph">
<p>For example, <code>3 + 5</code> is an expression and <code>variable = 3 + 5</code> is a statement
that sets the value of variable to that expression.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">-- Different types
local x = 10 -- number
local name = &#34;Neo&#34; -- string
local is_alive = false -- boolean
local a = nil -- no value or invalid value</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_obtaining_lua">3. Obtaining Lua</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lua can be obtained on the official Lua website,
on the <a href="http://www.lua.org/download.html">download page</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_basics">4. Basics</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you are using the stand-alone Lua interpreter, all you have to do
to run your first program is to call the interpreter
-usually named <code>lua</code> or <code>lua5.3</code>/<code>lua5.4</code>-
with the name of the text file that contains your program.
If you save the <em>Hello World</em> program in a file <code>hello.lua</code>,
the following command should run it:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua hello.lua</pre>
</div>
</div>
<div class="paragraph">
<p>As a more complex example, the next program defines a function to compute
the factorial of a given number, asks the user for a number,
and prints its factorial:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">-- defines a factorial function
function fact (n)
    if n == 0 then
        return 1
    else
        return n * fact(n - 1)
    end
end

print(&#34;enter a number:&#34;)
a = io.read(&#34;*n&#34;)       -- reads a number
print(fact(a))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_chuncks">5. Chuncks</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We call each piece of code that Lua executes, such as a file or a single line
in interactive mode, a <em>chunk</em>. A chunk is simply a sequence of commands
(or statements).</p>
</div>
<div class="paragraph">
<p>A chunk can be as simple as a single statement, such as in the &#34;Hello World&#34; example,
or it can be composed of a mix of statements and function definitions
(which are actually assignments, as we will see later), such as the factorial example.</p>
</div>
<div class="paragraph">
<p>Instead of writing your program to a file, you can run the stand-alone interpreter
in interactive mode. If you call <code>lua</code> without any arguments, you will get its prompt:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
&gt;</pre>
</div>
</div>
<div class="paragraph">
<p>Thereafter, each command that you type (such as <code>print &#34;Hello World&#34;</code>)
executes immediately after you enter it. To exit the interactive mode
and the interpreter, just type the end-of-file control character
(<code>ctrl-D</code> in POSIX, <code>ctrl-Z</code> in Windows), or call the function <code>os.exit</code>,
from the Operating System library - you have to type <code>os.exit()</code>.</p>
</div>
<div class="paragraph">
<p>Starting in version 5.4, we can enter expressions directly in the interactive mode,
and Lua will print their values:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
&gt; math.pi / 4   --&gt; 0.78539816339745
&gt; a = 15
&gt; a ^ 2         --&gt; 225
&gt; a + 2         --&gt; 17</pre>
</div>
</div>
<div class="paragraph">
<p>In older versions, we need to precede these expressions with an equals sign:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua5.2
Lua 5.2.3  Copyright (C) 1994-2013 Lua.org, PUC-Rio
&gt; a = 15
&gt; = a ^ 2         --&gt; 225</pre>
</div>
</div>
<div class="paragraph">
<p>For compatibility, Lua 5.4 still accepts these equals signs.</p>
</div>
<div class="paragraph">
<p>To run that code as a chunk (not in interactive mode), we must enclose
the expressions inside calls to <code>print</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">print(math.pi / 4)  --&gt; 0.78539816339745
a = 15
print(a ^ 2)        --&gt; 225
print(a + 2)        --&gt; 17</code></pre>
</div>
</div>
<div class="paragraph">
<p>Lua usually interprets each line that we type in interactive mode as a complete
chunk or expression. However, if it detects that the line is not complete,
it waits for more input, until it has a complete chunk. This way, we can enter a
multi-line definition, such as the factorial function, directly in interactive mode.
However, it is usually more convenient to put such definitions in a file and then
call Lua to run the file.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="figs/intractive-multiline.png" alt="Multiline Code in Intractive Mode"/>
</div>
</div>
<div class="paragraph">
<p>We can use the <code>-i</code> option to instruct Lua to start an interactive session
after running a given chunk:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>$ lua -i prog</pre>
</div>
</div>
<div class="paragraph">
<p>A command line like this one will run the chunk in the file <code>prog</code> and then
prompt for interaction. This is especially useful for debugging and manual testing.</p>
</div>
<div class="paragraph">
<p>Another way to run chunks is with the function <code>dofile</code>, which immediately executes
a file. For instance, suppose we have a file <code>lib1.lua</code> with the following code:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">function norm (x, y)
    return math.sqrt(x^2 + y^2)
end

function twice (x)
    return 2.0 * x
end</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then, in interactive mode, we can type this code:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; dofile(&#34;lib1.lua&#34;)    -- load our library
&gt; n = norm(3.4, 1.0)
&gt; twice(n)              --&gt; 7.0880180586677</pre>
</div>
</div>
<div class="paragraph">
<p>The function <code>dofile</code> is useful also when we are testing a piece of code. We can work
with two windows: one is a text editor with our program (in a file <code>prog.lua</code>, say)
and the other is a console running Lua in interactive mode. After saving a
modification in our program, we execute <code>dofile(&#34;prog.lua&#34;)</code> in the Lua console to
load the new code; then we can exercise the new code, calling its functions and
printing the results.</p>
</div>
<div class="sect2">
<h3 id="_some_lexical_conventions">5.1. Some Lexical Conventions</h3>
<div class="paragraph">
<p>Identifiers (or names) in Lua can be any string of letters, digits, and underscores,
not beginning with a digit; for instance</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>i</code></p>
</li>
<li>
<p><code>j</code></p>
</li>
<li>
<p><code>i10</code></p>
</li>
<li>
<p><code>_ij</code></p>
</li>
<li>
<p><code>aSomewhatLongName</code></p>
</li>
<li>
<p><code>_INPUT</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You should avoid identifiers starting with an underscore followed by one or more
upper-case letters (e.g., <code>_VERSION</code>); they are reserved for special uses in Lua.
Usually, I reserve the identifier <code>_</code> (a single underscore) for dummy variables.</p>
</div>
<div class="paragraph">
<p>The following words are reserved; we cannot use them as identifiers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">and end if or until break false in repeat while do for local
return else function nil then elseif goto not true</code></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Lua is case-sensitive</div>
<div class="paragraph">
<p><code>and</code> is a reserved word, but <code>And</code> and <code>AND</code> are two different identifiers.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comments">6. Comments</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A comment is a code annotation that is ignored by the programming language.
Comments can be used to describe one or many lines of code, to document a program,
to temporarily disable code, or for any other reason.</p>
</div>
<div class="paragraph">
<p>They need to be prefixed by
two hyphens to be recognized by Lua and they can be put either on their own line
or at the end of another line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">print(&#34;This is normal code.&#34;)
-- This is a comment
print(&#34;This is still normal code.&#34;) -- Comment at the end of a line of code.</code></pre>
</div>
</div>
<div class="paragraph">
<p>These comments are called short comments. It is also possible to create long comments,
which start with a long bracket and can continue on many lines:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">print(&#34;This is normal code&#34;)
--[[Line 1
Line 2
]]</code></pre>
</div>
</div>
<div class="paragraph">
<p>Long brackets consist of two brackets in the middle of which any number of
equality signs may be put. That number is called the level of the long bracket.
Long brackets will continue until the next bracket of the same level, if there is one.</p>
</div>
<div class="paragraph">
<p>A long bracket with no equal sign is called a long bracket of level 0.
This approach makes it possible to use closing double brackets inside of
long comments by adding equal signs in the middle of the two brackets.
It is often useful to do this when using comments to disable blocks of code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">--[==[
This is a comment that contains a closing long bracket of level 0 which is here:
 ]]
However, the closing double bracket doesn&#39;t make the comment end, because the
  comment was opened with an opening long bracket of level 2, and only a closing
  long bracket of level 2 can close it.
]==]</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the example above, the closing long bracket of level 0 (<code>]]</code>) does not close the comment,
but the closing long bracket of level 2 (<code>]==]</code>) does.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Long comments can be more complex than that, as we will see in
the section called &#34;Long Strings&#34;.</p>
</div>
</blockquote>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_expressions">7. Expressions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Expressions are pieces of code that have a value and that can be
evaluated. They cannot be executed directly (with the exception of function calls), and
thus, a script that would contain only the following code, which consists of an expression,
would be erroneous:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">3 + 5</code></pre>
</div>
</div>
<div class="paragraph">
<p>The code above is erroneous because all it contains is an expression.
The computer cannot execute <code>3 + 5</code>, since that does not make sense.</p>
</div>
<div class="paragraph">
<p>Code must be comprised of a sequence of statements. These statements can contain expressions
which will be values the statement has to manipulate or use to execute the instruction.</p>
</div>
<div class="paragraph">
<p>Some code examples in this chapter do not constitute valid code, because they consist of
only expressions. In the next chapter, statements will be covered and it will be possible to
start writing valid code.</p>
</div>
<div class="paragraph">
<p>Lua needs no separator between consecutive statements, but we can use a semicolon if
we wish. Line breaks play no role in Lua’s syntax; for instance, the following
four chunks are all valid and equivalent:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">a = 1
b = a * 2

a = 1;
b = a * 2;

a = 1; b = a * 2
a = 1 b = a * 2 -- ugly, but valid</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_global_variables">8. Global Variables</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Global variables do not need declarations; we simply use them. It is not an error
to access a non-initialized variable; we just get the value nil as the result:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; b   --&gt; nil
&gt; b = 10
&gt; b   --&gt; 10</pre>
</div>
</div>
<div class="paragraph">
<p>If we assign nil to a global variable, Lua behaves as if we have never used the variable:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; b = nil
&gt; b   --&gt; nil</pre>
</div>
</div>
<div class="paragraph">
<p>Lua does not differentiate a non-initialized variable from one that we assigned nil.
After the assignment, Lua can eventually reclaim the memory used by the variable.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_types_and_values">9. Types and Values</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lua is a dynamically-typed language. There are no type definitions in the language;
each value carries its own type.</p>
</div>
<div class="paragraph">
<p>There are eight basic types in Lua:
<em>nil</em>, <em>Boolean</em>, <em>number</em>, <em>string</em>, <em>userdata</em>, <em>function</em>, <em>thread</em>, and <em>table</em>.
The function <code>type</code> gives the type name of any given value:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; type(nil)           --&gt; nil
&gt; type(true)          --&gt; boolean
&gt; type(10.4 * 3)      --&gt; number
&gt; type(&#34;Hello world&#34;) --&gt; string
&gt; type(io.stdin)      --&gt; userdata
&gt; type(print)         --&gt; function
&gt; type(type)          --&gt; function
&gt; type({})            --&gt; table
&gt; type(type(X))       --&gt; string</pre>
</div>
</div>
<div class="paragraph">
<p>The last line will result in “string” no matter the value of <code>X</code>,
because the result of <code>type</code> is always a string.</p>
</div>
<div class="paragraph">
<p>The userdata type allows arbitrary C data to be stored in Lua variables.
It has no predefined operations in Lua, except assignment and equality test.
Userdata are used to represent new types created by an application program or
a library written in C; for instance, the standard I/O library uses them to
represent open files. We will discuss more about userdata later,
when we get to the C API.</p>
</div>
<div class="paragraph">
<p>Variables have no predefined types; any variable can contain values of any type:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; type(a)          --&gt; nil    (&#39;a&#39; is not initialized)
&gt; a = 10
&gt; type(a)          --&gt; number
&gt; a = &#34;a string!!&#34;
&gt; type(a)          --&gt; string
&gt; a = nil
&gt; type(a)          --&gt; nil</pre>
</div>
</div>
<div class="paragraph">
<p>The list of data types for values are given below.</p>
</div>
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
Type
</td>
<td class="hdlist2">
<p>Description</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>nil</code>
</td>
<td class="hdlist2">
<p>Used to differentiate the value from having some data or no(nil) data.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>boolean</code>
</td>
<td class="hdlist2">
<p>Includes true and false as values. Generally used for condition checking.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>number</code>
</td>
<td class="hdlist2">
<p>Represents real(double precision floating point) numbers.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>string</code>
</td>
<td class="hdlist2">
<p>Represents array of characters.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>function</code>
</td>
<td class="hdlist2">
<p>Represents a method that is written in C or Lua.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>userdata</code>
</td>
<td class="hdlist2">
<p>Represents arbitrary C data.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>thread</code>
</td>
<td class="hdlist2">
<p>Represents independent threads of execution and it is used to implement coroutines.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>table</code>
</td>
<td class="hdlist2">
<p>Represent ordinary arrays, symbol tables, sets, records, graphs, trees, etc., and implements associative arrays. It can hold any value (except nil).</p>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>Usually, when we use a single variable for different types, the result is messy code.
However, sometimes the judicious use of this facility is helpful,
for instance in the use of nil to differentiate a normal return
value from an abnormal condition.</p>
</div>
<div class="paragraph">
<p>By default, all the variables will point to nil until they are assigned a value
or initialized.</p>
</div>
<div class="paragraph">
<p>We will discuss now the simple types nil and Boolean.</p>
</div>
<div class="sect2">
<h3 id="_nil">9.1. Nil</h3>
<div class="paragraph">
<p>Nil is a type with a single value, nil, whose main property is to be different
from any other value. Lua uses nil as a kind of non-value, to represent the
absence of a useful value. As we have seen, a global variable has a nil value
by default, before its first assignment, and we can assign nil to a global
variable to delete it.</p>
</div>
</div>
<div class="sect2">
<h3 id="_booleans">9.2. Booleans</h3>
<div class="paragraph">
<p>The Boolean type has two values, <code>false</code> and <code>true</code>, which represent the
traditional Boolean values. However, Booleans do not hold a monopoly of
condition values: in Lua, any value can represent a condition. Conditional
tests (e.g., conditions in control structures) consider both the Boolean
<code>false</code> and <code>nil</code> as false and anything else as true. In particular, Lua
considers both zero and the empty string as <code>true</code> in conditional tests.</p>
</div>
<div class="paragraph">
<p>Throughout this book, I will write &#34;false&#34; to mean any false value, that is,
the Boolean <code>false</code> or nil. When I mean specifically the Boolean value, I will
write &#34;false&#34;. The same holds for &#34;true&#34; and “true”.</p>
</div>
<div class="paragraph">
<p>Lua supports a conventional set of logical operators: <code>and</code>, <code>or</code>, and <code>not</code>.
Like control structures, all logical operators consider both the Boolean
<code>false</code> and nil as false, and anything else as true. The result of the <code>and</code>
operator is its first operand if that operand is false; otherwise, the result
is its second operand.  The result of the <code>or</code> operator is its first operand if
it is not false; otherwise, the result is its second operand:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; 4 and 5           --&gt; 5
&gt; nil and 13        --&gt; nil
&gt; false and 13      --&gt; false
&gt; 0 or 5            --&gt; 0
&gt; false or &#34;hi&#34;     --&gt; &#34;hi&#34;
&gt; nil or false      --&gt; false</pre>
</div>
</div>
<div class="paragraph">
<p>Both <strong>and</strong> and <strong>or</strong> use short-circuit evaluation, that is, they evaluate
their second operand only when necessary. Short-circuit evaluation ensures that
expressions like (<code>i ~= 0 and a/i &gt; b</code>) do not cause run-time errors: Lua will
not try to evaluate <code>a / i</code> when <code>i</code> is zero.</p>
</div>
<div class="paragraph">
<p>A useful Lua idiom is <code>x = x or v</code>, which is equivalent to</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">if not x then x = v end</code></pre>
</div>
</div>
<div class="paragraph">
<p>That is, it sets <code>x</code> to a default value <code>v</code> when <code>x</code> is not set
(provided that <code>x</code> is not set to <strong>false</strong>).</p>
</div>
<div class="paragraph">
<p>Another useful idiom is <code>((a and b) or c)</code> or simply <code>(a and b or c)</code>
(given that <code>and</code> has a higher precedence than <code>or</code>). It is equivalent to the C
expression <code>a ? b : c</code>, provided that <code>b</code> is not false. For instance, we can select
the maximum of two numbers <code>x</code> and <code>y</code> with the expression <code>(x &gt; y) and x or y</code>.
When <code>x &gt; y</code>, the first expression of the <strong>and</strong> is true, so the <strong>and</strong> results
in its second operand (<code>x</code>), which is always true (because it is a number),
and then the <strong>or</strong> expression results in the value of its first operand, <code>x</code>.
When <code>x &gt; y</code> is false, the <strong>and</strong> expression is false and so the <strong>or</strong> results
in its second operand, <code>y</code>.</p>
</div>
<div class="paragraph">
<p>The not operator always gives a Boolean value:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&gt; not nil        --&gt; true
&gt; not false      --&gt; true
&gt; not 0          --&gt; false
&gt; not not 1      --&gt; true
&gt; not not nil    --&gt; false</pre>
</div>
</div>
<div class="paragraph">
<p>The following operators are often used with boolean values,
but can also be used with values of any data type:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;"/>
<col style="width: 33.3333%;"/>
<col style="width: 33.3334%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Operation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Syntax</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Boolean negation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>not a</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">If a is false or nil, returns true. Otherwise, returns false.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Logical conjunction</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a and b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the first argument if it is false or nil. Otherwise, returns the second argument.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Logical disjunction</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a or b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the first argument if it is neither false nor nil. Otherwise, returns the second argument.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Essentially, the <code>not</code> operator just negates the boolean value
(makes it false if it is true and makes it true if it is false),
the <code>and</code> operator returns true if both are true and false if not
and the <code>or</code> operator returns true if either of arguments is true and false otherwise.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">local is_alive = true
print(is_alive) -- true

local is_alive = false
print(is_alive) -- false</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_numbers">9.3. Numbers</h3>
<div class="paragraph">
<p>Numbers generally represent quantities, but they can be used for many other things. The
number type in Lua works mostly in the same way as real numbers.</p>
</div>
<div class="paragraph">
<p>Numbers can be constructed as integers, decimal numbers, decimal exponents or
even in hexadecimal. Here are some valid numbers:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>3</code></p>
</li>
<li>
<p><code>3.0</code></p>
</li>
<li>
<p><code>3.1416</code></p>
</li>
<li>
<p><code>314.16e-2</code></p>
</li>
<li>
<p><code>0.31416E1</code></p>
</li>
<li>
<p><code>0xff</code></p>
</li>
<li>
<p><code>0x56</code></p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">-- The Lua
local a = 1
local b = 2
local c = a + b
print(c) -- 3

local d = b - a
print(d)

local x = 1 * 3 * 4 -- 12
print(x)

local y = (1+3) * 2 -- 8
print(y)

print(10 / 2) -- 5
print(2 ^ 2) -- 4
print(5 % 2) -- 1
print(-b) -- -2

-- Incerment
local level = 1
level = level + 1
print(level)</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_arithmetic_operations">9.3.1. Arithmetic operations</h4>
<div class="paragraph">
<p>The operators for numbers in Lua are the following:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 25%;"/>
<col style="width: 25%;"/>
<col style="width: 25%;"/>
<col style="width: 25%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Operation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Syntax</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
<th class="tableblock halign-left valign-top"><strong>Example</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Arithmetic negation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>-a</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Changes the sign of a and returns the value</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>-3.14159</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Addition</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a + b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the sum of <code>a</code> and <code>b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5.2 + 3.6</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Subtraction</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a - b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Subtracts b from a and returns the result</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5.2 + 3.6</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Multiplication</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a * b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the product of a and b</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>3.2 _ 1.5</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Exponentiation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a ^ b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns a to the power b, or the exponentiation of a by b</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5 ˆ 2</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Division</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a / b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Divides a by b and returns the result</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>6.4 / 2</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><em>Modulus operation</em></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>a % b</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the remainder of the division of a by b</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>5 % 3</code></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_integers">9.3.2. Integers</h4>
<div class="paragraph">
<p>A new subtype of numbers, integers, was added in Lua 5.3. Numbers can be either
integers or floats.  Floats are similar to numbers as described above, while
integers are numbers with
no decimal part.</p>
</div>
<div class="paragraph">
<p>Float division (<code>/</code>) and exponentiation always convert their operands to
floats, while all other operators give integers if their two operands were
integers.  In other cases, with the exception of the floor division operator
(<code>//</code>) the result is a float.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_strings">9.4. Strings</h3>
<div class="paragraph">
<p>Strings are sequences of characters that can be used to represent text. They can be written
in Lua by being contained in double quotes, single quotes or long brackets
(it should be noted that comments and
strings have nothing in common other than the fact they can both be delimited by long
brackets, preceded by two hyphens in the case of comments).</p>
</div>
<div class="paragraph">
<p>Strings that aren’t contained
in long brackets will only continue for one line. Because of this, the only way to make a
string that contains many lines without using long brackets is to use escape sequences. This
is also the only way to insert single or double quotes in certain cases.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>&#39; &#39;</code></p>
</li>
<li>
<p><code>&#34; &#34;</code></p>
</li>
<li>
<p><code>[[ ]]</code></p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">local phrase = [[My name is ]]
local name = &#39;P J&#39;
print(phrase .. name) -- My name is P J

-- Strings and Numbers
local age = 21
local name = &#34;Billy&#34;
print(name .. &#34; is &#34; .. age .. &#34; Years old&#34;)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Escape sequence characters are used in string to change the normal
interpretation of characters.</p>
</div>
<div class="paragraph">
<p>For example, to print double inverted commas
<code>(&#34;&#34;)</code>, we have to use <code>\&#34;</code> in the string.</p>
</div>
<div class="paragraph">
<p>The escape sequence and its use is listed below in the table.</p>
</div>
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
<strong>Escape Sequence</strong>
</td>
<td class="hdlist2">
<p><strong>Use</strong></p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\a</code>
</td>
<td class="hdlist2">
<p>Bell</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\b</code>
</td>
<td class="hdlist2">
<p>Backspace</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\f</code>
</td>
<td class="hdlist2">
<p>Formfeed</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\n</code>
</td>
<td class="hdlist2">
<p>New line</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\r</code>
</td>
<td class="hdlist2">
<p>Carriage return</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\t</code>
</td>
<td class="hdlist2">
<p>Tab</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\v</code>
</td>
<td class="hdlist2">
<p>Vertical tab</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\\</code>
</td>
<td class="hdlist2">
<p>Backslash</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\&#34;</code>
</td>
<td class="hdlist2">
<p>Double quotes</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\&#39;</code>
</td>
<td class="hdlist2">
<p>Single quotes</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\[</code>
</td>
<td class="hdlist2">
<p>Left square bracket</p>
</td>
</tr>
<tr>
<td class="hdlist1">
<code>\]</code>
</td>
<td class="hdlist2">
<p>Right square bracket</p>
</td>
</tr>
</tbody></table>
</div>
<div class="paragraph">
<p>It is possible to get the length of a string, as a number, by using the unary length operator
(<code>#</code>):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="lua">print(#(&#34;This is a string&#34;)) --&gt; 16</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_concatenation">9.4.1. Concatenation</h4>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>In <a href="https://en.wikipedia.org/wiki/formal%20language">formal language theory</a> and
<a href="https://en.wikipedia.org/wiki/computer%20programming">computer programming</a>
<em>string concatenation</em> is the operation of joining two character
<a href="https://en.wikipedia.org/wiki/character%20string%20%28computer%20science%29">strings</a>
end-to-end.</p>
</div>
<div class="exampleblock">
<div class="title">Example 1. &#34;snowball&#34;</div>
<div class="content">
<div class="paragraph">
<p>The concatenation of &#34;snow&#34; and &#34;ball&#34;.</p>
</div>
</div>
</div>
</blockquote>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_types">9.5. Other types</h3>
<div class="paragraph">
<p>The four basic types in Lua (numbers, booleans, nil and strings) have been described in
the previous sections, but four types are missing:
functions, tables, userdata and threads.</p>
</div>
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
Functions
</td>
<td class="hdlist2">
<p>Pieces of code that can be called, receive values and return values back.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
Tables
</td>
<td class="hdlist2">
<p>Data structures that can be used for data manipulation.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
Userdata
</td>
<td class="hdlist2">
<p>Used internally by applications Lua is embedded in to allow
Lua to communicate with that program through objects controlled by the
application.</p>
</td>
</tr>
<tr>
<td class="hdlist1">
Threads
</td>
<td class="hdlist2">
<p>Used by coroutines, which allow many functions to run at the <em>same time</em>.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_literals">10. Literals</h2>
<div class="sectionbody">

</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Go Programming Language</title>
      <link>https://hossein-lap.github.io/docs/go/go/</link>
      <pubDate>Tue, 02 Apr 2024 22:30:03 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/go/go/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><strong>Insert Lead paragraph here.</strong></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_new_stuff">1. New stuff</h2>
<div class="sectionbody">
<div class="paragraph">
<p>very versile</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_more_stuff">2. more stuff</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="go">package main

import (
    &#34;fmt&#34;
)

func main() {
    fmt.Printf(&#34;This is a simple test!\n&#34;)
}</code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>AsciiDoc(tor): Yo Dawg!</title>
      <link>https://hossein-lap.github.io/docs/asciidoc/asciidoc/</link>
      <pubDate>Tue, 02 Apr 2024 22:09:44 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/asciidoc/asciidoc/</guid>
      <description><![CDATA[
<div class="sect1">
<h2 id="_intro">1. Intro</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Okay, let’s do it.</p>
</div>
<div class="listingblock">
<div class="title">Test</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="c">// include::{home}/.cache/wal/colors-wal-st.h[]</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lists">2. Lists</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_unordered_lists">2.1. Unordered lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">* level 1
** level 2
*** level 3
**** level 4
***** level 5
* level 1</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 1. Output</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p>level 1</p>
<div class="ulist">
<ul>
<li>
<p>level 2</p>
<div class="ulist">
<ul>
<li>
<p>level 3</p>
<div class="ulist">
<ul>
<li>
<p>level 4</p>
<div class="ulist">
<ul>
<li>
<p>level 5</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>level 1</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_ordered_lists">2.2. Ordered lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">. level 1
.. level 2
... level 3
.... level 4
..... level 5
. level 1</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 2. Output</div>
<div class="content">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>level 1</p>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
<li>
<p>level 2</p>
<div class="olist lowerroman">
<ol class="lowerroman" type="i">
<li>
<p>level 3</p>
<div class="olist upperalpha">
<ol class="upperalpha" type="A">
<li>
<p>level 4</p>
<div class="olist upperroman">
<ol class="upperroman" type="I">
<li>
<p>level 5</p>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
</ol>
</div>
</li>
<li>
<p>level 1</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_todo_lists">2.3. TODO lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">- [*] checked
- [x] also checked
- [ ] not checked
- normal list item</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 3. Output</div>
<div class="content">
<div class="ulist checklist">
<ul class="checklist">
<li>
<p>✓ checked</p>
</li>
<li>
<p>✓ also checked</p>
</li>
<li>
<p>❏ not checked</p>
</li>
<li>
<p>normal list item</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_separating_lists">2.4. Separating lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">. Apples
. Oranges

//-

. Walnuts
. Almonds</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 4. Output</div>
<div class="content">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Apples</p>
</li>
<li>
<p>Oranges</p>
</li>
</ol>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Walnuts</p>
</li>
<li>
<p>Almonds</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_definitions">3. Definitions</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_normal_definition_list">3.1. Normal definition list</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">first term:: definition of first term
section term:: definition of second term</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 5. Output</div>
<div class="content">
<div class="dlist">
<dl>
<dt class="hdlist1">first term</dt>
<dd>
<p>definition of first term</p>
</dd>
<dt class="hdlist1">section term</dt>
<dd>
<p>definition of second term</p>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_horizontal_definition_list">3.2. Horizontal definition list</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">[horizontal]
first term:: definition of first term
section term:: definition of second term</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 6. Output</div>
<div class="content">
<div class="hdlist">
<table>
<tbody><tr>
<td class="hdlist1">
first term
</td>
<td class="hdlist2">
<p>definition of first term</p>
</td>
</tr>
<tr>
<td class="hdlist1">
section term
</td>
<td class="hdlist2">
<p>definition of second term</p>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_multi_line_definition_list">3.3. Multi-line definition list</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">first term::
definition of first term
section term::
definition of second term</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 7. Output</div>
<div class="content">
<div class="dlist">
<dl>
<dt class="hdlist1">first term</dt>
<dd>
<p>definition of first term</p>
</dd>
<dt class="hdlist1">section term</dt>
<dd>
<p>definition of second term</p>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_qa">3.4. Q&amp;A</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">[qanda]
What is Asciidoctor?::
An implementation of the AsciiDoc processor in Ruby.
What is the answer to the Ultimate Question?:: 42</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 8. Output</div>
<div class="content">
<div class="qlist qanda">
<ol>
<li>
<p><em>What is Asciidoctor?</em></p>
<p>An implementation of the AsciiDoc processor in Ruby.</p>
</li>
<li>
<p><em>What is the answer to the Ultimate Question?</em></p>
<p>42</p>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_mixed">3.5. Mixed</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">Operating Systems::
    Linux:::
        . Fedora
            * Desktop
        . Ubuntu
            * Desktop
            * Server
    BSD:::
        . FreeBSD
        . NetBSD
Cloud Providers::
    PaaS:::
        . OpenShift
        . CloudBees
    IaaS:::
        . Amazon EC2
        . Rackspace</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 9. Output</div>
<div class="content">
<div class="dlist">
<dl>
<dt class="hdlist1">Operating Systems</dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1">Linux</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Fedora</p>
<div class="ulist">
<ul>
<li>
<p>Desktop</p>
</li>
</ul>
</div>
</li>
<li>
<p>Ubuntu</p>
<div class="ulist">
<ul>
<li>
<p>Desktop</p>
</li>
<li>
<p>Server</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
</dd>
<dt class="hdlist1">BSD</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>FreeBSD</p>
</li>
<li>
<p>NetBSD</p>
</li>
</ol>
</div>
</dd>
</dl>
</div>
</dd>
<dt class="hdlist1">Cloud Providers</dt>
<dd>
<div class="dlist">
<dl>
<dt class="hdlist1">PaaS</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>OpenShift</p>
</li>
<li>
<p>CloudBees</p>
</li>
</ol>
</div>
</dd>
<dt class="hdlist1">IaaS</dt>
<dd>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Amazon EC2</p>
</li>
<li>
<p>Rackspace</p>
</li>
</ol>
</div>
</dd>
</dl>
</div>
</dd>
</dl>
</div>
</div>
</div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Note that the indentation is optional
</td>
</tr>
</tbody></table>
</div>
</div>
<div class="sect2">
<h3 id="_complex_content_in_outline_lists">3.6. Complex content in outline lists</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">* Every list item has at least one paragraph of content,
  which may be wrapped, even using a hanging indent.
+
Additional paragraphs or blocks are adjoined by putting
a list continuation on a line adjacent to both blocks.
+
list continuation:: a plus sign (`{plus}`) on a line by itself

* A literal paragraph does not require a list continuation.

 $ gem install asciidoctor

* AsciiDoc lists may contain any complex content.
+
[cols=&#34;2&#34;, options=&#34;header&#34;]
|===
|Application
|Language
|AsciiDoc
|Python
|Asciidoctor
|Ruby
|===</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 10. Output</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Every list item has at least one paragraph of content,
which may be wrapped, even using a hanging indent.</p>
<div class="paragraph">
<p>Additional paragraphs or blocks are adjoined by putting
a list continuation on a line adjacent to both blocks.</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">list continuation</dt>
<dd>
<p>a plus sign (<code>+</code>) on a line by itself</p>
</dd>
</dl>
</div>
</li>
<li>
<p>A literal paragraph does not require a list continuation.</p>
<div class="literalblock">
<div class="content">
<pre>$ gem install asciidoctor</pre>
</div>
</div>
</li>
<li>
<p>AsciiDoc lists may contain any complex content.</p>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;"/>
<col style="width: 50%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Application</th>
<th class="tableblock halign-left valign-top">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">AsciiDoc</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Python</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Asciidoctor</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Ruby</p></td>
</tr>
</tbody>
</table>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_links">4. Links</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_external">4.1. External</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">http://asciidoctor.org - automatic!

http://asciidoctor.org[Asciidoctor]

https://github.com/asciidoctor[Asciidoctor @ *GitHub*]</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 11. Output</div>
<div class="content">
<div class="paragraph">
<p><a href="http://asciidoctor.org" class="bare">http://asciidoctor.org</a> - automatic!</p>
</div>
<div class="paragraph">
<p><a href="http://asciidoctor.org">Asciidoctor</a></p>
</div>
<div class="paragraph">
<p><a href="https://github.com/asciidoctor">Asciidoctor @ <strong>GitHub</strong></a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_relative">4.2. Relative</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">link:test.adoc[Docs]</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 12. Output</div>
<div class="content">
<div class="paragraph">
<p><a href="test.adoc">Docs</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_email_and_irc">4.3. Email and IRC</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">devel@discuss.arquillian.org

mailto:devel@discuss.arquillian.org[Discuss Arquillian]

mailto:devel-join@discuss.arquillian.org[Subscribe, Subscribe me, I want to join!]

irc://irc.freenode.org/#asciidoctor</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 13. Output</div>
<div class="content">
<div class="paragraph">
<p><a href="mailto:devel@discuss.arquillian.org">devel@discuss.arquillian.org</a></p>
</div>
<div class="paragraph">
<p><a href="mailto:devel@discuss.arquillian.org">Discuss Arquillian</a></p>
</div>
<div class="paragraph">
<p><a href="mailto:devel-join@discuss.arquillian.org?subject=Subscribe+me&amp;body=I+want+to+join%21">Subscribe</a></p>
</div>
<div class="paragraph">
<p><a href="irc://irc.freenode.org/#asciidoctor" class="bare">irc://irc.freenode.org/#asciidoctor</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_inline_anchors">4.4. Inline anchors</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">[[bookmark-a]]Inline anchors make arbitrary content referenceable.

anchor:bookmark-b[]Use a cross reference to link to this location.</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 14. Output</div>
<div class="content">
<div class="paragraph">
<p><a id="bookmark-a"></a>Inline anchors make arbitrary content referenceable.</p>
</div>
<div class="paragraph">
<p><a id="bookmark-b"></a>Use a cross reference to link to this location.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_internal_cross_references">4.5. Internal cross references</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">See &lt;&lt;paragraphs&gt;&gt; to learn how to write paragraphs.

Learn how to organize the document into &lt;&lt;section-titles,sections&gt;&gt;.</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 15. Output</div>
<div class="content">
<div class="paragraph">
<p>See <a href="#paragraphs">[paragraphs]</a> to learn how to write paragraphs.</p>
</div>
<div class="paragraph">
<p>Learn how to organize the document into <a href="#section-titles">sections</a>.</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_images">4.6. Images</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">image::/images/asciidoc/rose.png[]

image::/images/asciidoc/rose.png[Rose]

[[img-sunset]]

image::/images/asciidoc/rose.png[caption=&#34;Figure 1: &#34;, title=&#34;A rose&#34;, alt=&#34;Rose&#34;, width=&#34;300&#34;, height=&#34;200&#34;, link=&#34;http://www.flickr.com/photos/javh/5448336655&#34;]

image::http://asciidoctor.org/images/octocat.jpg[GitHub mascot]</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 16. Output</div>
<div class="content">
<div class="imageblock">
<div class="content">
<img src="/images/asciidoc/rose.png" alt="rose"/>
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="/images/asciidoc/rose.png" alt="Rose"/>
</div>
</div>
<div id="img-sunset" class="imageblock">
<div class="content">
<a class="image" href="http://www.flickr.com/photos/javh/5448336655"><img src="/images/asciidoc/rose.png" alt="Rose" width="300" height="200"/></a>
</div>
<div class="title">Figure 1: A rose</div>
</div>
<div class="imageblock">
<div class="content">
<img src="http://asciidoctor.org/images/octocat.jpg" alt="GitHub mascot"/>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_admonition_paragraph">5. Admonition paragraph</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_note">5.1. NOTE</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">NOTE: This is a NOTE!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 17. Output</div>
<div class="content">
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
This is a NOTE!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_tip">5.2. TIP</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">TIP: This is a TIP!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 18. Output</div>
<div class="content">
<div class="admonitionblock tip">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Tip</div>
</td>
<td class="content">
This is a TIP!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_warning">5.3. WARNING</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">WARNING: This is a WARNING!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 19. Output</div>
<div class="content">
<div class="admonitionblock warning">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Warning</div>
</td>
<td class="content">
This is a WARNING!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_caution">5.4. CAUTION</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">CAUTION: This is a CAUTION!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 20. Output</div>
<div class="content">
<div class="admonitionblock caution">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Caution</div>
</td>
<td class="content">
This is a CAUTION!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_important">5.5. IMPORTANT</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">IMPORTANT: This is a IMPORTANT!</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 21. Output</div>
<div class="content">
<div class="admonitionblock important">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">
This is a IMPORTANT!
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_admonition_blocks">5.6. Admonition blocks</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">[NOTE]
====
This is an example of an admonition block.
Unlike an admonition paragraph, it may contain any AsciiDoc content.
The style can be any one of the admonition labels:

* NOTE
* TIP
* WARNING
* CAUTION
* IMPORTANT
====</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 22. Output</div>
<div class="content">
<div class="admonitionblock note">
<table>
<tbody><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
<div class="paragraph">
<p>This is an example of an admonition block.
Unlike an admonition paragraph, it may contain any AsciiDoc content.
The style can be any one of the admonition labels:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>NOTE</p>
</li>
<li>
<p>TIP</p>
</li>
<li>
<p>WARNING</p>
</li>
<li>
<p>CAUTION</p>
</li>
<li>
<p>IMPORTANT</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody></table>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_blocks">6. Blocks</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_listing_block">6.1. Listing block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">-----
This is a **_listing block_**
-----</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 23. Output</div>
<div class="content">
<div class="listingblock">
<div class="content">
<pre>This is a **_listing block_**</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_example_block">6.2. Example block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">=====
This is a **_example block_**
=====</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 24. Output</div>
<div class="content">
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>This is a <strong><em>example block</em></strong></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_comment_block">6.3. Comment block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">////
This is a **_comment block_**
////</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 25. Output</div>
<div class="content">

</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_literal_block">6.4. Literal block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">....
This is a **_literal block_**
....</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 26. Output</div>
<div class="content">
<div class="literalblock">
<div class="content">
<pre>This is a **_literal block_**</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_pass_block">6.5. Pass block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">++++
== This is raw text
++++</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 27. Output</div>
<div class="content">
== This is raw text
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_quoteverse_block">6.6. Quote/Verse block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">____
This is a very very simple quote
____</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 28. Output</div>
<div class="content">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>This is a very very simple quote</p>
</div>
</blockquote>
</div>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_blockqoutes">6.6.1. blockqoutes</h4>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">.After landing the cloaked Klingon bird of prey in Golden Gate park:
[quote,Captain James T. Kirk,Star Trek IV: The Voyage Home]
Everybody remember where we parked.</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 29. Output</div>
<div class="content">
<div class="quoteblock">
<div class="title">After landing the cloaked Klingon bird of prey in Golden Gate park:</div>
<blockquote>
Everybody remember where we parked.
</blockquote>
<div class="attribution">
— Captain James T. Kirk<br/>
<cite>Star Trek IV: The Voyage Home</cite>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_sidebar_block">6.7. Sidebar block</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">.Some Title
****
This is a Sidebar block -- I have no idea why it&#39;s called `sidebar`
****</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 30. Output</div>
<div class="content">
<div class="sidebarblock">
<div class="content">
<div class="title">Some Title</div>
<div class="paragraph">
<p>This is a Sidebar block — I have no idea why it’s called <code>sidebar</code></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_block_metadata">6.8. Block metadata</h3>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="asciidoc">.Gettysburg Address
[[gettysburg]]
[quote, Abraham Lincoln, Soldiers&#39; National Cemetery Dedication]
----
Four score and seven years ago our fathers brought forth
on this continent a new nation...
Now we are engaged in a great civil war, testing whether
that nation, or any nation so conceived and so dedicated,
can long endure. ...
----</code></pre>
</div>
</div>
<div class="exampleblock">
<div class="title">Example 31. Output</div>
<div class="content">
<div id="gettysburg" class="listingblock">
<div class="title">Gettysburg Address</div>
<div class="content">
<pre>Four score and seven years ago our fathers brought forth
on this continent a new nation...
Now we are engaged in a great civil war, testing whether
that nation, or any nation so conceived and so dedicated,
can long endure. ...</pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_customization_wip">7. Customization (WIP)</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_render_wip">8. Render (WIP)</h2>
<div class="sectionbody">

</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Elixir Programming Language</title>
      <link>https://hossein-lap.github.io/docs/elixir/elixir/</link>
      <pubDate>Tue, 02 Apr 2024 22:09:44 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/docs/elixir/elixir/</guid>
      <description><![CDATA[
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Elixir is a dynamically-typed functional programming language.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_intractive_elixir_environment">1. Intractive elixir environment</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="rouge highlight"><code data-lang="bash">$ iex</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_hello_world">2. Hello World!</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="title">intro.exs</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="elixir">#!/bin/elixir
IO.puts(&#34;Hello&#34; &lt;&gt; &#34; Elixir!!&#34;)</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_build_tool">3. Build Tool</h2>
<div class="sectionbody">
<div class="literalblock">
<div class="content">
<pre>mix help
mix new
mix compile
mix test
mix run</pre>
</div>
</div>
<div class="listingblock">
<div class="title">Create</div>
<div class="content">
<pre class="rouge highlight"><code data-lang="bash">mix new example</code></pre>
</div>
</div>
</div>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>About</title>
      <link>https://hossein-lap.github.io/about/</link>
      <pubDate>Wed, 29 Mar 2023 22:14:09 +0330</pubDate>
      
      <guid>https://hossein-lap.github.io/about/</guid>
      <description><![CDATA[
<div class="paragraph">
<p>Hi I’m Hossein</p>
</div>
<div class="paragraph">
<p>Yet another minimalist person with a passion about Open Source Software.</p>
</div>
<div class="paragraph">
<p>I was a Computer guy from my early days back in my 1st and 2nd grade.
But all I did was playing video games. Until my dad came to me and said:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Don’t just play video games kiddo, it can do much more than that. try to
learn it.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>And that was it. It became the goal of my life :)</p>
</div>
<div class="sect1">
<h2 id="_programming">1. Programming</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I have a solid background with writing and patching softwares in some
programming languages like</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 16.6666%;"/>
<col style="width: 16.6666%;"/>
<col style="width: 16.6666%;"/>
<col style="width: 16.6666%;"/>
<col style="width: 16.6666%;"/>
<col style="width: 16.667%;"/>
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">C</th>
<th class="tableblock halign-left valign-top">Lua</th>
<th class="tableblock halign-left valign-top">Go</th>
<th class="tableblock halign-left valign-top">Bash</th>
<th class="tableblock halign-left valign-top">Python</th>
<th class="tableblock halign-left valign-top">…​</th>
</tr>
</thead>
</table>
<div class="paragraph">
<p>by <em>mostly</em> using some tools that required a little programming knowledge to
modify / configure or extend.</p>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">Let me give you an example</div>
<div class="paragraph">
<p>I wanted to learn Python language so I needed to take some notes, I decided to
use LaTeX for that matter and my notes were getting dirty, I was losing some of
them, they’re getting out-of-hand, then I’ve decided to use git for managing
them.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>I learned <code>C</code> by patching / configuring the <a href="http://suckless.org">suckless</a>
tools, <code>Lua</code> by configuring neovim and writing plugins for it, <code>Bash</code> by using
it daily with &#34;Live inside terminal&#34; approach. of cource I’ve also read books
and documentations for them eventually. <code>Python</code> and <code>Go</code> are the ones that I
really sat-down and read books / docs about them from the beginning of the
journey.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_workflow">2. Workflow</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I’m a simple guy so I like simplicity.</p>
</div>
<div class="paragraph">
<p>I use <a href="https://st.suckless.org">st</a> as my terminal emulator.
I have <a href="https://vim.org">vim</a> (or <a href="https://neovim.io">neovim</a> I’m fine with both)
as my text editor in my pocket, <a href="https://github.com/tmux/tmux/wiki">tmux</a> as
multiplexer / session-manager by my side, I have a home in any window manger
(but I perfer it to be inside <a href="https://dwm.suckless.org">dwm</a> over the other).
Also for some BiDi papers and documents I’ve let the little evil in,
<a href="https://github.com/doomemacs/doomemacs">doom emacs</a>.</p>
</div>
<div class="paragraph">
<p>To be honest, I just need a POSIX-complaint shell, tmux, vim and git.
All of these can be repleaced and I’m fine wit their alternatives.</p>
</div>
<div class="sect2">
<h3 id="_operating_system">2.1. Operating System</h3>
<div class="paragraph">
<p>Currently (as of June 21, 2024) I’m using NixOS as my daily-driver OS.
I love NixOS’s approach and its reproducability, just starting to like Nix
language / packages manager, I’ve wanted to learn a functional programming
language anyway (I still might go for Elixir) so, that’s might be it,
who knows ;)</p>
</div>
<div class="paragraph">
<p>I’m very fine and comfortable with most of other Linux Distributions out there.
I’ve started using Linux with Ubuntu 18.04, shortly moved to Linux mint 18
and used it about a 6 to 10 months, after that I went for Manjaro xfce,
installed it, used it for about 3 or so months and then, I installed Manjaro i3.</p>
</div>
<div class="paragraph">
<p>The emphasizing <strong>Manjaro i3</strong> is because it really changed the way I look at a
GUI.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_wip">3. WIP</h2>
<div class="sectionbody">

</div>
</div>
]]></description>
      
    </item>
    
    
    
    
    
    
  </channel>
</rss>
